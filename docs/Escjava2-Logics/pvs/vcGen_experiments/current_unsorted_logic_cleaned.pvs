escjava_types : THEORY
  BEGIN
    S : TYPE+
  END escjava_types

escjava_builtin_array_theory : THEORY
  BEGIN
    IMPORTING escjava_types

    select : [ S, S -> S ]
    store : [ S, S, S -> S ]

    % === ESCJ 8: Section 0.4

    select_store1 : AXIOM
      FORALL (m, i, x : S): select (store (m, i, x), i) = x

    select_store2 : AXIOM
      FORALL (m, i, j, x : S): i /= j IMPLIES 
                               select(store(m, i, x), j) = select(m, j)

  END escjava_builtin_array_theory

escjava_java_typesystem : THEORY
  BEGIN
    IMPORTING escjava_builtin_array_theory,
              orders[S]

    % <: is <=
    % subtyping_is_a_partial_order : AXIOM partial_order?(<=)
    % < is <
    % comparison_is_a_strict_total_order : AXIOM strict_total_order?(<)

    % === ESCJ 8: Section 1.1

    % We will use '<=' in PVS for '<:' in the Simplify logic.  Thus,
    % <= is reflexive, transitive, and antisymmetric.

    T_java_lang_Object : S

    % Primative types are final.

    T_boolean, T_char, T_byte, T_short, T_int, T_long, T_float, T_double : S

    primitive?(c : S): bool = (c = T_boolean) OR
                              (c = T_char) OR 
                              (c = T_byte) OR 
                              (c = T_short) OR 
                              (c = T_int) OR
                              (c = T_long) OR
                              (c = T_float) OR
                              (c = T_double)

    primative_types_are_final : AXIOM
      FORALL (c, p : S): c <= p AND primitive?(p) IMPLIES c = p
    primative_types_have_no_proper_supertypes : AXIOM
      FORALL (c, p : S): c <= p AND primitive?(c) IMPLIES p = c

    java_lang_Object_is_Top : AXIOM
      FORALL (c : S): NOT primitive?(c) IMPLIES c <= T_java_lang_Object
    % This could be expressed also using upper_bound?

    % === ESCJ 8: Section 1.3

    T_java_lang_Cloneable : S

    is : [ S, S -> bool ]
    cast : [ S, S -> S ]

    redundant_cast_removal : AXIOM
      FORALL (x, t : S): is(x, t) IMPLIES cast(x, t) = x

    % === ESCJ 8: Section 2.2

    java_null : S

    % Not in ESCJ8, but should be
    refEQ(a : S, b : S) : bool = a = b
    refNE(a : S, b : S) : bool = a /= b

  END escjava_java_typesystem

escjava_java_field_representation : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem,
              escjava_jml_semantics

%     S_to_real : [ S -> real ]
%     CONVERSION+ S_to_real

    % === ESCJ 8: Section 2.4

    % 'as' trick in use.
    asField : [ S, S -> S ]
    asField_definition : AXIOM
      FORALL (f, t, x : S): is(select(asField(f, t), x), t)

    % === ESCJ 8: Section 2.5

    elems : S

%     % 'as' trick in use.
     asElems : [ S -> S ]
%      asElems_definition : AXIOM
%        FORALL (e, a, i : S): is(select(select(asElems(e), a), i),
%                                 elemtype(typeof(a)))

    asElemsAxiom : AXIOM
      asElems(elems) = elems

    % === ESCJ 8: Section 3.0

    vAllocTime : [ S -> real ]
    isAllocated (x : S, a0 : real): bool = 
      vAllocTime(x) < a0

    % === ESCJ 8: Section 3.1

    fClosedTime : [ S -> real ]
    fClosedTime_definition : AXIOM
      FORALL (x, f : S , a0 : real): 
        (fClosedTime(f) < a0 AND isAllocated(x, a0)) IMPLIES
        isAllocated(select(f, x), a0)

    % === ESCJ 8: Section 3.2

    eClosedTime : [ S -> real ]
    eClosedTime_definition : AXIOM
      FORALL (a, e, i : S , a0 : real):
        (eClosedTime(e) < a0 AND isAllocated(a, a0)) IMPLIES
        isAllocated(select(select(e, a), i), a0)        

    % === Axioms about classLiteral; not in ESCJ 8 (yet?):

    classLiteral : [ S -> S ]
    T_java_lang_Class : S
    % TODO: review use of alloc
    alloc : real

%     classLiteral_definition1 : AXIOM
%       FORALL (t : S): classLiteral(t) /= java_null AND
%                       is(classLiteral(t), T_java_lang_Class) AND
%                       isAllocated(classLiteral(t), alloc)

%     classLiteral_definition2 : AXIOM
%       FORALL (t : S): classLiteral(t) = t

  END escjava_java_field_representation

escjava_java_strings : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem,
              escjava_jml_semantics

    T_java_lang_String : S
    stringCat (x, y : S): S

    stringCat_definition1 : AXIOM
      FORALL (x, y : S): stringCat(x, y) /= java_null AND
                         typeof(stringCat(x, y)) <= T_java_lang_String

  END escjava_java_strings

escjava_java_semantics : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem,
%               escjava_java_boolean_ops,
%               escjava_java_integral_types,
%               escjava_java_integral_ops,
%               escjava_java_floating_point,
              escjava_java_field_representation,
              escjava_java_strings
  END escjava_java_semantics

escjava_lock_semantics : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem,
              escjava_jml_semantics,
              escjava_java_field_representation
% 	      escjava_java_integral_ops

    LS : S
    max : S

    % === ESCJ 8: Section 4

    % 'as' trick in use.
    asLockSet : [ S -> S ]

    asLockSetAxiom : AXIOM
      asLockSet(LS) = LS
%      max : [ S -> S ]
%      max_of_a_lockset_is_a_lockset : AXIOM
%        FORALL (s : S): select(asLockSet(LS), max(asLockSet(s))) 

%     % null is in lockset (not in ESCJ 8)
%     null_is_in_lockset : AXIOM
%       FORALL (s : S): select(asLockSet(s), java_null) = bool_true

    lockLE (x, y : S): bool
    lockLT (x, y : S): bool

%     lockLE (x, y : S): S = integralLE(x, y)
%     lockLT (x, y : S): S = integralLT(x, y)

    % all locks in lockset are below max(lockset) (not in ESCJ 8)
    all_locks_in_lockset_are_below_max_lockset : AXIOM
      FORALL (s, mu : S): lockLE( mu, max)

    % null precedes all objects in locking order (not in ESCJ 8)
    null_precedes_all_objects : AXIOM
      FORALL (x : S): lockLE(java_null, x)

  END escjava_lock_semantics

escjava_jml_semantics : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem

    % === Define typeof for primitive types - DRCok
    typeof : [ S -> S ]

    typeof_char : AXIOM
      FORALL (x : S): is(x, T_char) IFF typeof(x) = T_char
    typeof_byte : AXIOM
      FORALL (x : S): is(x, T_byte) IFF typeof(x) = T_byte
    typeof_short : AXIOM
      FORALL (x : S): is(x, T_short) IFF typeof(x) = T_short
    typeof_int : AXIOM
      FORALL (x : S): is(x, T_int) IFF typeof(x) = T_int
    typeof_long : AXIOM
      FORALL (x : S): is(x, T_long) IFF typeof(x) = T_long
    typeof_float : AXIOM
      FORALL (x : S): is(x, T_float) IFF typeof(x) = T_float
    typeof_double : AXIOM
      FORALL (x : S): is(x, T_double) IFF typeof(x) = T_double

    % === ESCJ 8: Section 2.3

    typeof_reference_definition : AXIOM
      FORALL (x, t : S): t <= T_java_lang_Object IMPLIES
                         x = t IFF (x = java_null OR typeof(x) <= t)

  END escjava_jml_semantics

escjava_logic : THEORY
  BEGIN
    IMPORTING escjava_java_semantics,
              escjava_jml_semantics,
              escjava_lock_semantics
%               escjava_arrays

EXPLIES( a, b : bool) : bool = a OR (NOT b) 

exceptionEqAxiom : AXIOM
  FORALL(a, b : S) :
     java_lang_Throwable__stackTrace(a,b) = getStackTrace__state(a,b) 

 

ecReturn : S
ecThrow : S;

distinctAxiom : AXIOM
NOT refEQ
(ecReturn, ecThrow)
java_lang_Throwable__stackTrace
(a : S ,b : S)
: S
getStackTrace__state
(a : S ,b : S)
: S
;

testTheorem : THEOREM
FORALL
(
  vc_A2_f_3_4 , elems_pre , alloc_pre , state_pre , state , x_6_28 , y_6_34 , Pre_0_3_8 , brokenObj , java_lang_Throwable__stackTrace , getStackTrace__state , brokenObj_1_ , RES , trace_Return_0_8_1 , Exception_9_4 , Post_4_9_9_4 , Post_3_4_9_4 , XRES , T_java_lang_Exception : S )
:


(EXPLIES
  (
    %LBLNEGvc_A2_f_3_4% 
    (
      (refEQ
        (elems_pre, elems)
        )
      AND
      (refEQ
        (elems, asElems
          (elems)
          )
        )
      AND
      (lockLT
        (eClosedTime
          (elems)
          , alloc)
        )
      AND
      (refEQ
        (LS, asLockSet
          (LS)
          )
        )
      AND
      (refEQ
        (alloc_pre, alloc)
        )
      AND
      (refEQ
        (state_pre, state)
        )
      )
    IMPLIES
    (
      (
        (is
          (x_6_28, T_int)
          )
        AND
        (is
          (y_6_34, T_int)
          )
        AND
        (%LBLNEGPre_0_3_8% 
          (>=
            (x_6_28, 0)
            )
          AND
          (>=
            (y_6_34, 0)
            )
          )
        AND
        (
          (FORALL 
            (brokenObj : S)
            : 
            refEQ
            (java_lang_Throwable__stackTrace
              (state, brokenObj)
              , getStackTrace__state
              (state, brokenObj)
              )
            )
          )
        AND
        (
          (FORALL 
            (brokenObj_1_ : S)
            : 
            refEQ
            (java_lang_Throwable__stackTrace
              (state, brokenObj_1_)
              , getStackTrace__state
              (state, brokenObj_1_)
              )
            )
          )
        AND
        (refEQ
          (RES, +
            (x_6_28, y_6_34)
            )
          )
        AND
        (%LBLPOStrace_Return_0_8_1% 
          true )
        AND
        (
          (FORALL 
            (brokenObj : S)
            : 
            refEQ
            (java_lang_Throwable__stackTrace
              (state, brokenObj)
              , getStackTrace__state
              (state, brokenObj)
              )
            )
          )
        AND
        (
          (FORALL 
            (brokenObj_1_ : S)
            : 
            refEQ
            (java_lang_Throwable__stackTrace
              (state, brokenObj_1_)
              , getStackTrace__state
              (state, brokenObj_1_)
              )
            )
          )
        AND
        (
          (
            (%LBLNEGException_9_4% 
              refEQ
              (ecReturn, ecReturn)
              )
            )
          OR
          (
            (%LBLNEGException_9_4% 
              refEQ
              (ecReturn, ecReturn)
              )
            AND
            (
              (
                (%LBLNEGPost_4_9_9_4% 
                  (
                    (refEQ
                      (ecReturn, ecReturn)
                      )
                    AND
                    (>=
                      (x_6_28, 0)
                      )
                    AND
                    (>=
                      (y_6_34, 0)
                      )
                    )
                  IMPLIES
                  (>=
                    (RES, 0)
                    )
                  )
                )
              OR
              (
                (%LBLNEGPost_3_4_9_4% 
                  (
                    (refEQ
                      (ecReturn, ecThrow)
                      )
                    AND
                    (<=
                      (typeof
                        (XRES)
                        , T_java_lang_Exception)
                      )
                    )
                  IMPLIES
                  (
                    (
                      (>=
                        (x_6_28, 0)
                        )
                      AND
                      (>=
                        (y_6_34, 0)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    ,true)
  )


END escjava_logic

