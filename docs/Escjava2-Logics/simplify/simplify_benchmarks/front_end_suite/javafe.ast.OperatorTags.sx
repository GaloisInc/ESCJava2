(PROMPT_OFF)
;----------------------------------------------------------------------
; "Universal", or class-independent part, of the background predicate

; === ESCJ 8: Section 0.4
    
(BG_PUSH (FORALL (m i x) (EQ (select (store m i x) i) x)))

(BG_PUSH (FORALL (m i j x) 
		 (IMPLIES (NEQ i j)
			  (EQ (select (store m i x) j)
			      (select m j)))))

; === ESCJ 8: Section 1.1

(DEFPRED (<: t0 t1))

; <: reflexive
(BG_PUSH 
  (FORALL (t)
    (PATS (<: t t))
    (<: t t)))

; a special case, for which the above may not fire

(BG_PUSH (<: |T_java.lang.Object| |T_java.lang.Object|))

; <: transitive	
(BG_PUSH 
  (FORALL (t0 t1 t2)
    (PATS (MPAT (<: t0 t1) (<: t1 t2)))
    (IMPLIES (AND (<: t0 t1) (<: t1 t2))
      (<: t0 t2))))

;anti-symmetry
(BG_PUSH
 (FORALL
  (t0 t1)
  (PATS (MPAT (<: t0 t1) (<: t1 t0)))
  (IMPLIES (AND (<: t0 t1) (<: t1 t0)) (EQ t0 t1))))

; primitive types are final

(BG_PUSH (FORALL (t) (PATS (<: t |T_boolean|))
	(IMPLIES (<: t |T_boolean|) (EQ t |T_boolean|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_char|))
	(IMPLIES (<: t |T_char|) (EQ t |T_char|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_byte|))
	(IMPLIES (<: t |T_byte|) (EQ t |T_byte|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_short|))
	(IMPLIES (<: t |T_short|) (EQ t |T_short|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_int|))
	(IMPLIES (<: t |T_int|) (EQ t |T_int|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_long|))
	(IMPLIES (<: t |T_long|) (EQ t |T_long|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_float|))
	(IMPLIES (<: t |T_float|) (EQ t |T_float|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_double|))
	(IMPLIES (<: t |T_double|) (EQ t |T_double|))))

; (New as of 12 Dec 2000)
; primitive types have no proper supertypes

(BG_PUSH (FORALL (t) (PATS (<: |T_boolean| t))
	(IMPLIES (<: |T_boolean| t) (EQ t |T_boolean|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_char| t))
	(IMPLIES (<: |T_char| t) (EQ t |T_char|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_byte| t))
	(IMPLIES (<: |T_byte| t) (EQ t |T_byte|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_short| t))
	(IMPLIES (<: |T_short| t) (EQ t |T_short|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_int| t))
	(IMPLIES (<: |T_int| t) (EQ t |T_int|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_long| t))
	(IMPLIES (<: |T_long| t) (EQ t |T_long|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_float| t))
	(IMPLIES (<: |T_float| t) (EQ t |T_float|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_double| t))
	(IMPLIES (<: |T_double| t) (EQ t |T_double|))))

; === ESCJ 8: Section 1.2

(BG_PUSH
  (FORALL (t0 t1 t2)
    (PATS (<: t0 (asChild t1 t2)))
    (IMPLIES
      (<: t0 (asChild t1 t2))
      (EQ (classDown t2 t0) (asChild t1 t2)))))

; === ESCJ 8: Section 1.3
    
; new

(BG_PUSH 
  (<: |T_java.lang.Cloneable| |T_java.lang.Object|))

(BG_PUSH
  (FORALL (t)
    (PATS (array t))
    (<: (array t) |T_java.lang.Cloneable|)))
    
(BG_PUSH
  (FORALL (t)
    (PATS (elemtype (array t)))
    (EQ (elemtype (array t)) t)))

(BG_PUSH
  (FORALL (t0 t1) 
    (PATS (<: t0 (array t1)))
    (IFF (<: t0 (array t1))
      (AND
	(EQ t0 (array (elemtype t0)))
	(<: (elemtype t0) t1)))))

; === ESCJ 8: Section 2.1

(DEFPRED (is x t))

(BG_PUSH
 (FORALL (x t)
	 (PATS (cast x t))
	 (is (cast x t) t)))
     
(BG_PUSH
 (FORALL (x t)
	 (PATS (cast x t))
	 (IMPLIES (is x t) (EQ (cast x t) x))))
     
; === ESCJ 8: Section 2.2

(BG_PUSH (DISTINCT |bool$false| |@true|))

; === ESCJ 8: Section 2.2.1

(BG_PUSH (FORALL (x) 
	   (PATS (is x |T_char|)) 
	   (IFF (is x |T_char|) (AND (<= 0 x) (<= x 65535)))))
(BG_PUSH (FORALL (x)
	   (PATS (is x |T_byte|))
	   (IFF (is x |T_byte|) (AND (<= -128 x) (<= x 127)))))
(BG_PUSH (FORALL (x) 
	   (PATS (is x |T_short|))
	   (IFF (is x |T_short|) (AND (<= -32768 x) (<= x 32767)))))
(BG_PUSH (FORALL (x) 
	   (PATS (is x |T_int|))
	   (IFF (is x |T_int|) (AND (<= intFirst x) (<= x intLast)))))
(BG_PUSH (FORALL (x) 
	   (PATS (is x |T_long|))
	   (IFF (is x |T_long|) (AND (<= longFirst x) (<= x longLast)))))

(BG_PUSH (< longFirst intFirst))
(BG_PUSH (< intFirst -1000000))
(BG_PUSH (< 1000000 intLast))
(BG_PUSH (< intLast longLast))

; === ESCJ 8: Section 2.3
      
(BG_PUSH
 (FORALL (x t)
	 (PATS (MPAT (<: t |T_java.lang.Object|) (is x t)))
	 (IMPLIES (<: t |T_java.lang.Object|)
		  (IFF (is x t)
		       (OR (EQ x null) (<: (typeof x) t))))))

; === ESCJ 8: Section 2.4

(BG_PUSH
 (FORALL (f t x) (PATS (select (asField f t) x))
	 (is (select (asField f t) x) t)))

; === ESCJ 8: Section 2.5

(BG_PUSH
 (FORALL (e a i) (PATS (select (select (asElems e) a) i))
	 (is (select (select (asElems e) a) i)
	     (elemtype (typeof a)))))

; === ESCJ 8: Section 3.0

(DEFPRED (isAllocated x a0) (< (vAllocTime x) a0))

; === ESCJ 8: Section 3.1

(BG_PUSH
 (FORALL (x f a0) (PATS (isAllocated (select f x) a0))
	 (IMPLIES (AND (< (fClosedTime f) a0)
		       (isAllocated x a0))
		  (isAllocated (select f x) a0))))

; === ESCJ 8: Section 3.2

(BG_PUSH
 (FORALL (a e i a0) (PATS (isAllocated (select (select e a) i) a0))
	 (IMPLIES (AND (< (eClosedTime e) a0)
		       (isAllocated a a0))
		  (isAllocated (select (select e a) i) a0))))
 
; === ESCJ 8: Section 4 

; max(lockset) is in lockset

(BG_PUSH
 (FORALL (S)
  (PATS (select (asLockSet S) (max (asLockSet S))))
  (EQ
   (select (asLockSet S) (max (asLockSet S)))
   |@true|)))

; null is in lockset (not in ESCJ 8)

(BG_PUSH
 (FORALL (S)
  (PATS (asLockSet S))
  (EQ (select (asLockSet S) null) |@true|)))

(DEFPRED (lockLE x y) (<= x y))

(DEFPRED (lockLT x y) (< x y))

; all locks in lockset are below max(lockset) (not in ESCJ 8)

(BG_PUSH
 (FORALL (S mu)
  (IMPLIES
   (EQ (select (asLockSet S) mu) |@true|)
   (lockLE mu (max (asLockSet S))))))

; null precedes all objects in locking order (not in ESCJ 8)

(BG_PUSH
  (FORALL (x)
    (PATS (lockLE null x) (lockLT null x) (lockLE x null) (lockLT x null))
    (IMPLIES
      (<: (typeof x) |T_java.lang.Object|)
      (lockLE null x))))


; === ESCJ 8: Section 5.0

(BG_PUSH
 (FORALL (a) 
	 (PATS (arrayLength a))
	 (AND (<= 0 (arrayLength a))
	      (is (arrayLength a) |T_int|))))

(DEFPRED (arrayFresh a a0 b0 e s T v))

(BG_PUSH
  (FORALL (a a0 b0 e n s T v)
    (PATS (arrayFresh a a0 b0 e (arrayShapeMore n s) T v))
    (IFF
      (arrayFresh a a0 b0 e (arrayShapeMore n s) T v)
      (AND
	(<= a0 (vAllocTime a))
	(isAllocated a b0)
	(NEQ a null)
	(EQ (typeof a) T)
	(EQ (arrayLength a) n)
	(FORALL (i)
	  (PATS (select (select e a) i))
	  (AND
	    (arrayFresh (select (select e a) i) a0 b0 e s (elemtype T) v)
	    (EQ (arrayParent (select (select e a) i)) a)
	    (EQ (arrayPosition (select (select e a) i)) i)))))))

(BG_PUSH
  (FORALL (a a0 b0 e n T v)
    (PATS (arrayFresh a a0 b0 e (arrayShapeOne n) T v))
    (IFF
      (arrayFresh a a0 b0 e (arrayShapeOne n) T v)
      (AND
	(<= a0 (vAllocTime a))
	(isAllocated a b0)
	(NEQ a null)
	(EQ (typeof a) T)
	(EQ (arrayLength a) n)
	(FORALL (i)
	  (PATS (select (select e a) i))
	  (AND
	    (EQ (select (select e a) i) v)))))))


; === code to ensure that (isNewArray x) ==> x has no invariants


; arrayType is distinct from all types with invariants (due to the
; generated type-distinctness axiom)

(BG_PUSH
  (EQ arrayType (asChild arrayType |T_java.lang.Object|)))

(BG_PUSH
   (FORALL (t)
      (PATS (array t))
      (<: (array t) arrayType)))

(BG_PUSH
  (FORALL (s)
	  (PATS (isNewArray s))
	  (IMPLIES (EQ |@true| (isNewArray s))
		   (<: (typeof s) arrayType))))

; === ESCJ 8: Section 5.1

(BG_PUSH
 (FORALL (i j) (PATS (integralMod i j) (integralDiv i j))
	 (EQ (+ (* (integralDiv i j) j) (integralMod i j))
	     i)))

(BG_PUSH
 (FORALL (i j) (PATS (integralMod i j))
	 (IMPLIES (< 0 j)
		  (AND (<= 0 (integralMod i j))
		       (< (integralMod i j) j)))))

(BG_PUSH
 (FORALL (i j) (PATS (integralMod i j))
	 (IMPLIES (< j 0)
		  (AND (< j (integralMod i j))
		       (<= (integralMod i j) 0)))))

(BG_PUSH
 (FORALL (i j) 
	 (PATS (integralMod (+ i j) j))
	 (EQ (integralMod (+ i j) j) 
	     (integralMod i j))))

(BG_PUSH
 (FORALL (i j)
	 (PATS (integralMod (+ j i) j))
	 (EQ (integralMod (+ j i) j) 
	     (integralMod i j))))

; to prevent a matching loop
(BG_PUSH
 (FORALL (x y)
  (PATS (* (integralDiv (* x y) y) y))
  (EQ (* (integralDiv (* x y) y) y) (* x y))))


; === ESCJ 8: Section 5.2

(DEFPRED (boolAnd a b)
  (AND
    (EQ a |@true|) 
    (EQ b |@true|)))

(DEFPRED (boolEq a b)
  (IFF
    (EQ a |@true|)
    (EQ b |@true|)))

(DEFPRED (boolImplies a b)
  (IMPLIES
    (EQ a |@true|)
    (EQ b |@true|)))
    
(DEFPRED (boolNE a b)
  (NOT (IFF
	 (EQ a |@true|)
	 (EQ b |@true|))))

(DEFPRED (boolNot a)
  (NOT (EQ a |@true|)))

(DEFPRED (boolOr a b)
  (OR
    (EQ a |@true|)
    (EQ b |@true|)))

; Not in ESCJ8, but should be

(BG_PUSH
  (FORALL (x y)
    (PATS (integralEQ x y))
    (IFF
      (EQ (integralEQ x y) |@true|)
      (EQ x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (stringCat x y))
    (AND (NEQ (stringCat x y) null)
         (<: (typeof (stringCat x y)) |T_java.lang.String|))))

(BG_PUSH
  (FORALL (x y)
    (PATS (integralGE x y))
    (IFF
      (EQ (integralGE x y) |@true|)
      (>= x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (integralGT x y))
    (IFF
      (EQ (integralGT x y) |@true|)
      (> x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (integralLE x y))
    (IFF
      (EQ (integralLE x y) |@true|)
      (<= x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (integralLT x y))
    (IFF
      (EQ (integralLT x y) |@true|)
      (< x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (integralNE x y))
    (IFF
      (EQ (integralNE x y) |@true|)
      (NEQ x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (refEQ x y))
    (IFF
      (EQ (refEQ x y) |@true|)
      (EQ x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (refNE x y))
    (IFF
      (EQ (refNE x y) |@true|)
      (NEQ x y))))

; === ESCJ 8: Section 5.3

(BG_PUSH
 (FORALL (x y)
	 (PATS (termConditional |@true| x y))
	 (EQ (termConditional |@true| x y) x)))

(BG_PUSH
 (FORALL (b x y)
	 (PATS (termConditional b x y))
	 (IMPLIES (NEQ b |@true|)
		  (EQ (termConditional b x y) y))))

; === Implementation of nonnullelements; not in ESCJ 8 (yet?):

(DEFPRED (nonnullelements x e)
   (AND (NEQ x null)
	(FORALL (i)
	   (IMPLIES (AND (<= 0 i)
			 (< i (arrayLength x)))
		    (NEQ (select (select e x) i) null)))))


; === Axioms about classLiteral; not in ESCJ 8 (yet?):

(BG_PUSH
 (FORALL (t)
	 (PATS (classLiteral t))
	 (AND (NEQ (classLiteral t) null)
	      (is (classLiteral t) |T_java.lang.Class|)
              (isAllocated (classLiteral t) alloc))))


; === Axioms about properties of integral &, |, and /

(BG_PUSH
 (FORALL (x y)
  (PATS (integralAnd x y))
  (IMPLIES
   (OR (<= 0 x) (<= 0 y))
   (<= 0 (integralAnd x y)))))

(BG_PUSH
 (FORALL (x y)
  (PATS (integralAnd x y))
  (IMPLIES
   (<= 0 x)
   (<= (integralAnd x y) x))))

(BG_PUSH
 (FORALL (x y)
  (PATS (integralAnd x y))
  (IMPLIES
   (<= 0 y)
   (<= (integralAnd x y) y))))

(BG_PUSH
 (FORALL (x y)
  (PATS (integralOr x y))
  (IMPLIES
   (AND (<= 0 x) (<= 0 y))
   (AND (<= x (integralOr x y)) (<= y (integralOr x y))))))

(BG_PUSH
 (FORALL (x y)
  (PATS (integralDiv x y))
  (IMPLIES
   (AND (<= 0 x) (< 0 y))
   (AND (<= 0 (integralDiv x y)) (<= (integralDiv x y) x)))))

(BG_PUSH
 (FORALL (x y)
  (PATS (integralXor x y))
  (IMPLIES
   (AND (<= 0 x) (<= 0 y))
   (<= 0 (integralXor x y)))))

(BG_PUSH
 (FORALL (n)
  (PATS (intShiftL 1 n))
  (IMPLIES
   (AND (<= 0 n) (< n 31))
   (<= 1 (intShiftL 1 n)))))

(BG_PUSH
 (FORALL (n)
  (PATS (longShiftL 1 n))
  (IMPLIES
   (AND (<= 0 n) (< n 63))
   (<= 1 (longShiftL 1 n)))))

; === Temporary kludge to speed up distinguishing small integers:

(BG_PUSH
 (DISTINCT -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9
	   10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
	   30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
	   50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
	   70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89
	   90 91 92 93 94 95 96 97 98 99
	   100 101 102 103 104 105 106 107 108 109
	   110 111 112 113 114 115 116 117 118 119
	   120 121 122 123 124 125 126 127 128 129
	   130 131 132 133 134 135 136 137 138 139
	   140 141 142 143 144 145 146 147 148 149
	   150 151 152 153 154 155 156 157 158 159
	   160 161 162 163 164 165 166 167 168 169
	   170 171 172 173 174 175 176 177 178 179
	   180 181 182 183 184 185 186 187 188 189
	   190 191 192 193 194 195 196 197 198 199
	   200 201 202 203 204 205 206 207 208 209
	   210 211 212 213 214 215 216 217 218 219
	   220 221 222 223 224 225 226 227 228 229
	   230 231 232 233 234 235 236 237 238 239
	   240 241 242 243 244 245 246 247 248 249
	   250 251 252 253 254 255 256 257 258 259
	   260 261 262 263 264 265 266 267 268 269
	   270 271 272 273 274 275 276 277 278 279
	   280 281 282 283 284 285 286 287 288 289
	   290 291 292 293 294 295 296 297 298 299
	   300 301 302 303 304 305 306 307 308 309
	   310 311 312 313 314 315 316 317 318 319
	   320 321 322 323 324 325 326 327 328 329
	   330 331 332 333 334 335 336 337 338 339
	   340 341 342 343 344 345 346 347 348 349
	   350 351 352 353 354 355 356 357 358 359
	   360 361 362 363 364 365 366 367 368 369
	   370 371 372 373 374 375 376 377 378 379
	   380 381 382 383 384 385 386 387 388 389
	   390 391 392 393 394 395 396 397 398 399))

;----------------------------------------------------------------------
; End of Universal background predicate
;----------------------------------------------------------------------
(PROMPT_ON)


(BG_PUSH (AND 
(<: |T_java.io.Serializable| |T_java.lang.Object|)
(<: |T_java.lang.Comparable| |T_java.lang.Object|)
(<: |T_javafe.ast.GeneratedTags| |T_java.lang.Object|)
(<: |T_javafe.ast.OperatorTags| |T_java.lang.Object|)
(EQ |T_javafe.ast.OperatorTags| (asChild |T_javafe.ast.OperatorTags| |T_java.lang.Object|))
(<: |T_javafe.ast.OperatorTags| |T_javafe.ast.GeneratedTags|)
(<: |T_java.lang.String| |T_java.lang.Object|)
(EQ |T_java.lang.String| (asChild |T_java.lang.String| |T_java.lang.Object|))
(FORALL (t) (PATS (<: t |T_java.lang.String|)) (IFF (<: t |T_java.lang.String|) (EQ t |T_java.lang.String|)))
(<: |T_java.lang.String| |T_java.io.Serializable|)
(<: |T_java.lang.String| |T_java.lang.Comparable|)
(DISTINCT arrayType |T_boolean| |T_char| |T_byte| |T_short| |T_int| |T_long| |T_float| |T_double| |T_.TYPE| |T_java.io.Serializable| |T_java.lang.Object| |T_java.lang.Comparable| |T_javafe.ast.GeneratedTags| |T_javafe.ast.OperatorTags| |T_java.lang.String|)
(EQ |@true| (is |UNARYADD:54.26| T_int))
(EQ |UNARYADD:54.26| 85)
(EQ |@true| (is |AND:20.26| T_int))
(EQ |AND:20.26| 55)
(EQ |@true| (is |GT:27.26| T_int))
(EQ |GT:27.26| 62)
(EQ |@true| (is |URSHIFT:32.26| T_int))
(EQ |URSHIFT:32.26| 67)
(EQ |@true| (is |ASGADD:44.26| T_int))
(EQ |ASGADD:44.26| 77)
(EQ |@true| (is |ASGBITAND:49.26| T_int))
(EQ |ASGBITAND:49.26| 82)
(EQ |@true| (is |DEC:59.26| T_int))
(EQ |DEC:59.26| 90)
(EQ |@true| (is |NE:24.26| T_int))
(EQ |NE:24.26| 59)
(EQ |@true| (is |LT:29.26| T_int))
(EQ |LT:29.26| 64)
(EQ |@true| (is |STAR:37.26| T_int))
(EQ |STAR:37.26| 72)
(EQ |@true| (is |NOT:56.26| T_int))
(EQ |NOT:56.26| 87)
(EQ |@true| (is |BITOR:21.26| T_int))
(EQ |BITOR:21.26| 56)
(EQ |@true| (is |ASGMUL:41.26| T_int))
(EQ |ASGMUL:41.26| 74)
(EQ |@true| (is |SUB:34.26| T_int))
(EQ |SUB:34.26| 69)
(EQ |@true| (is |ASGLSHIFT:46.26| T_int))
(EQ |ASGLSHIFT:46.26| 79)
(EQ |@true| (is |ASGBITXOR:51.26| T_int))
(EQ |ASGBITXOR:51.26| 84)
(EQ |@true| (is |POSTFIXDEC:63.26| T_int))
(EQ |POSTFIXDEC:63.26| 92)
(EQ |@true| (is |OR:19.26| T_int))
(EQ |OR:19.26| 54)
(EQ |@true| (is |GE:26.26| T_int))
(EQ |GE:26.26| 61)
(EQ |@true| (is |opStrings:93.32| (array |T_java.lang.String|)))
(NEQ |opStrings:93.32| null)
(EQ (typeof |opStrings:93.32|) (array |T_java.lang.String|))
(EQ (arrayLength |opStrings:93.32|) 39)
(EQ |@true| (is |RSHIFT:31.26| T_int))
(EQ |RSHIFT:31.26| 66)
(EQ |@true| (is |INC:58.26| T_int))
(EQ |INC:58.26| 89)
(EQ |@true| (is |BITAND:23.26| T_int))
(EQ |BITAND:23.26| 58)
(EQ |@true| (is |ASGREM:43.26| T_int))
(EQ |ASGREM:43.26| 76)
(EQ |@true| (is |LAST_TAG:4.68.7| T_int))
(EQ |LAST_TAG:4.68.7| 53)
(EQ |@true| (is |LE:28.26| T_int))
(EQ |LE:28.26| 63)
(EQ |@true| (is |ASGURSHIFT:48.26| T_int))
(EQ |ASGURSHIFT:48.26| 81)
(EQ |@true| (is |MOD:36.26| T_int))
(EQ |MOD:36.26| 71)
(EQ |@true| (is |ASSIGN:40.26| T_int))
(EQ |ASSIGN:40.26| 73)
(EQ |@true| (is |UNARYSUB:55.26| T_int))
(EQ |UNARYSUB:55.26| 86)
(EQ |@true| (is |FIRST_TAG:18.26| T_int))
(EQ |FIRST_TAG:18.26| 54)
(EQ |@true| (is |ADD:33.26| T_int))
(EQ |ADD:33.26| 68)
(EQ |@true| (is |ASGSUB:45.26| T_int))
(EQ |ASGSUB:45.26| 78)
(EQ |@true| (is |LAST_TAG:65.26| T_int))
(EQ |LAST_TAG:65.26| 92)
(EQ |@true| (is |ASGBITOR:50.26| T_int))
(EQ |ASGBITOR:50.26| 83)
(EQ |@true| (is |POSTFIXINC:62.26| T_int))
(EQ |POSTFIXINC:62.26| 91)
(EQ |@true| (is |EQ:25.26| T_int))
(EQ |EQ:25.26| 60)
(EQ |@true| (is |LSHIFT:30.26| T_int))
(EQ |LSHIFT:30.26| 65)
(EQ |@true| (is |BITNOT:57.26| T_int))
(EQ |BITNOT:57.26| 88)
(EQ |@true| (is |BITXOR:22.26| T_int))
(EQ |BITXOR:22.26| 57)
(EQ |@true| (is |ASGDIV:42.26| T_int))
(EQ |ASGDIV:42.26| 75)
(EQ |@true| (is |DIV:35.26| T_int))
(EQ |DIV:35.26| 70)
(EQ |@true| (is |ASGRSHIFT:47.26| T_int))
(EQ |ASGRSHIFT:47.26| 80)))


(EXPLIES 
(LBLNEG |vc.javafe.ast.OperatorTags.toString.71.2| (IMPLIES (AND (EQ |UNARYADD@pre:54.26| |UNARYADD:54.26|) (EQ |@true| (is |UNARYADD:54.26| T_int)) (EQ |AND@pre:20.26| |AND:20.26|) (EQ |@true| (is |AND:20.26| T_int)) (EQ |GT@pre:27.26| |GT:27.26|) (EQ |@true| (is |GT:27.26| T_int)) (EQ |URSHIFT@pre:32.26| |URSHIFT:32.26|) (EQ |@true| (is |URSHIFT:32.26| T_int)) (EQ |ASGADD@pre:44.26| |ASGADD:44.26|) (EQ |@true| (is |ASGADD:44.26| T_int)) (EQ |ASGBITAND@pre:49.26| |ASGBITAND:49.26|) (EQ |@true| (is |ASGBITAND:49.26| T_int)) (EQ |DEC@pre:59.26| |DEC:59.26|) (EQ |@true| (is |DEC:59.26| T_int)) (EQ |NE@pre:24.26| |NE:24.26|) (EQ |@true| (is |NE:24.26| T_int)) (EQ |LT@pre:29.26| |LT:29.26|) (EQ |@true| (is |LT:29.26| T_int)) (EQ |STAR@pre:37.26| |STAR:37.26|) (EQ |@true| (is |STAR:37.26| T_int)) (EQ |NOT@pre:56.26| |NOT:56.26|) (EQ |@true| (is |NOT:56.26| T_int)) (EQ |BITOR@pre:21.26| |BITOR:21.26|) (EQ |@true| (is |BITOR:21.26| T_int)) (EQ |ASGMUL@pre:41.26| |ASGMUL:41.26|) (EQ |@true| (is |ASGMUL:41.26| T_int)) (EQ |SUB@pre:34.26| |SUB:34.26|) (EQ |@true| (is |SUB:34.26| T_int)) (EQ |ASGLSHIFT@pre:46.26| |ASGLSHIFT:46.26|) (EQ |@true| (is |ASGLSHIFT:46.26| T_int)) (EQ |ASGBITXOR@pre:51.26| |ASGBITXOR:51.26|) (EQ |@true| (is |ASGBITXOR:51.26| T_int)) (EQ |POSTFIXDEC@pre:63.26| |POSTFIXDEC:63.26|) (EQ |@true| (is |POSTFIXDEC:63.26| T_int)) (EQ |OR@pre:19.26| |OR:19.26|) (EQ |@true| (is |OR:19.26| T_int)) (EQ |GE@pre:26.26| |GE:26.26|) (EQ |@true| (is |GE:26.26| T_int)) (EQ |opStrings@pre:93.32| |opStrings:93.32|) (EQ |@true| (is |opStrings:93.32| (array |T_java.lang.String|))) (EQ |@true| (isAllocated |opStrings:93.32| alloc)) (EQ |RSHIFT@pre:31.26| |RSHIFT:31.26|) (EQ |@true| (is |RSHIFT:31.26| T_int)) (EQ |INC@pre:58.26| |INC:58.26|) (EQ |@true| (is |INC:58.26| T_int)) (EQ |BITAND@pre:23.26| |BITAND:23.26|) (EQ |@true| (is |BITAND:23.26| T_int)) (EQ |ASGREM@pre:43.26| |ASGREM:43.26|) (EQ |@true| (is |ASGREM:43.26| T_int)) (EQ |LAST_TAG@pre:4.68.7| |LAST_TAG:4.68.7|) (EQ |@true| (is |LAST_TAG:4.68.7| T_int)) (EQ |LE@pre:28.26| |LE:28.26|) (EQ |@true| (is |LE:28.26| T_int)) (EQ |ASGURSHIFT@pre:48.26| |ASGURSHIFT:48.26|) (EQ |@true| (is |ASGURSHIFT:48.26| T_int)) (EQ |MOD@pre:36.26| |MOD:36.26|) (EQ |@true| (is |MOD:36.26| T_int)) (EQ |ASSIGN@pre:40.26| |ASSIGN:40.26|) (EQ |@true| (is |ASSIGN:40.26| T_int)) (EQ |UNARYSUB@pre:55.26| |UNARYSUB:55.26|) (EQ |@true| (is |UNARYSUB:55.26| T_int)) (EQ |FIRST_TAG@pre:18.26| |FIRST_TAG:18.26|) (EQ |@true| (is |FIRST_TAG:18.26| T_int)) (EQ |ADD@pre:33.26| |ADD:33.26|) (EQ |@true| (is |ADD:33.26| T_int)) (EQ |ASGSUB@pre:45.26| |ASGSUB:45.26|) (EQ |@true| (is |ASGSUB:45.26| T_int)) (EQ |LAST_TAG@pre:65.26| |LAST_TAG:65.26|) (EQ |@true| (is |LAST_TAG:65.26| T_int)) (EQ |ASGBITOR@pre:50.26| |ASGBITOR:50.26|) (EQ |@true| (is |ASGBITOR:50.26| T_int)) (EQ |POSTFIXINC@pre:62.26| |POSTFIXINC:62.26|) (EQ |@true| (is |POSTFIXINC:62.26| T_int)) (EQ |EQ@pre:25.26| |EQ:25.26|) (EQ |@true| (is |EQ:25.26| T_int)) (EQ |LSHIFT@pre:30.26| |LSHIFT:30.26|) (EQ |@true| (is |LSHIFT:30.26| T_int)) (EQ |BITNOT@pre:57.26| |BITNOT:57.26|) (EQ |@true| (is |BITNOT:57.26| T_int)) (EQ |BITXOR@pre:22.26| |BITXOR:22.26|) (EQ |@true| (is |BITXOR:22.26| T_int)) (EQ |ASGDIV@pre:42.26| |ASGDIV:42.26|) (EQ |@true| (is |ASGDIV:42.26| T_int)) (EQ |DIV@pre:35.26| |DIV:35.26|) (EQ |@true| (is |DIV:35.26| T_int)) (EQ |ASGRSHIFT@pre:47.26| |ASGRSHIFT:47.26|) (EQ |@true| (is |ASGRSHIFT:47.26| T_int)) (EQ |elems@pre| elems) (EQ elems (asElems elems)) (< (eClosedTime elems) alloc) (EQ LS (asLockSet LS)) (EQ |alloc@pre| alloc)) (NOT (AND (EQ |@true| (is |opTag:72.36| T_int)) (FORALL (|i:90.29|) (IMPLIES (AND (<= 0 |i:90.29|) (< |i:90.29| (arrayLength |opStrings:93.32|))) (NEQ (select (select elems |opStrings:93.32|) |i:90.29|) null))) (NEQ |opStrings:93.32| null) (OR (AND (OR (AND (<= |FIRST_TAG:18.26| |opTag:72.36|) (EQ |tmp0!cand:73.9| (integralLE |opTag:72.36| |LAST_TAG:65.26|)) (EQ |tmp0!cand:73.28| |tmp0!cand:73.9|)) (AND (NOT (<= |FIRST_TAG:18.26| |opTag:72.36|)) (LBLPOS |trace.FirstOpOnly^0,73.28| (EQ |@true| |@true|)) (EQ |tmp0!cand:73.28| |bool$false|))) (EQ |@true| |tmp0!cand:73.28|) (LBLPOS |trace.Then^1,74.7| (EQ |@true| |@true|)) (OR (NOT (LBLNEG |Null@74.23| (NEQ |opStrings:93.32| null))) (AND (LBLNEG |Null@74.23| (NEQ |opStrings:93.32| null)) (OR (NOT (LBLNEG |IndexNegative@74.23| (<= 0 (- |opTag:72.36| |FIRST_TAG:18.26|)))) (AND (LBLNEG |IndexNegative@74.23| (<= 0 (- |opTag:72.36| |FIRST_TAG:18.26|))) (NOT (LBLNEG |IndexTooBig@74.23| (< (- |opTag:72.36| |FIRST_TAG:18.26|) (arrayLength |opStrings:93.32|))))))))) (AND (OR (AND (<= |FIRST_TAG:18.26| |opTag:72.36|) (EQ |tmp0!cand:73.9| (integralLE |opTag:72.36| |LAST_TAG:65.26|)) (EQ |tmp0!cand:73.28| |tmp0!cand:73.9|)) (AND (NOT (<= |FIRST_TAG:18.26| |opTag:72.36|)) (LBLPOS |trace.FirstOpOnly^0,73.28| (EQ |@true| |@true|)) (EQ |tmp0!cand:73.28| |bool$false|))) (OR (AND (EQ |@true| |tmp0!cand:73.28|) (LBLPOS |trace.Then^1,74.7| (EQ |@true| |@true|)) (LBLNEG |Null@74.23| (NEQ |opStrings:93.32| null)) (LBLNEG |IndexNegative@74.23| (<= 0 (- |opTag:72.36| |FIRST_TAG:18.26|))) (LBLNEG |IndexTooBig@74.23| (< (- |opTag:72.36| |FIRST_TAG:18.26|) (arrayLength |opStrings:93.32|))) (EQ RES (select (select elems |opStrings:93.32|) (- |opTag:72.36| |FIRST_TAG:18.26|))) (LBLPOS |trace.Return^2,74.7| (EQ |@true| |@true|)) (EQ |RES<1>| RES)) (AND (NOT (EQ |@true| |tmp0!cand:73.28|)) (LBLPOS |trace.Else^3,73.5| (EQ |@true| |@true|)) (OR (AND (< |opTag:72.36| |FIRST_TAG:18.26|) (LBLPOS |trace.Then^4,77.7| (EQ |@true| |@true|)) (EQ |RES<2>| (stringCat (stringCat |S_77.14| |opTag:72.36|) |S_77.65|)) (LBLPOS |trace.Return^5,77.7| (EQ |@true| |@true|)) (EQ |RES<1>| |RES<2>|)) (AND (NOT (< |opTag:72.36| |FIRST_TAG:18.26|)) (LBLPOS |trace.Else^6,76.5| (EQ |@true| |@true|)) (EQ |RES<3>| (stringCat (stringCat |S_79.12| |opTag:72.36|) |S_79.38|)) (LBLPOS |trace.Return^7,79.5| (EQ |@true| |@true|)) (EQ |RES<1>| |RES<3>|))))) (OR (NOT (LBLNEG |Exception@80.2| (EQ |ecReturn| |ecReturn|))) (AND (LBLNEG |Exception@80.2| (EQ |ecReturn| |ecReturn|)) (NOT (LBLNEG |Post:71.6@80.2| (IMPLIES (EQ |ecReturn| |ecReturn|) (NEQ |RES<1>| null)))))))))))) (AND 
(DISTINCT |ecReturn|) (NEQ |S_77.65| null) (EQ (typeof |S_77.65|) |T_java.lang.String|) (NEQ |S_79.12| null) (EQ (typeof |S_79.12|) |T_java.lang.String|) (NEQ |S_77.14| null) (EQ (typeof |S_77.14|) |T_java.lang.String|) (NEQ |S_79.38| null) (EQ (typeof |S_79.38|) |T_java.lang.String|)))

(EXPLIES 
(LBLNEG |vc.javafe.ast.OperatorTags.<constructor>.16.0| (IMPLIES (AND (EQ |UNARYADD@pre:54.26| |UNARYADD:54.26|) (EQ |@true| (is |UNARYADD:54.26| T_int)) (EQ |AND@pre:20.26| |AND:20.26|) (EQ |@true| (is |AND:20.26| T_int)) (EQ |GT@pre:27.26| |GT:27.26|) (EQ |@true| (is |GT:27.26| T_int)) (EQ |URSHIFT@pre:32.26| |URSHIFT:32.26|) (EQ |@true| (is |URSHIFT:32.26| T_int)) (EQ |ASGADD@pre:44.26| |ASGADD:44.26|) (EQ |@true| (is |ASGADD:44.26| T_int)) (EQ |ASGBITAND@pre:49.26| |ASGBITAND:49.26|) (EQ |@true| (is |ASGBITAND:49.26| T_int)) (EQ |DEC@pre:59.26| |DEC:59.26|) (EQ |@true| (is |DEC:59.26| T_int)) (EQ |NE@pre:24.26| |NE:24.26|) (EQ |@true| (is |NE:24.26| T_int)) (EQ |LT@pre:29.26| |LT:29.26|) (EQ |@true| (is |LT:29.26| T_int)) (EQ |STAR@pre:37.26| |STAR:37.26|) (EQ |@true| (is |STAR:37.26| T_int)) (EQ |NOT@pre:56.26| |NOT:56.26|) (EQ |@true| (is |NOT:56.26| T_int)) (EQ |BITOR@pre:21.26| |BITOR:21.26|) (EQ |@true| (is |BITOR:21.26| T_int)) (EQ |ASGMUL@pre:41.26| |ASGMUL:41.26|) (EQ |@true| (is |ASGMUL:41.26| T_int)) (EQ |SUB@pre:34.26| |SUB:34.26|) (EQ |@true| (is |SUB:34.26| T_int)) (EQ |ASGLSHIFT@pre:46.26| |ASGLSHIFT:46.26|) (EQ |@true| (is |ASGLSHIFT:46.26| T_int)) (EQ |ASGBITXOR@pre:51.26| |ASGBITXOR:51.26|) (EQ |@true| (is |ASGBITXOR:51.26| T_int)) (EQ |POSTFIXDEC@pre:63.26| |POSTFIXDEC:63.26|) (EQ |@true| (is |POSTFIXDEC:63.26| T_int)) (EQ |OR@pre:19.26| |OR:19.26|) (EQ |@true| (is |OR:19.26| T_int)) (EQ |GE@pre:26.26| |GE:26.26|) (EQ |@true| (is |GE:26.26| T_int)) (EQ |opStrings@pre:93.32| |opStrings:93.32|) (EQ |@true| (is |opStrings:93.32| (array |T_java.lang.String|))) (EQ |@true| (isAllocated |opStrings:93.32| alloc)) (EQ |RSHIFT@pre:31.26| |RSHIFT:31.26|) (EQ |@true| (is |RSHIFT:31.26| T_int)) (EQ |INC@pre:58.26| |INC:58.26|) (EQ |@true| (is |INC:58.26| T_int)) (EQ |BITAND@pre:23.26| |BITAND:23.26|) (EQ |@true| (is |BITAND:23.26| T_int)) (EQ |ASGREM@pre:43.26| |ASGREM:43.26|) (EQ |@true| (is |ASGREM:43.26| T_int)) (EQ |LAST_TAG@pre:4.68.7| |LAST_TAG:4.68.7|) (EQ |@true| (is |LAST_TAG:4.68.7| T_int)) (EQ |LE@pre:28.26| |LE:28.26|) (EQ |@true| (is |LE:28.26| T_int)) (EQ |ASGURSHIFT@pre:48.26| |ASGURSHIFT:48.26|) (EQ |@true| (is |ASGURSHIFT:48.26| T_int)) (EQ |MOD@pre:36.26| |MOD:36.26|) (EQ |@true| (is |MOD:36.26| T_int)) (EQ |ASSIGN@pre:40.26| |ASSIGN:40.26|) (EQ |@true| (is |ASSIGN:40.26| T_int)) (EQ |UNARYSUB@pre:55.26| |UNARYSUB:55.26|) (EQ |@true| (is |UNARYSUB:55.26| T_int)) (EQ |FIRST_TAG@pre:18.26| |FIRST_TAG:18.26|) (EQ |@true| (is |FIRST_TAG:18.26| T_int)) (EQ |ADD@pre:33.26| |ADD:33.26|) (EQ |@true| (is |ADD:33.26| T_int)) (EQ |ASGSUB@pre:45.26| |ASGSUB:45.26|) (EQ |@true| (is |ASGSUB:45.26| T_int)) (EQ |LAST_TAG@pre:65.26| |LAST_TAG:65.26|) (EQ |@true| (is |LAST_TAG:65.26| T_int)) (EQ |ASGBITOR@pre:50.26| |ASGBITOR:50.26|) (EQ |@true| (is |ASGBITOR:50.26| T_int)) (EQ |POSTFIXINC@pre:62.26| |POSTFIXINC:62.26|) (EQ |@true| (is |POSTFIXINC:62.26| T_int)) (EQ |EQ@pre:25.26| |EQ:25.26|) (EQ |@true| (is |EQ:25.26| T_int)) (EQ |LSHIFT@pre:30.26| |LSHIFT:30.26|) (EQ |@true| (is |LSHIFT:30.26| T_int)) (EQ |BITNOT@pre:57.26| |BITNOT:57.26|) (EQ |@true| (is |BITNOT:57.26| T_int)) (EQ |BITXOR@pre:22.26| |BITXOR:22.26|) (EQ |@true| (is |BITXOR:22.26| T_int)) (EQ |ASGDIV@pre:42.26| |ASGDIV:42.26|) (EQ |@true| (is |ASGDIV:42.26| T_int)) (EQ |DIV@pre:35.26| |DIV:35.26|) (EQ |@true| (is |DIV:35.26| T_int)) (EQ |ASGRSHIFT@pre:47.26| |ASGRSHIFT:47.26|) (EQ |@true| (is |ASGRSHIFT:47.26| T_int)) (EQ |elems@pre| elems) (EQ elems (asElems elems)) (< (eClosedTime elems) alloc) (EQ LS (asLockSet LS)) (EQ |alloc@pre| alloc)) (NOT (AND (FORALL (|i:90.29|) (IMPLIES (AND (<= 0 |i:90.29|) (< |i:90.29| (arrayLength |opStrings:93.32|))) (NEQ (select (select elems |opStrings:93.32|) |i:90.29|) null))) (NEQ |opStrings:93.32| null) (NOT (EQ |@true| (isAllocated objectToBeConstructed alloc))) (< alloc |after@16.0-16.0|) (NEQ |RES-16.0:16.0| null) (NOT (EQ |@true| (isAllocated |RES-16.0:16.0| alloc))) (EQ |@true| (is |RES-16.0:16.0| |T_java.lang.Object|)) (EQ |@true| (isAllocated |RES-16.0:16.0| |after@16.0-16.0|)) (EQ |EC-16.0:16.0| |ecReturn|) (EQ (select |owner:5.35.28| |RES-16.0:16.0|) null) (<: (typeof |RES-16.0:16.0|) |T_javafe.ast.OperatorTags|) (EQ objectToBeConstructed |RES-16.0:16.0|) (OR (NOT (LBLNEG |Exception@16.0| (EQ |ecReturn| |ecReturn|))) (AND (LBLNEG |Exception@16.0| (EQ |ecReturn| |ecReturn|)) (NOT (LBLNEG |OwnerNull@16.0| (EQ (select |owner:5.35.28| |RES-16.0:16.0|) null))))))))) (AND 
(DISTINCT |ecReturn|)))
(BG_POP)
