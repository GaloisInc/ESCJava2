/*
 * JML/ESC/Java2 specs for the Java Card API 2.2.1
 * by Wojciech Mostowski, woj@cs.ru.nl
 * Copyright (C) 2006 Radboud University Nijmegen, the Netherlands 
 *
 * The Java Card API 2.2.1 itself is Copyright (c) 2000 Sun Microsystems, Inc.
 *
 * These specs are based on Erik Poll's and Engelbert Hubbers' specs
 * for Java Card API 2.1.1, see
 * http://www.sos.cs.ru.nl/research/escjava/esc2jcapi.html
 *
 * $Id: Util.jml,v 1.4 2006/05/24 15:38:12 woj Exp $
 *
 */

package javacard.framework;

public class Util  { 

    // It might be a good idea to allow ArrayIndexOutOfBoundsException 
    // and NullPointerException for arrayCopy*, arrayFill*, and arrayCompare
    // methods

    /*@ public normal_behavior
          requires length >= 0;
	  requires src != null;
	  requires srcOff >= 0 && srcOff + length <= src.length;
	  requires dest != null;
	  requires destOff >= 0 && destOff + length <= dest.length;
	  ensures (\forall short i; i>=0 && i<=length; 
	     dest[destOff + i] == \old(src[srcOff + i]));
	  assignable dest[destOff..destOff+length-1];
    @*/
    public static short arrayCopy(byte[] src, short  srcOff,
                                  byte[] dest, short  destOff, short  length) throws TransactionException;

    /*@ public normal_behavior
          requires length >= 0;
	  requires src != null;
	  requires srcOff >= 0 && srcOff + length <= src.length;
	  requires dest != null;
	  requires destOff >= 0 && destOff + length <= dest.length;
	  ensures (\forall short i; i>=0 && i<=length; 
	     dest[destOff + i] == \old(src[srcOff + i]));
	  assignable dest[destOff..destOff+length-1];
    @*/
    public static short arrayCopyNonAtomic(byte[] src, short  srcOff,
                                  byte[] dest, short  destOff, short  length) throws TransactionException;


    /*@ public normal_behavior
          requires bLen >= 0;
	  requires bArray != null;
	  requires bOff >= 0 && bOff + bLen <= bArray.length;
	  ensures (\forall int i; i>=0 && i < bLen;
	            bArray[bOff + i] == bValue);
	  assignable bArray[bOff..bOff+bLen-1];
    @*/
    public static short arrayFillNonAtomic(byte[] bArray, short  bOff,
                                              	 short  bLen, byte   bValue);

    /*@ public normal_behavior
          requires src != null;
	  requires dest != null;
	  requires srcOff >= 0 ;
	  requires destOff >= 0 ;
	  requires length >=0;
	  requires srcOff+length <= src.length;
	  requires destOff+length <= dest.length;
          ensures  (\result == 0 || \result == 1 || \result == -1) ;
	  assignable \nothing;
    @*/
    public static /*@pure@*/ byte arrayCompare(byte[] src, short  srcOff,
                                      	  byte[] dest, short  destOff,
                                       	  short  length);

    /*@ public normal_behavior 
          requires true;
	  ensures (byte)((\result & 0xff00) >> 8) == b1;
	  ensures (byte)(\result & 0xff)== b2;
	  assignable \nothing;
    @*/
    public static /*@pure@*/ short makeShort( byte b1, byte b2 );

    /*@ public normal_behavior 
          requires bArray != null;
	  requires bOff >= 0 && bOff + 1 < bArray.length;
	  ensures \result == makeShort(bArray[bOff], bArray[bOff+1]);
	  assignable \nothing;
    @*/
    public static short getShort( byte[] bArray, short bOff);

    /*@ public normal_behavior 
          requires bArray != null;
	  requires bOff >= 0 && bOff + 1 < bArray.length;
	  ensures \result == (short)(bOff + 2);
	  ensures sValue == makeShort(bArray[bOff], bArray[bOff+1]);
	  assignable bArray[bOff], bArray[bOff + 1];
    @*/
    public static short setShort(byte[] bArray, short  bOff, short  sValue)
 		throws TransactionException;

}
