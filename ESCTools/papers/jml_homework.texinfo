\input texinfo   @c -*-texinfo-*-
@c %**start of header

@setfilename jml_homework.info
@settitle JML and ESC/Java Homework Exercises $Revision$
@c Other commands that globally affect the document formatting: 
@c synindex, footnotestyle
@afourwide
@paragraphindent 0
@c firstparagraphindent 0
@c %**end of header
@c =============================================================================

@c =============================================================================
@c %**summary and copyright

This document contains a set of homework exercises for those that wish
to learn JML and ESC/Java.  It was begun by Joseph R. Kiniry
<kiniry@@cs.kun.nl> in May 2004 for the tutorial ``Design by Contract
and Automatic Verification for Java with JML and ESC/Java2'' presented
at ECOOP 2004 in Oslo, Norway in June 2004.  This is edition $Revision$.

@copying
The JML and ESC/Java Homework Exercises are licensed under the Creative
Commons Attribution-NonCommercial-ShareAlike 2.0 license.  See
http://creativecommons.org/licenses/by-nc-sa/2.0/

Copyright @copyright{} 2004 Joseph R. Kiniry

@quotation
You are free:
@itemize
@item
to copy, distribute, display, and perform the work
@item
to make derivative works
@end itemize

Under the following conditions:
@itemize
@item
Attribution. You must give the original author credit.
@item
Noncommercial. You may not use this work for commercial purposes.
@item
Share Alike. If you alter, transform, or build upon this work, you may
distribute the resulting work only under a license identical to this
one.
@end itemize

For any reuse or distribution, you must make clear to others the license
terms of this work.

Any of these conditions can be waived if you get permission from the
author.

Your fair use and other rights are in no way affected by the above.

This is a human-readable summary of the Legal Code.

See http://creativecommons.org/licenses/by-nc-sa/2.0/legalcode
@end quotation

@end copying

@c %**end of summary and copyright
@c =============================================================================

@c =============================================================================
@c %**title, contents, and copyright

@titlepage
@title JML and ESC/Java Homework Exercises
@subtitle Learning JML and ESC/Java Through Example
@subtitle Edition $Revision$, May 2004
@subtitle These exercises use JML version 5.0rc1 and ESC/Java2 version 2.0a6
@author Joseph R. Kiniry <kiniry@@cs.kun.nl>

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

Published by the Nijmegen Institute for Computing and Information
Science at the University of Nijmegen as technical report NIII-R04XX.
See http://www.cs.kun.nl/research/reports/
@end titlepage

@c metadata used in HTML
@documentdescription
Homework Exercises, Java Modeling Language, JML, ESC/Java, ESC/Java2,
Extended Static Checking, Extended Static Checker, Design by Contract,
Java, Verification, jUnit, Unit Testing, Model Checking, BISL,
Behavioral Interface Specification Language, Kiniry
@end documentdescription

@c Output the table of contents at the beginning.
@contents

@c %**end of title, contents, and copyright
@c =============================================================================

@c =============================================================================
@c %**top node and master menu

@c We recommend including the copying permissions here as well as the
@c segments above.
@ifnottex
@node Top, Introduction, (dir), (dir)
@top JML and ESC/Java Homework Exercises

@insertcopying
@end ifnottex

This set of homework problems focus on the use of JML in runtime
assertion checking (with @t{jmlc} and @t{jmlrac}) and static
verification with ESC/Java2.

@menu
* Introduction::                An introduction to these homework exercises.
* Core::                        Understanding the core concepts of JML.
* Using::                       Ways to use JML and ESC/Java2.
* Copying::                     Your rights and freedoms.
* Index::                       Complete index.

@end menu

@c %**end top node and master menu
@c =============================================================================

@c =============================================================================
@c %**body

@node Introduction, Core, Top, Top
@unnumbered Introduction

@cindex Introduction

The Java Modeling Language (JML) is a behavioral interface specification
language that can be used to specify the behavior of Java modules. It
combines the ``Design by Contract'' approach of Eiffel and the
model-based specification approach of the Larch family of interface
specification languages with some elements of the refinement calculus.

The JML tool suite comes with a typechecker (@t{jml}), a compiler
(@t{jmlc}), a runtime assertion checker (@t{jmlrac}), a Javadoc-based
documentation generator (@t{jmldoc}), a set of unit test tools
(@t{jml-junit}, @t{jmlunit}, @t{jtest}), and a specification skeleton
generator and specification comparison tool (@t{jmlspec}).

The JML tool suite is primarily the development of the JML project at
Iowa State University, led by Gary Leavens.  http://www.jmlspecs.org/

Several other tools understand (often subsets of) JML:
@itemize
@item
The Extended Static Checker for Java (ESC/Java version 1).
http://research.compaq.com/SRC/esc/
@item
The Open Source Extended Static Checker for Java (ESC/Java version 2, or
ESC/Java2 for short) from the SoS Group at the University of Nijmegen
and David Cok.
http://www.cs.kun.nl/sos/research/escjava/
@item
The LOOP compiler from the SoS Group at the University of Nijmegen.
http://www.cs.kun.nl/sos/
@item
The Daikon invariant detector from the Program Analysis Group at MIT.
http://pag.lcs.mit.edu/daikon/
@item
The ChAsE frame axiom checker from Lemme project at INRIA Sophia-Antipolis.
http://www-sop.inria.fr/lemme/verificard/modifSpec/index.html
@item
The JACK tool from Gemplus.
http://www.gemplus.com/smart/r_d/trends/jack.html
@item
The Bogor tool from the SpEx project at Kansas State University.
http://spex.projects.cis.ksu.edu/
@end itemize

This set of homework problems focus on the use of JML in runtime
assertion checking (with @t{jmlc} and @t{jmlrac}) and static
verification with ESC/Java2.

@c =============================================================================
@node Core, Using, Introduction, Top
@unnumbered Core JML Constructs

@cindex Core JML Constructs

The following sections discuss all of the core constructs of JML with
examples and exercises.  It is suggested that each exercise be completed
in sequence, as the exercises build upon each other in the order
presented.  @i{I.e.}, Problem @ref{Problem-2,,two} builds on the
knowledge that you gained in Problem @ref{Problem-1,,one}.

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@menu
* Assertions::                  Understanding basic assertions.
* Loops::                       Reasoning about loops.
* PrePost::                     Core concepts of method specifications.
* Modifies::                    Reasoning about and with frame axioms.
* Heavyweight::                 Expressive and easy to understand specifications.
* Invariants::                  Core concepts of class specifications.
* Aliasing::                    Reasoning in the face of aliasing adversity.
* Models::                      Specifying and reasoning with models.
@end menu

@page

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Assertions, Loops, Core, Core
@unnumberedsec Assertions

@cindex Assertions

An assertion is a predicate that @emph{must always} be true.  Assertions
are typically used for debugging and (localized) documentation purposes.

In JML, an assertion expression has the form
@display
@var{assert-statement} ::= @code{assert} @var{expression} [ @code{:} @var{expression} ] @code{;}
@end display

The first expression is the predicate that must be true.  The second
(optional) expression must be of type @code{String}.  The value of this
expression is printed by some tools when the assertion fails.  (add
xrefs)

Beginning in Java 1.4, an @code{assert} keyword was introduced.  The
syntax of the Java assert statement is the same as that of JML.  (add
xref)

Java's semantics does not restrict either subexpression in its assert
statement, so you can write assert statements that have side-effects
such as
@example
        int x;
        x++;
        assert (x++ == 2) : new String("This is a bad idea.");
@end example

This is a very bad idea, as it means that the behavior of your program
changes whether you are testing your assertions or not.

JML's assert statement does not permit side effects in either
subexpression.

Using runtime checking (with @t{jmlc} and @t{jmlrac}), JML and Java
assert statements are tested at runtime.  Using ESC/Java, JML assert
statements are proven at compile-time.  

In ESC/Java2, Java assert statements are treated one of two ways.  They
are either
@itemize
@item
Treated as Java assert statements using the @code{-eajava} or
@code{-javaAssertions} (synonymous) switches, or
@item
Treated as JML assert statements using the @code{-eajml} or
@code{-jmlAssertions} (synonymous) switches.
@end itemize
In the former case, a failed assertion has the semantics of 
@example
        throw new AssertionError(second expression);
@end example

Thus, you are @strong{not} reasoning about another potential runtime
exception, as all subtypes of @code{Error} are ignored by ESC/Java. (add
xref)

@page

@strong{Problem 1.} @anchor{Problem-1} Annotate the following code block
with Java assertions as indicated.  The expression @code{P(a0,a1,...)}
means ``replace this expression with a predicate that is true of the
variables @code{a0} and @code{a1} and @ldots''.  Write the strongest
predicate possible, given the context of the assertion.  Execute the
class to check your answers.

@example
@include problems/Assertions.java.texinfo
@end example

@strong{Problem 2.} @anchor{Problem-2} Annotate the following code block
with JML assertions as indicated.

@example
@include problems/Assertions.java.texinfo
@end example

@page

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Loops, PrePost, Assertions, Core
@unnumberedsec Reasoning about Loops

@cindex Reasoning about Loops

@page

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node PrePost, Modifies, Loops, Core
@unnumberedsec Preconditions and Postconditions

@cindex Preconditions and Postconditions

@page

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node  Modifies, Heavyweight, PrePost, Core
@unnumberedsec Frame Axioms

@cindex Frame Axioms

@page

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Heavyweight, Invariants, Modifies, Core
@unnumberedsec Heavyweight Specifications

@cindex Heavyweight Specifications

@page

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Invariants, Aliasing, Heavyweight, Core
@unnumberedsec Invariants

@cindex Invariants

@page

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Aliasing, Models, Invariants, Core
@unnumberedsec Aliasing

@cindex Aliasing

@page

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Models,  , Aliasing, Core
@unnumberedsec Models

@cindex Models

@c =============================================================================
@node Using, Copying, Core, Top
@unnumbered Using JML and ESC/Java2

@cindex Using JML and ESC/Java2

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@menu
* Annotating Code::             Annotating preexisting code.
* Annotating APIs::             Annotating APIs.
* Designing by Contract::       Design by Contract with JML for Java.
@end menu

@page

@node Annotating Code, Annotating APIs, Using, Using
@unnumberedsec Annotating Preexisting Java Code

@cindex Annotating Existing Java Code
@cindex Code Annotation

@page

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Annotating APIs, Designing by Contract, Annotating Code, Using
@unnumberedsec Annotating Preexisting APIs

@cindex Annotating Existing APIs
@cindex API Annotation

@page

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Designing by Contract,  , Annotating APIs, Using
@unnumberedsec Designing by Contract

@cindex Designing by Contract
@cindex Design by Contract

@c =============================================================================
@node Copying, Index, Using, Top
@unnumbered Copying

@cindex Copying

@insertcopying

@c %**end of body
@c =============================================================================

@c =============================================================================
@c %**end of document

@node Index,  , Copying, Top
@unnumbered Index

@printindex cp

@bye
