              Review form for
          LNCS proceedings of FMCO 2005

Title:   Beyond Assertions: Advanced Specification and 
         Verification with JML and ESC/Java2

Authors: Erik Poll, Patrice Chalin, David Cok, Joe Kiniry, and 
         Gary T. Leavens

********************************************************
Judgment:

1) Soundness and validity of contents: Good

2) Originality:                        Good

3) Clarity of presentation:            Good
   

Overall recommendations:               Accept


********************************************************
Comments to the authors:

> A purely editorial comment: in general, the authors are 
> "comma-happy". There are far too many sentences with commas 
> that do not separate clauses. Some of them are pointed out below. 
> I mark them as "*,*".

Thanks for the detailed suggestions.

> p. 2:
> 
> meet their specifications*,* fall into

Done

> include: e.g., --> include

Done

> complimentary --> complementary

Done.

> As compared to --> Compared to

Done.

> various kinds of clock --> various kinds of clocks

Done

> p. 3:
> 
> Informal comments, line the one --> Informal comments, like the one

Done.

> p. 5:
> 
> Section 2.2: Is purity enforced? It says that a constructor would 
> not be permitted to assign to a static field. Is that something 
> a user has to remember and handle or do the tools do some checking?

It's handled statically.  We added a bit more about this.

> Section 2.3: It should have a sentence explain --- at least at a 
> high level --- why one would use a lightweight versus heaveyweight 
> specification.

We added a short explanation of this.

> p. 6:
> 
> TickTocClock --> TickTockClock

Done.

> p. 6--7:
> 
> "rules out the generation of any runtime exceptions". Does this 
> include exceptions like being out of memory, or other impossible 
> to rule-out exceptions that the system may throw? Or are they 
> catergorized as something other than "runtime exceptions"?

We added a brief explanation that Errors in Java terms are not excluded.

> p. 8:
> 
> "alternative solutions are explored elsewhere": Why isn't BDF+04 
> cited here as well as the current citations?

Good point, we added the citation.

> p. 9:
> 
> introduce additional fields, to record the date, and the 
> tick --> introduce additional fields to record the date, and tick

Done.

> an object's state*,* that can still

Done.

> "the datagroup _time_state would be declared to belong to 
> objectState": Where does that happen? Or is it implicit?

We rewrote to clarify.

> "assignable clauses ... are not needed to do runtime 
> assertion checking": Why not? Shouldn't they be considered 
> part of a method's contract and violations reported just as 
> they are for postconditions?

Yes, currently the tools check assignable clauses statically, but not
in a completely conservative manner.
However, the RAC doesn't use them dynamically in the current
implementation.  That may be changed in the future, so we rewrote a
bit to clarify.

> The represents clause of line 3*,* relates --> The represents 
> clause on line 3 relates

Done

> in this case*,* as a function of hour

Done

> declared private*,* because it refers

We kept this comma.

> p. 14:
> 
> "turned on twice in a row, or turned on twice in a 
> row": shouldn't the second "on" be "off"?

Yes, fixed.  (The other referee also noticed this.)

> p. 15:
> 
> to*,* in annotations*,* using

Done

> When do model fields change value automatically? As soon as 
> any piece of its concrete representation changes? At the end 
> of the method? What about ghost fields? If not at method end, 
> then are the changes visible during call outs (i.e., at points 
> where re-entrance is possible)? If at the method end, then does 
> that lead to problems with re-entrance?

[[[This is a good question, and one that is answered in detail by Leino
and Mueller's recent paper.  For JML it should be at the end of the
method, but we haven't dealt with it yet in detail.  Probably we need
to add this as an issue in the paper.]]]

> To illustrate the issue, Fig. 7 shows --> To illustrate the 
> issue, Fig. 6 shows

Fixed (the problem was that we had the \label directives before the
\caption directives in the LaTeX source).

> p. 17:
> 
> Figure 7 has the class name as MyDigitalDisplayClock, but it 
> should be BrokenDigitalDisplayClock (at least from how it is 
> referred to in the text).

Corrected as suggested.

> "the guarantee that time will not be aliased outside the 
> class": What about passing time as an argument to a method? How 
> do you know it won't get captured? Or is this what is meant by 
> saying that ESC/Java2 does not handle universes yet?

[[[Needs to be done]]]
 
> A language extention to C#*,* that is similar in purpose and 
> scope to JML*,*

Done

> Spec# enjoys tools support --> Spec# enjoys tool support

Done

> I'm surprised that there is no mention in the paper of the 
> non-null annotation that is shown in the examples, nor is 
> there any mention of whether JML is going to make that the 
> default or not.

[[[Needs to be fixed.]]]
