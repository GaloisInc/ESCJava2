//@ refine "BagOfInt.jml-refined";
public class BagOfInt {

    /** Elements. */
    private /*@ spec_public non_null @*/ int[] a;
    /** Number of active elements in a. */
    private /*@ spec_public @*/ int n;

    //@ public invariant 0 <= n && n <= a.length;

    /** Initialize to contain input's elements. */
    //@ also
    /*@ assignable a, n;
      @ ensures n == input.length;
      @ ensures (\forall int i; 0 <= i && i < n;
      @             a[i] == input[i]);   @*/
    public BagOfInt(/*@ non_null @*/ int[] input);

    /** Return the multiplicity of i. */
    //@ also
    /*@ ensures \result
      @     == (\num_of int j; 0 <= j && j < n;
      @                   a[j] == i);       @*/
    public /*@ pure @*/ int occurrences(int i);

    /** Return and delete the minimum element. */
    //@ also
    /*@ requires 0 < n;
      @ assignable n, a, a[*]; 
      @ ensures n == \old(n-1);
      @ ensures \result ==
      @   \old((\min int j; 0 <= j && j < n; a[j]));
      @ ensures (\forall int j; 0 <= j && j < \old(n);
      @     \old(a[j]) != \result
      @       && occurrences(\old(a[j]))
      @           == \old(occurrences(a[j]))
      @  || (\old(a[j]) == \result
      @       && occurrences(\old(a[j]))
      @           == \old(occurrences(a[j])-1))); @*/
    public int extractMin();
}
