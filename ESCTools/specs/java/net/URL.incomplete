// Copyright (C) 2004 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.


// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.net;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Hashtable;
import java.util.StringTokenizer;

/** JML's specification of java.net.URL.
 *  [[[This specification is still incomplete.]]]
 * @author Katie Becker
 * @author Gary T. Leavens
 */
public final class URL implements java.io.Serializable {

    // CLASS SPECIFICATIONS

    /*@  public model String _protocol, _host, _file;
      @  public model String _scheme, _authority, _userInfo, _path, _query, _ref;
      @  public model URLStreamHandler _handler;
      @  public model int _port;  
      @*/

    /*@ public normal_behavior
      @   ensures \result <==>
      @           (host==null && this._host==null)
      @        || (this._host.equals(host)) 
      @        || (* the host names resolve to the same IP addresses *);
      public pure model boolean hasEquivalentHosts(String host);
      @*/
            
    /*@ public normal_behavior
      @  requires file!=null;
      @  ensures \result!=null;
      @  ensures file.indexOf('#') < 0 ==> 
      @            (file.lastIndexOf('?') != -1 
      @              ? \result.equals(file.substring(0, file.lastIndexOf('?')))
      @              : \result.equals(file));
      @  ensures file.indexOf('#') >= 0 ==> 
      @           (file.substring(0, file.indexOf('#')).lastIndexOf('?') != -1 
      @              ? \result.equals(file
      @                       .substring(0, file.indexOf('#'))
      @                       .substring(0, file.lastIndexOf('?')))
      @              : \result.equals(file.substring(0, file.indexOf('#'))));
      public pure model String getPath(String file) {
          int i = file.indexOf('#');
          if (i>=0) {
              file = file.substring(0, i);
          }
          int q = file.lastIndexOf('?');
          if (q != -1) {
              return file.substring(0, q);
          } else {
              return file;
          }
      }
      @*/

    /*@ public normal_behavior
      @  requires file!=null;
      @  ensures file.indexOf('#') < 0 ==> 
      @            (file.lastIndexOf('?') != -1 
      @               ? \result.equals(file.substring(file.lastIndexOf('?')+1))
      @               : \result == null);
      @  ensures file.indexOf('#') >= 0 ==> 
      @           (file.substring(0, file.indexOf('#')).lastIndexOf('?') != -1 
      @              ? \result.equals(file.substring(0, file.indexOf('#'))
      @                                   .substring(file.lastIndexOf('?')+1))
      @              : \result == null);
      public pure model String getQuery(String file) {
          int i = file.indexOf('#');
          if (i>=0) {
              file = file.substring(0, i);
          }
          int q = file.lastIndexOf('?');
          if (q != -1) {
              return file.substring(q+1);
          } else {
              return null;
          }
      }
      @*/
            
    /*@ public normal_behavior
      @  requires file!=null;
      @  ensures (file.indexOf('#') < 0)
      @            ? \result==null 
      @            : \result.equals(file.substring(file.indexOf('#') + 1));
      public pure model String getRef(String file) {
          int i = file.indexOf('#');
          if (i<0) {
              return null;
          } else {
              return file.substring(i + 1);
          }
      }
      @*/
      
    // METHODS AND CONSTRUCTORS

    /*@  public behavior
      @    ensures this.equals(new URL(protocol, host, port, file, null));
      @    signals (MalformedURLException);
      @*/
    public /*@ pure @*/ URL(String protocol, String host, int port,
                            String file)
        throws MalformedURLException;

    /*@  public behavior
      @    ensures this.equals(new URL(protocol, host, -1, file));
      @    signals (MalformedURLException);
      @*/
    public /*@ pure @*/ URL(String protocol, String host, String file)
        throws MalformedURLException;

    /* FIXME @  public behavior
      @    ensures this.protocol.equals(protocol.toLowerCase())
      @         && this.port==port;
      @    ensures (file==null) ==> this.file==null;
      @    ensures (file!=null) ==>
      @              ( getQuery(file)!=null 
      @                ? this.file.equals(getPath(file) + "?" + getQuery(file))
      @                : this.file.equals(getPath(file)) );
      @    ensures (host==null) ==>
      @              ( authority==null && (port == -1) 
      @                ? authority.equals(host) 
      @                : authority.equals(host + ":" + port) );
      @    ensures ( host!=null && host.indexOf(':') >= 0
      @                         && !host.startsWith("[") )
      @              ? this.host.equals("[" + host + "]")
      @              : this.host==host;
      @    ensures this.handler!=null;
      @    ensures (file==null) ? this.ref==null
      @                         : this.ref.equals(getRef(file));
      @    signals (MalformedURLException);
      @    signals (SecurityException);
      @*/
    public /*@ pure @*/ URL(String protocol, String host, int port,
                            String file, URLStreamHandler handler)
        throws MalformedURLException;

    /*@  public behavior
      @    ensures this.equals(new URL(null, spec));
      @    signals (MalformedURLException);
      @*/
    public /*@ pure @*/ URL(String spec) throws MalformedURLException;

    /*@  public behavior
      @    ensures this.equals(new URL(context, spec, null));
      @    signals (MalformedURLException);
      @*/
    public /*@ pure @*/ URL(URL context, String spec)
        throws MalformedURLException;

    /*@  public behavior
      @    ensures this._handler!=null;
      @    signals (MalformedURLException);
      @    signals (SecurityException);
      @*/
    public /*@ pure @*/ URL(URL context, String spec, URLStreamHandler handler)
        throws MalformedURLException;

    /*-@  protected normal_behavior
      @    assignable _protocol, _host, _file, _port, 
      @               _authority, _userInfo, _path,
      @               _query, _ref;
      @    ensures this._protocol.equals(protocol) && this._host.equals(host)
      @         && this._port==port && this._file.equals(file)
      @         && this._ref.equals(ref);
      @    ensures (port == -1) ? this._authority.equals(host)
      @                         : this._authority.equals(host + ":" + port);
      @    ensures (file.lastIndexOf('?') != -1)
      @              ? query.equals(file.substring(file.lastIndexOf('?')))
      @                && path.equals(file.substring(0, file.lastIndexOf('?')))
      @              : path.equals(file);
      @*/
    protected void set(String protocol, String host, int port, String file,
                       String ref);

    /*-@  protected normal_behavior
      @    assignable _protocol, _host, _file, _port, 
      @               _authority, _userInfo, _path,
      @               _query, _ref;
      @    ensures this._protocol.equals(protocol) && this._host.equals(host)
      @            && this._port==port && this._authority.equals(authority) 
      @            && this._userInfo.equals(userInfo) && this._path.equals(path)
      @            && this._query.equals(query) && this._ref.equals(ref);
      @    ensures query == null ? this.file.equals(path) 
      @                          : this.file.equals(path + "?" + query);
      @*/
    protected void set(String protocol, String host, int port,
                       String authority, String userInfo, String path,
                       String query, String ref);

    /*@  public normal_behavior
      @    ensures \result.equals(_query);
      @*/
    public /*@ pure @*/ String getQuery();

    /*@  public normal_behavior
      @    ensures \result.equals(_path);
      @*/
    public /*@ pure @*/ String getPath();

    /*@  public normal_behavior
      @    ensures \result.equals(_userInfo);
      @*/
    public /*@ pure @*/ String getUserInfo();

    /*@  public normal_behavior
      @    ensures \result.equals(_authority);
      @*/
    public /*@ pure @*/ String getAuthority();

    /*@  public normal_behavior
      @    ensures \result==_port;
      @*/
    public /*@ pure @*/ int getPort();

    /*@  public normal_behavior
      @    ensures \result == -1 <==> 
      @          (* the URL scheme or the URLStreamHandler does not have
      @             a default port *);
      @*/
    public /*@ pure @*/ int getDefaultPort();

    /*@  public normal_behavior
      @    ensures \result.equals(_protocol);
      @*/
    public /*@ pure @*/ String getProtocol();

    /*@  public normal_behavior
      @    ensures \result.equals(_host);
      @*/
    public /*@ pure @*/ String getHost();

    /*@  public normal_behavior
      @    ensures \result.equals(_file);
      @*/
    public /*@ pure @*/ String getFile();

    /*@  public normal_behavior
      @    ensures \result.equals(_ref);
      @*/
    public /*@ pure @*/ String getRef();

    /* FIXME @  also
      @   public normal_behavior
      @     requires obj instanceof URL;
      @     ensures \result <==>
      @               JMLNullSafe.equals(((URL)obj).protocol, protocol)
      @               && hasEquivalentHosts(((URL)obj).host)
      @               && ((URL)obj).port == port
      @               && JMLNullSafe.equals(((URL)obj).file, file)
      @               && JMLNullSafe.equals(((URL)obj).ref, ref);
      @  also
      @   public normal_behavior
      @     requires !(obj instanceof URL);
      @     ensures \result == false;
      @*/
    public /*@ pure @*/ boolean equals(Object obj);

    // Inherited spec
    public synchronized int hashCode();

    /*@  public normal_behavior
      @    ensures \result <==>
      @             this._protocol.equals(other._protocol) 
      @              && this._host.equals(other._host)
      @              && this._port == other._port
      @              && this._path.equals(other._path); 
      @*/
    public /*@ pure @*/ boolean sameFile(URL other);

    /*@ also
      @  public normal_behavior
      @    ensures \result.equals(toExternalForm());
      @*/
    public /*@ pure @*/ String toString();

    /*@  public normal_behavior
      @    ensures \result != null;
      @*/
    public /*@ pure @*/ String toExternalForm();

    /*@  public behavior
      @    ensures \result != null;
      @    signals (IOException);
      @*/
    public /*@ pure @*/ URLConnection openConnection()
        throws java.io.IOException;

    /*@  public behavior
      @    ensures \result.equals(openConnection().getInputStream());
      @    signals (IOException);
      @*/
    public /*@ pure @*/ final InputStream openStream()
        throws java.io.IOException;

    /*@  public behavior
      @    ensures \result.equals(openConnection().getContent());
      @    signals (IOException);
      @*/
    public /*@ pure @*/ final Object getContent() throws java.io.IOException;

    /*@  public behavior
      @    ensures \result.equals(openConnection().getContent(classes));
      @    signals (IOException);
      @*/
    public /*@ pure @*/ final Object getContent(Class[] classes)
        throws java.io.IOException;

    /*@  public behavior
      @    assignable _factory;
      @    ensures _factory.equals(fac);
      @    signals (Error);
      @    signals (SecurityException);
      @*/
    public static void setURLStreamHandlerFactory(URLStreamHandlerFactory fac);

    //@ public static model JMLDataGroup _factory;
}

