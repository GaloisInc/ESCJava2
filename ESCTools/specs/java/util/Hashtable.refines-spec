// Copyright (C) 2003 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with GNU Emacs; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.util;

/** JML's specification of java.util.Hashtable.
 * @version $Revision$
 * @author Katie Becker
 * @author Gary T. Leavens
 */
public class Hashtable extends Dictionary
    implements Map, Cloneable, java.io.Serializable
{
 
    //@ public model int initialCapacity;    
    //@ public model float mLoadFactor;
	    // Can't use loadFactor because it is a private field identifier
    
    //@ public invariant initialCapacity >= 0;  
    //@ public invariant mLoadFactor > 0;
      
    /* FIXME @ public normal_behavior
      @   requires initialCapacity >= 0;
      @   assignable theMap, this.initialCapacity, this.mLoadFactor;
      @     ensures theMap != null && theMap.isEmpty();
      @     ensures this.initialCapacity == initialCapacity
      @          && this.mLoadFactor == mLoadFactor;
      @*/           
    //@ pure
    public Hashtable(int initialCapacity, float mLoadFactor); 
            
    /* FIXME @ public normal_behavior
      @   assignable theMap, this.initialCapacity, this.mLoadFactor;
      @     ensures theMap != null && theMap.isEmpty();
      @     ensures this.initialCapacity == initialCapacity
      @          && this.mLoadFactor == 0.75;
      @*/
    //@ pure
    public Hashtable(int initialCapacity); 

    /* FIXME @ public normal_behavior
      @   assignable theMap, initialCapacity, mLoadFactor;
      @     ensures theMap != null && theMap.isEmpty();
      @     ensures mLoadFactor == 0.75;
      @*/
    //@ pure
    public Hashtable(); 

    /* FIXME @ public normal_behavior
      @   requires t != null;
      @     assignable theMap, initialCapacity, mLoadFactor;
      @     ensures initialCapacity==2*(t.theMap.int_size());
      @     ensures mLoadFactor == 0.75 && theMap.equals(t.theMap);
      @*/     
    //@ pure
    public Hashtable(Map t);

    // specification inherited
    public synchronized int size();

    // specification inherited
    public synchronized boolean isEmpty();

    /*@ also
      @   normal_behavior
      @     ensures \fresh(\result); 
      @*/
    public /*@ pure @*/ synchronized Enumeration keys(); 
 
    /*@ also 
      @   normal_behavior
      @     ensures \fresh(\result);  
      @*/
    public /*@ pure @*/ synchronized Enumeration elements(); 

    /* FIXME @ public normal_behavior
      @    requires value != null;
      @    ensures \result <==>
      @      (\exists Map.Entry e; theMap.has(e) && e != null; 
      @                            e.abstractValue.equals(value));
      @    ensures_redundantly \result==containsValue(value);
      @*/
    public /*@ pure @*/ synchronized boolean contains(Object value); 

    /*@ also
      @   public behavior
      @     ensures value != null;
      @     signals (NullPointerException) value == null;
      @*/
    public boolean containsValue(Object value);

    // specification inherited
    public synchronized boolean containsKey(Object key);

    // specification inherited
    public synchronized Object get(Object key);

    /* FIXME @ protected normal_behavior
      @    assignable theMap; 
      @    ensures theMap.equals(\old(theMap));
      @*/
    protected void rehash();

    // specification inherited
    public synchronized Object put(Object key, Object value);

    // specification inherited
    public synchronized Object remove(Object key);

    // specification inherited
    public synchronized void putAll(Map t);

    // specification inherited
    public synchronized void clear();

    /*@ also
      @   public normal_behavior
      @       assignable \nothing;
      @       ensures \result instanceof Map && \fresh(\result)
      @          && ((Map)\result).equals(this);
      @       ensures_redundantly \result != this;
      @*/
    public /*@ pure @*/ synchronized Object clone(); 

    // specification inherited
    public synchronized String toString();

    // specification inherited
    public Set keySet();

    // specification inherited
    public Set entrySet();

   // specification inherited
    public Collection values();

    /* FIXME @ also 
      @  public normal_behavior
      @    requires o instanceof Hashtable;
      @    ensures \result <==> theMap.equals(((Hashtable)o).theMap);
      @ also
      @  public normal_behavior
      @    requires !(o instanceof Hashtable);
      @    ensures \result == false;
      @*/
    public synchronized boolean equals(Object o);

   // specification inherited
    public synchronized int hashCode();
}
