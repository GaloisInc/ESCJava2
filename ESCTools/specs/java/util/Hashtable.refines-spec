// Copyright (C) 2003 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with GNU Emacs; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.util;

/** JML's specification of java.util.Hashtable.
 * @version $Revision$
 * @author Katie Becker
 * @author Gary T. Leavens
 */
public class Hashtable extends Dictionary
    implements Map, Cloneable, java.io.Serializable
{
    // NOTE: A Hashtable does not allow null elements
 
    //@ public model int initialCapacity;    
    //@ public model float mLoadFactor;
	    // Can't use loadFactor because it is a private field identifier
    
    //@ public invariant initialCapacity >= 0;  
    //@ public invariant mLoadFactor > 0;
      
    /*@
      @ public normal_behavior
      @   ensures \result <==> ( initialMap() &&
      @                          mLoadFactor == f &&
      @                          initialCapacity == i);
      @ public pure model boolean initialHashtable(double f, int i);
      @
      @ public normal_behavior
      @   ensures initialHashtable(.75,11);
      @ public pure model boolean initialHashtable();
      @*/

    /*@ public normal_behavior
      @   requires initialCapacity >= 0;
      @   ensures initialHashtable(mLoadFactor, initialCapacity);
      @*/           
    //@ pure
    public Hashtable(int initialCapacity, float mLoadFactor); 
            
    /*@ public normal_behavior
      @     ensures initialHashtable(0.75,initialCapacity);
      @*/
    //@ pure
    public Hashtable(int initialCapacity); 

    /*@ public normal_behavior
      @     ensures initialHashtable(0.75,11);
      @*/
    //@ pure
    public Hashtable(); 

    /*@ public normal_behavior
      @   requires t != null;
      @     ensures mLoadFactor == 0.75;
      @     ensures equals(t);
      @     ensures initialCapacity >= t.size();
      @ also public exceptional_behavior
      @   requires t == null;
      @   signals_only NullPointerException;
// FIXME - what if argument has a null key or value?
      @*/     
    //@ pure
    public Hashtable(Map t);

    // specification inherited
    public synchronized int size();

    // specification inherited
    public synchronized boolean isEmpty();

    // specification inherited
    //@ public normal_behavior
    //@   requires value != null;
    //@   ensures \result == containsValue(value);
    //@ also public exceptional_behavior
    //@   requires value == null;
    //@   signals_only NullPointerException;
    public /*@ pure @*/ synchronized boolean contains(Object value); 

    // specification inherited
    //@ also public exceptional_behavior
    //@   requires key == null;
    //@   signals_only NullPointerException;
    public synchronized boolean containsKey(Object key) throws RuntimeException;

    // specification inherited
    //@ also public exceptional_behavior
    //@   requires key == null;
    //@   signals_only NullPointerException;
    public synchronized Object get(Object key);

    // FIXME - need specs for these enumerators
    /*@ also
      @   normal_behavior
      @     ensures \fresh(\result); 
      @*/
    public /*@ pure @*/ synchronized Enumeration keys(); 
 
    /*@ also 
      @   normal_behavior
      @     ensures \fresh(\result);  
      @*/
    public /*@ pure @*/ synchronized Enumeration elements(); 

    /*@ also
      @   public behavior
      @     ensures value != null;
      @     signals (NullPointerException) value == null;
      @*/
    public boolean containsValue(Object value) throws NullPointerException;

    /*@ protected normal_behavior
      @    assignable objectState; 
      @    ensures true; // FIXME - should ensure the map and some setting do  not change
      @*/
    protected void rehash();

    // specification inherited
    //@ also public exceptional_behavior
    //@   requires key == null || value == null;
    //@   assignable \not_specified;
    //@   signals_only NullPointerException;
    public synchronized Object put(Object key, Object value);

    // specification inherited
    //@ also public exceptional_behavior
    //@   requires key == null;
    //@   assignable \not_specified;
    //@   signals_only NullPointerException;
    public synchronized Object remove(Object key);

    // specification inherited
    public synchronized void putAll(Map t);

    // specification inherited
    public synchronized void clear();

    /*@ also
      @   public normal_behavior
      @       assignable \nothing;
      @       ensures \result instanceof Map && \fresh(\result)
      @          && ((Map)\result).equals(this);
      @       ensures_redundantly \result != this;
      @*/
    // FIXME - what about loadFactor, initialCapacity?
    public /*@ pure @*/ synchronized Object clone(); 

    // FIXME - needs a more specific spec
    public synchronized String toString();

    // specification inherited
    public Set keySet();

    // specification inherited
    public Set entrySet();

   // specification inherited
    public Collection values();

    // specification inherited
    public synchronized boolean equals(Object o);

   // specification inherited
    public synchronized int hashCode();


}
