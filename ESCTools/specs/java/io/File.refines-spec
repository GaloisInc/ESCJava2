// Generated by jmlspec from the .class file

package java.io;

//-@ immutable
public class File implements Serializable, Comparable {

    // FIELDS
    public static final char pathSeparatorChar;
    public static final char separatorChar;

    //@ non_null
    public static final String pathSeparator;
    //@ non_null
    public static final String separator;




    // CONSTRUCTORS

    //@ public normal_behavior
    //@   requires name != null;
    //@ also public exceptional_behavior
    //@   requires name == null;
    //@   signals_only NullPointerException;
    //@ pure
    public File(File dir, String name);

    //@ public normal_behavior
    //@   requires name != null;
    //@ also public exceptional_behavior
    //@   requires name == null;
    //@   signals_only NullPointerException;
    //@ pure
    public File(String dir, String name);

    //@ public normal_behavior
    //@   requires path != null;
    //@ also public exceptional_behavior
    //@   requires path == null;
    //@   signals_only NullPointerException;
    //@ pure
    public File(String path);

    //@ public normal_behavior
    //@   requires path != null;
    //@ also public exceptional_behavior
    //@   requires path == null;
    //@   signals_only NullPointerException;
    //@ pure
    public File(java.net.URI path);

    //@ non_null
    public static File createTempFile(String prefix, String suffix) throws IOException;

    //@ non_null
    public static File createTempFile(String prefix, String suffix, File dir)
        throws IOException;



    // METHODS

    public int hashCode();

    public long lastModified();

    public long length();

    public void deleteOnExit();

    public boolean canRead();

    public boolean canWrite();

    public boolean createNewFile() throws IOException;

    public boolean delete();

    /*@ pure */ public boolean exists();

    /*@ pure */ public boolean isAbsolute();

    /*@ pure */ public boolean isDirectory();

    /*@ pure */ public boolean isFile();

    /*@ pure */ public boolean isHidden();

    public boolean mkdir();

    public boolean mkdirs();

    public boolean setReadOnly();

    public boolean setLastModified(long time);

    //@ ensures \result != null;
    public File getAbsoluteFile();

    //@ ensures \result != null;
    public File getCanonicalFile() throws IOException;

    //@ ensures \result != null;
    public File getParentFile();

    //@ ensures \result != null;
    //@ pure
    public File[] listFiles();

    //@ ensures \result != null;
    //@ pure
    public static File[] listRoots();

    //@ public normal_behavior
    //@   requires path != null;
    //@   ensures this == path ==>\result == 0;
    //@   ensures \result == compareTo((Object)path);
    //@ also public exceptional_behavior
    //@   requires path == null;
    //@   signals_only NullPointerException;
    //@ pure
    public int compareTo(File path);

    //@ axiom (\forall Class c; Comparable.definedComparison(File.class,c) == (c <: File.class));

    //@ also public normal_behavior
    //@   requires o != null && o instanceof File && definedComparison(getClass(),o.getClass());
    //@   ensures \result == this.compareTo((File)o);
    //@ pure
    public int compareTo(Object o);

    public boolean equals(Object o);

    public boolean renameTo(File path);

    //@ non_null
    public String getAbsolutePath();

    //@ non_null
    public String getCanonicalPath() throws IOException;

    //@ non_null
    public String getName();

    //@ non_null
    public String getParent();

    //@ non_null
    public String getPath();

    //@ non_null
    public String toString();

    //@ non_null
    public String[] list();

    //@ non_null
    public java.net.URI toURI();

    public java.net.URL toURL()
        throws java.net.MalformedURLException;

    //@ public normal_behavior
    //@   requires filter != null;
    //@ non_null
    public File[] listFiles(FileFilter filter);

    //@ public normal_behavior
    //@   requires filter != null;
    //@ non_null
    public File[] listFiles(FilenameFilter filter);

    //@ public normal_behavior
    //@   requires filter != null;
    //@ non_null
    public String[] list(FilenameFilter filter);

}
