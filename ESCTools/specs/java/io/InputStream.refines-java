// @(#)$Id$

// Copyright (C) 2004 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.


package java.io;

/** JML's specification of InputStream.
 * @author David Cok
 *  (following Leaven's spec of OutputStream)
 */
public abstract class InputStream {
    // FIXME: availableBytes may change asynchronously, but presumably only increases
    // FIXME: This spec does not reflect the blocking that can occur (needs when clauses)

    //@ public model non_null byte[] inputBytes; in objectState;
    //@ public constraint inputBytes == \old(inputBytes);

    //@ public model \bigint readPosition; in objectState;
    //@    public initially readPosition == 0;

    //@ public invariant readPosition >= 0 && readPosition <= inputBytes.length;

    //@ public model int availableBytes; in objectState;
    //@ public model boolean isOpen; in objectState;
    //@ public model boolean wasClosed; in objectState;

    //@ public invariant availableBytes >= 0;
    //@ public invariant isOpen ==> !wasClosed;
    //@ public invariant wasClosed ==> !isOpen;

    /*@ public normal_behavior
      @   assignable isOpen, wasClosed;
      @   ensures isOpen && !wasClosed;
      @*/
    //@ pure
    public InputStream();

    /*@ public behavior
      @   assignable isOpen, wasClosed;
      @   ensures !isOpen && wasClosed;
      @   signals (IOException) (* an IO error occured *);
      @*/
    public void close() throws IOException;

    //@ public normal_behavior
    //@   requires isOpen && (inputBytes.length == readPosition);
    //@   modifies \nothing;
    //@   ensures \result == -1;
    //@ also
    //@   requires isOpen && (inputBytes.length > readPosition);
    //@   modifies readPosition, availableBytes;
    //@   ensures isOpen;
    //@   ensures \result == \old(inputBytes[(int)readPosition]);
    //@   ensures readPosition == \old(readPosition + 1);
    //@   ensures 0 <= \result && \result <= 255;
    //@ also public exceptional_behavior
    //@   requires !isOpen;
    //@   modifies \nothing;
    //@   signals (Exception e) e instanceof IOException;
    public abstract int read() throws IOException;

    //@ public normal_behavior
    //@   requires isOpen && (inputBytes.length == readPosition);
    //@   modifies \nothing;
    //@   ensures \result == -1;
    //@ also public behavior
    //@   old \bigint arraylen = b.length;
    //@   old \bigint data = inputBytes.length - readPosition;
    //@   requires isOpen && (inputBytes.length > readPosition);
    //@   modifies inputBytes, objectState, availableBytes, b[*];
    //@   ensures isOpen;
    //@   ensures \result >= 0;
    //@   ensures \result <= arraylen;
    //@   ensures \result <= data;
    //@   ensures arraylen > 0 ==> \result > 0;
    //@   ensures arraylen >= availableBytes && data >= availableBytes ==> \result >= availableBytes; // FIXME - is this true?
    //@   ensures readPosition == \old(readPosition) + \result;
    //@   ensures (\forall int i; 0<=i && i < \result; b[i] == \old(inputBytes[i+ (int) readPosition]));
    //@   ensures (\forall int i; \result <= i && i < b.length; b[i] == \old(b[i]));
    //@ also public exceptional_behavior
    //@   requires !isOpen;
    //@   modifies \nothing;
    //@   signals (Exception e) e instanceof IOException;
    public int read(byte[] b) throws IOException;

    //@ public normal_behavior
    //@   requires isOpen && (inputBytes.length == readPosition);
    //@   modifies \nothing;
    //@   ensures \result == -1;
    //@ also
    //@   old \bigint data = inputBytes.length - readPosition;
    //@   requires isOpen && (inputBytes.length > readPosition);
    //@   modifies readPosition, availableBytes, b[off .. off+len-1];
    //@   ensures isOpen;
    //@   ensures \result >= 0;
    //@   ensures \result <= len;
    //@   ensures \result <= data;
    //@   ensures len > 0 ==> \result > 0;
    //@   ensures len >= availableBytes && data >= availableBytes ==> \result >= availableBytes; // FIXME - is this true?
    //@   ensures readPosition == \old(readPosition) + \result;
    //@   ensures (\forall int i; 0<=i && i < \result; b[off+i] == \old(inputBytes[i+(int)readPosition]));
    //@   ensures (\forall int i; (0<=i && i<off) || (off+\result <=i && i<b.length); b[i] == \old(b[i]));
    //@ also public exceptional_behavior
    //@   requires !isOpen;
    //@   modifies \nothing;
    //@   signals (Exception e) e instanceof IOException;
    public int read(byte[] b, int off, int len) throws IOException;

    //@ public normal_behavior
    //@   requires isOpen && (inputBytes.length == readPosition);
    //@   modifies \nothing;
    //@   ensures \result == 0;
    //@ also public normal_behavior
    //@   requires isOpen && n < 0;
    //@   modifies \nothing;
    //@   ensures \result == 0;
    //@ also
    //@   old \bigint data = inputBytes.length - readPosition;
    //@   requires isOpen && (inputBytes.length > readPosition);
    //@   modifies readPosition, availableBytes;
    //@   ensures isOpen;
    //@   ensures \result >= 0;
    //@   ensures \result <= n;
    //@   ensures \result <= data;
    //@   ensures n >= availableBytes && data >= availableBytes ==> \result >= availableBytes; // FIXME: is this true?
    //@   ensures readPosition == \old(readPosition) + \result;
    //@ also public exceptional_behavior
    //@   requires !isOpen;
    //@   modifies \nothing;
    //@   signals (Exception e) e instanceof IOException;
    public long skip(long n) throws IOException;

    //@ public normal_behavior
    //@   requires isOpen; 
    //@   ensures \result == availableBytes;
    //@ pure
    public int available() throws IOException;

    //@ public model boolean _markSupported; in objectState;
    //@ public model \bigint markPosition; in objectState; initially markPosition == -1;
    //@ public model \bigint markLimit; in objectState;

    //@ public normal_behavior
    //@   requires _markSupported;
    //@   modifies markPosition, markLimit, objectState;
    //@   ensures markPosition == readPosition;
    //@   ensures markLimit == readPosition + readLimit;
    public synchronized void mark(int readLimit);

    //@ public normal_behavior
    //@   ensures \result == _markSupported;
    //@ pure
    public boolean markSupported();

    //@ public normal_behavior
    //@   requires _markSupported && markLimit >= readPosition && markPosition != -1;
    //@   modifies readPosition;
    //@   ensures markPosition == readPosition;
    //@ also public behavior
    //@   requires _markSupported && markPosition == -1;
    //@   modifies readPosition;
    //@   ensures 0 == readPosition;
    //@ also public exceptional_behavior
    //@   modifies \nothing;
    //@   signals (java.io.IOException e) markPosition == -1 || readPosition > markLimit;
    public synchronized void reset() throws IOException;
}
