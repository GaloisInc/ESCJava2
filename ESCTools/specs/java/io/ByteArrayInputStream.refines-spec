// Generated by jmlspec from the .class file

package java.io;

public class ByteArrayInputStream extends InputStream {

    // CLASS SPECIFICATIONS
    /*@
      @ 
      @*/

    // FIELDS
    /*@ spec_public */ protected byte[] buf;
    /*@ spec_public */ protected int count;  // One more than the last readable position
    /*@ spec_public */ protected int mark; //@ in markPosition;
    /*@ spec_public */ protected int pos;  //@ in readPosition;

    // In fact any derived class can change them as it wishes.
    // Hence all sorts of errors can occur in the various methods.

    /*@ public normal_behavior
      @   assignable \not_specified;
      @   ensures \result == (
      @              buf != null && pos >= 0 && pos <= count && 
      @              count <= buf.length &&
      @              mark >= 0 && mark <= count);
      @ public model boolean valid();
      @*/

    // CONSTRUCTORS

    /*@
      @ public normal_behavior
      @    requires bytes != null;
      @    ensures initialInputStream();
      @    ensures buf == bytes;
      @    ensures pos == 0;
      @    ensures count == buf.length;
      @    ensures mark == 0;
      @    ensures markPosition == mark && markLimit == buf.length;
      @    ensures valid();
      @ pure
      @*/
    public ByteArrayInputStream(byte[] bytes);

    /*@
      @ public normal_behavior
      @    requires bytes != null;
      @    ensures initialInputStream();
      @    ensures buf == bytes;
      @    ensures pos == off;
      @    ensures count == Math.min(bytes.length,off+len);
      @    ensures mark == off;
      @    ensures markPosition == mark && markLimit == buf.length;
      @    ensures valid();
      @ pure
      @*/
    public ByteArrayInputStream(byte[] bytes, int off, int len);

    // METHODS

    /*@
      @ also public normal_behavior
      @   ensures \result == count - pos;
      @*/
    public synchronized int available();

    /*@
      @ also public normal_behavior
      @   requires pos < count;
      @   modifies streamState;
      @   ensures \result == \old(buf[pos]);
      @   ensures pos == \old(pos+1);
      @   ensures \result == buf[pos];
      @   ensures \not_modified(isOpen,wasClosed);
      @   ensures valid();
      @ also public normal_behavior
      @   requires pos >= count;
      @   modifies \nothing;
      @   ensures \result == -1;
      @*/
    public synchronized int read();

    /*@
      @ 
      @*/
    public void close() throws IOException;

    /*@
      @ also public normal_behavior
      @   modifies readPosition;
      @   ensures pos == mark;
      @   ensures pos == readPosition;
      @*/
    public synchronized void reset();

    //@ public invariant _markSupported;

    /*@
      @*/
    public boolean markSupported();

    /*@
      @ also public normal_behavior
      @   modifies markPosition,markLimit;
      @   ensures mark == pos;
      @   ensures mark == markPosition;
      @   ensures markLimit == buf.length;
      @*/
    // The argument is ignored
    public void mark(int limit);

    /*@
      @ also public normal_behavior
      @   requires len <= 0;
      @   modifies \nothing;
      @   ensures \result == 0;
      @ also public normal_behavior
      @   requires len > 0;
      @   modifies streamState;
      @   ensures \not_modified(isOpen,wasClosed);
      @   ensures \result == \old(Math.min(len, count-pos));
      @   ensures pos == \old(pos) + \result;
      @   ensures valid();
      @*/
    public synchronized long skip(long len);

    /*@
      @ also public behavior
      @   requires isOpen;
      @   requires bytes.length == 0 && pos < count;
      @   modifies \nothing;
      @   ensures \result == 0;
      @ also public behavior
      @   requires isOpen;
      @   requires pos >= count; // at end of buffer
      @   modifies \nothing;
      @   ensures \result == -1;
      @ also public normal_behavior
      @   requires isOpen;
      @   requires bytes != null;
      @   requires bytes.length > 0;
      @   requires pos < count;
      @   modifies streamState, bytes[*];
      @   ensures \not_modified(isOpen,wasClosed);
      @   ensures \result == \old(Math.min(bytes.length, count - pos));
      @   ensures pos == \old(pos) + \result;
      @   ensures (\forall int i; 0 <= i && i < \result;
                        bytes[i] == buf[\old(pos) + i]);
      @   ensures (\forall int i; \result <= i && i < bytes.length;
                        bytes[i] == \old(bytes[i]));
      @   ensures valid();
      @*/
    public synchronized int read(byte[] bytes);

    /*@
      @ also public behavior
      @   requires isOpen;
      @   requires len <= 0 && pos < count;
      @   modifies \nothing;
      @   ensures \result == 0;
      @ also public behavior
      @   requires isOpen;
      @   requires pos >= count; // at end of buffer
      @   modifies \nothing;
      @   ensures \result == -1;
      @ also public normal_behavior
      @   requires isOpen;
      @   requires bytes != null;
      @   requires off >= 0 && off + len <= bytes.length;
      @   requires len > 0;
      @   requires pos < count;
      @   modifies streamState, bytes[off .. off+len-1];
      @   ensures \not_modified(isOpen,wasClosed);
      @   ensures \result == \old(Math.min(len, count - pos));
      @   ensures pos == \old(pos) + \result;
                     // These quantified equalities work better if one of the
                     // array arguments is a simple variable.
      @   ensures (\forall int i; 0 <= off+i && i < off+\result;
                        bytes[i] == buf[\old(pos) + i-off]);
      @   ensures (\forall int i; off+\result <= i && i < off+len;
                        bytes[i] == \old(bytes[i]));
      @   ensures valid();
      @*/
    public synchronized int read(byte[] bytes, int off, int len);
}
