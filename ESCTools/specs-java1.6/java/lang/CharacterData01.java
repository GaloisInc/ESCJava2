package java.lang;

class CharacterData01 {
    /*synthetic*/ static final boolean $assertionsDisabled = !CharacterData01.class.desiredAssertionStatus();
    
    CharacterData01() {
        
    }
    
    static int getProperties(int ch) {
        char offset = (char)ch;
        int props = A[Y[(X[offset >> 5] << 4) | ((offset >> 1) & 15)] | (offset & 1)];
        return props;
    }
    
    static int getType(int ch) {
        int props = getProperties(ch);
        return (props & 31);
    }
    
    static boolean isLowerCase(int ch) {
        int type = getType(ch);
        return (type == Character.LOWERCASE_LETTER);
    }
    
    static boolean isUpperCase(int ch) {
        int type = getType(ch);
        return (type == Character.UPPERCASE_LETTER);
    }
    
    static boolean isTitleCase(int ch) {
        int type = getType(ch);
        return (type == Character.TITLECASE_LETTER);
    }
    
    static boolean isDigit(int ch) {
        int type = getType(ch);
        return (type == Character.DECIMAL_DIGIT_NUMBER);
    }
    
    static boolean isDefined(int ch) {
        int type = getType(ch);
        return (type != Character.UNASSIGNED);
    }
    
    static boolean isLetter(int ch) {
        int type = getType(ch);
        return (((((1 << Character.UPPERCASE_LETTER) | (1 << Character.LOWERCASE_LETTER) | (1 << Character.TITLECASE_LETTER) | (1 << Character.MODIFIER_LETTER) | (1 << Character.OTHER_LETTER)) >> type) & 1) != 0);
    }
    
    static boolean isLetterOrDigit(int ch) {
        int type = getType(ch);
        return (((((1 << Character.UPPERCASE_LETTER) | (1 << Character.LOWERCASE_LETTER) | (1 << Character.TITLECASE_LETTER) | (1 << Character.MODIFIER_LETTER) | (1 << Character.OTHER_LETTER) | (1 << Character.DECIMAL_DIGIT_NUMBER)) >> type) & 1) != 0);
    }
    
    static boolean isSpaceChar(int ch) {
        int type = getType(ch);
        return (((((1 << Character.SPACE_SEPARATOR) | (1 << Character.LINE_SEPARATOR) | (1 << Character.PARAGRAPH_SEPARATOR)) >> type) & 1) != 0);
    }
    
    static boolean isJavaIdentifierStart(int ch) {
        int props = getProperties(ch);
        return ((props & 28672) >= 20480);
    }
    
    static boolean isJavaIdentifierPart(int ch) {
        int props = getProperties(ch);
        return ((props & 12288) != 0);
    }
    
    static boolean isUnicodeIdentifierStart(int ch) {
        int props = getProperties(ch);
        return ((props & 28672) == 28672);
    }
    
    static boolean isUnicodeIdentifierPart(int ch) {
        int props = getProperties(ch);
        return ((props & 4096) != 0);
    }
    
    static boolean isIdentifierIgnorable(int ch) {
        int props = getProperties(ch);
        return ((props & 28672) == 4096);
    }
    
    static int toLowerCase(int ch) {
        int mapChar = ch;
        int val = getProperties(ch);
        if ((val & 131072) != 0) {
            int offset = val << 5 >> (5 + 18);
            mapChar = ch + offset;
        }
        return mapChar;
    }
    
    static int toUpperCase(int ch) {
        int mapChar = ch;
        int val = getProperties(ch);
        if ((val & 65536) != 0) {
            int offset = val << 5 >> (5 + 18);
            mapChar = ch - offset;
        }
        return mapChar;
    }
    
    static int toTitleCase(int ch) {
        int mapChar = ch;
        int val = getProperties(ch);
        if ((val & 32768) != 0) {
            if ((val & 65536) == 0) {
                mapChar = ch + 1;
            } else if ((val & 131072) == 0) {
                mapChar = ch - 1;
            }
        } else if ((val & 65536) != 0) {
            mapChar = toUpperCase(ch);
        }
        return mapChar;
    }
    
    static int digit(int ch, int radix) {
        int value = -1;
        if (radix >= Character.MIN_RADIX && radix <= Character.MAX_RADIX) {
            int val = getProperties(ch);
            int kind = val & 31;
            if (kind == Character.DECIMAL_DIGIT_NUMBER) {
                value = ch + ((val & 992) >> 5) & 31;
            } else if ((val & 3072) == 3072) {
                value = (ch + ((val & 992) >> 5) & 31) + 10;
            }
        }
        return (value < radix) ? value : -1;
    }
    
    static int getNumericValue(int ch) {
        int val = getProperties(ch);
        int retval = -1;
        switch (val & 3072) {
        default: 
        
        case (0): 
            retval = -1;
            break;
        
        case (1024): 
            retval = ch + ((val & 992) >> 5) & 31;
            break;
        
        case (2048): 
            switch (ch) {
            case 65811: 
                retval = 40;
                break;
            
            case 65812: 
                retval = 50;
                break;
            
            case 65813: 
                retval = 60;
                break;
            
            case 65814: 
                retval = 70;
                break;
            
            case 65815: 
                retval = 80;
                break;
            
            case 65816: 
                retval = 90;
                break;
            
            case 65817: 
                retval = 100;
                break;
            
            case 65818: 
                retval = 200;
                break;
            
            case 65819: 
                retval = 300;
                break;
            
            case 65820: 
                retval = 400;
                break;
            
            case 65821: 
                retval = 500;
                break;
            
            case 65822: 
                retval = 600;
                break;
            
            case 65823: 
                retval = 700;
                break;
            
            case 65824: 
                retval = 800;
                break;
            
            case 65825: 
                retval = 900;
                break;
            
            case 65826: 
                retval = 1000;
                break;
            
            case 65827: 
                retval = 2000;
                break;
            
            case 65828: 
                retval = 3000;
                break;
            
            case 65829: 
                retval = 4000;
                break;
            
            case 65830: 
                retval = 5000;
                break;
            
            case 65831: 
                retval = 6000;
                break;
            
            case 65832: 
                retval = 7000;
                break;
            
            case 65833: 
                retval = 8000;
                break;
            
            case 65834: 
                retval = 9000;
                break;
            
            case 65835: 
                retval = 10000;
                break;
            
            case 65836: 
                retval = 20000;
                break;
            
            case 65837: 
                retval = 30000;
                break;
            
            case 65838: 
                retval = 40000;
                break;
            
            case 65839: 
                retval = 50000;
                break;
            
            case 65840: 
                retval = 60000;
                break;
            
            case 65841: 
                retval = 70000;
                break;
            
            case 65842: 
                retval = 80000;
                break;
            
            case 65843: 
                retval = 90000;
                break;
            
            case 66339: 
                retval = 50;
                break;
            
            default: 
                retval = -2;
                break;
            
            }
            break;
        
        case (3072): 
            retval = (ch + ((val & 992) >> 5) & 31) + 10;
            break;
        
        }
        return retval;
    }
    
    static boolean isWhitespace(int ch) {
        int props = getProperties(ch);
        return ((props & 28672) == 16384);
    }
    
    static byte getDirectionality(int ch) {
        int val = getProperties(ch);
        byte directionality = (byte)((val & 2013265920) >> 27);
        if (directionality == 15) {
            directionality = Character.DIRECTIONALITY_UNDEFINED;
        }
        return directionality;
    }
    
    static boolean isMirrored(int ch) {
        int props = getProperties(ch);
        return ((props & -2147483648) != 0);
    }
    static final char[] X = ("\000\001\002\003\004\004\004\005\006\007\003\003\003\003\003\003\003\003\003\003\003\003\003\003\b\t\n\003\013\003\003\003\f\rtoCharArray();
    static final char[] Y = ("\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\004\000\002\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\006\006\b\n\006\f\016\016\016\016\020\022\024\024\024\024\024\024\024\024\024\024\024\024\024\024\024\024\006\026\030\030\030\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\032\034\006\006\006\006\006\006\000\000\000\000\000\000\000\000\000\000\000\000\000\036\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"$$$$$$$$$$$$$$$$$$$$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006&&&&&\006\006\006\006\006\006\006\006\006\006\006(((\006*((((((((((((((((((((((,*\006*,\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\006\006\006\006\006\030\030\030\n\006\030\030\030\030\030\030\030\030\030\030\030\030\030.02\030.446888:222<>222\030\030\030\030\030\030\030\030\030\030\030\030\030\030\03022\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\006@@@@@@@@@@@@@@@@@@@@@@@@@@@B\006\006\006\006DDDDDDDDDDDDDFFFFFFFFFFFFFDDDDDDDDDDDDDFFFHFFFFFFFFFDDDDDDDDDDDDDFFFFFFFFFFFFFJD\006JLJLDJDDDDFFNNFFFNFFFFFDDDDDDDDDDDDDFFFFFFFFFFFFFDLDJLDDDJDDDJFFFFFFFFFFFFFDLDJDDJJ\006DDDJFFFFFFFFFFFFFDDDDDDDDDDDDDFFFFFFFFFFFFFDDDDDDDFFFFFFFFFDFFFFFFFFFFFFFDDDDDDDDDDDDDFFFFFFFFFFFFFDDDDDDDDFF\006\006DDDDDDDDDDDDPFFFFFFFFFFFFRFFFDDDDDDDDDDDDPFFFFFFFFFFFFRFFFDDDDDDDDDDDDPFFFFFFFFFFFFRFFFDDDDDDDDDDDDPFFFFFFFFFFFFRFFFDDDDDDDDDDDDPFFFFFFFFFFFFRFFF\006\006TTTTTVVVVVXXXXXZZZZZ\\\\\\\\\\").toCharArray();
    static final int[] A = new int[94];
    static final String A_DATA = "\000\u7005\000\u7005\u7800\000\000\u7005\000\u7005\u7800\000\u7800\000\u7800\000\000\030\u6800\030\000\034\u7800\000\u7800\000\000\u074b\000\u074b\000\u074b\000\u074b\000\u046b\000\u058b\000\u080b\000\u080b\000\u080b\u7800\000\000\034\000\034\000\034\000\u042b\000\u048b\000\u050b\000\u080b\000\u700a\u7800\000\u7800\000\000\030\242\u7001\242\u7001\241\u7002\241\u7002\000\u3409\000\u3409\u0800\u7005\u0800\u7005\u0800\u7005\u7800\000\u7800\000\u0800\u7005\000\034\000\u3008\000\u3008\u4000\u3006\u4000\u3006\u4000\u3006\000\u3008\000\u3008\000\u3008\u4800\u1010\u4800\u1010\u4800\u1010\u4800\u1010\u4000\u3006\u4000\u3006\000\034\000\034\u4000\u3006\u6800\034\u6800\034\u6800\034\u7800\000\000\u7001\000\u7001\000\u7002\000\u7002\000\u7002\u7800\000\000\u7001\u7800\000\u7800\000\000\u7001\u7800\000\000\u7002\000\u7001\000\031\000\u7002\000\031\u1800\u3649\u1800\u3649\u1800\u3509\u1800\u3509\u1800\u37c9\u1800\u37c9\u1800\u3689\u1800\u3689\u1800\u3549\u1800\u3549";
    static {
        {
            char[] data = A_DATA.toCharArray();
            if (!$assertionsDisabled && !(data.length == (94 * 2))) throw new AssertionError();
            int i = 0;
            int j = 0;
            while (i < (94 * 2)) {
                int entry = data[i++] << 16;
                A[j++] = entry | data[i++];
            }
        }
    }
}
