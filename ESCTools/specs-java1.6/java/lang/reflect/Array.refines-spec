// Generated by jmlspec from the .class file

// FIXME
package java.lang.reflect;

public final class Array extends java.lang.Object {


    /*@
      @   requires \elemtype(\typeof(array)) <: \type(Object);
      @   ensures \result == ((Object[])array).length;
      @ also
      @   requires \elemtype(\typeof(array)) == \type(int);
      @   ensures \result == ((int[])array).length;
      @ also
      @   requires \elemtype(\typeof(array)) == \type(byte);
      @   ensures \result == ((byte[])array).length;
	// FIXME - do the rest of the primitive types
	// Also if not an array then throw an exception - FIXME

      @*/
    //@ pure
    public static native int getLength(java.lang.Object array)
        throws java.lang.IllegalArgumentException;

    /*@
      @ public behavior
      @   requires true;
      @   signals (ArrayIndexOutOfBoundsException) index < 0 || getLength(array) <= index;
      @   signals (IllegalArgumentException) true;
      @   signals (Exception e) e instanceof ArrayIndexOutOfBoundsException ||
				e instanceof IllegalArgumentException;
      @ also public behavior
      @ requires 0 <= index && index < getLength(array);
      @ {|
      @   requires \elemtype(\typeof(array)) <: \type(Object);
      @   ensures false;
      @ also
      @   requires \elemtype(\typeof(array)) == \type(int);
      @   ensures false;
      @ also
      @   requires \elemtype(\typeof(array)) == \type(byte);
      @   ensures \result == ((byte[])array)[index];
      @ |}
	// FIXME - do the rest of the primitive types
	// Also if not an array then throw an exception - FIXME

      @ 
      @*/
    //@ pure
    public static native byte getByte(java.lang.Object array, int index)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    //@ pure
    public static native char getChar(java.lang.Object array, int index)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    //@ pure
    public static native double getDouble(java.lang.Object array, int index)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    //@ pure
    public static native float getFloat(java.lang.Object array, int index)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ public behavior
      @   requires true;
      @   signals (ArrayIndexOutOfBoundsException) index < 0 || getLength(array) <= index;
      @   signals (IllegalArgumentException) true;
      @   signals (Exception e) e instanceof ArrayIndexOutOfBoundsException ||
				e instanceof IllegalArgumentException;
      @ also public behavior
      @ requires 0 <= index && index < getLength(array);
      @ {|
      @   requires \elemtype(\typeof(array)) <: \type(Object);
      @   ensures false;
      @ also
      @   requires \elemtype(\typeof(array)) == \type(int);
      @   ensures \result == ((int[])array)[index];
      @ also
      @   requires \elemtype(\typeof(array)) == \type(byte);
      @   ensures \result == ((byte[])array)[index];
      @ |}
	// FIXME - do the rest of the primitive types
	// Also if not an array then throw an exception - FIXME

      @ 
      @*/
    //@ pure
    public static native int getInt(java.lang.Object array, int index)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    //@ pure
    public static native long getLong(java.lang.Object array, int index)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    //@ pure
    public static native short getShort(java.lang.Object array, int index)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    //@ pure
    public static native boolean getBoolean(java.lang.Object array, int index)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    public static native void setByte(java.lang.Object array, int index, byte b)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    public static native void setChar(java.lang.Object array, int index, char c)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    public static native void setDouble(java.lang.Object array, int index, double d)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    public static native void setFloat(java.lang.Object array, int index, float f)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    public static native void setInt(java.lang.Object array, int index, int i)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    public static native void setLong(java.lang.Object array, int index, long l)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    public static native void setShort(java.lang.Object array, int index, short s)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    public static native void setBoolean(java.lang.Object array, int index, boolean z)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    //@ pure
    public static java.lang.Object newInstance(java.lang.Class componentType, int length)
        throws java.lang.NegativeArraySizeException;

    /*@
      @ 
      @*/
    //@ pure
    public static java.lang.Object newInstance(java.lang.Class componentType, int[] dimensions)
        throws java.lang.IllegalArgumentException, java.lang.NegativeArraySizeException;

    /*@
      @ public behavior
      @   requires true;
      @   signals (ArrayIndexOutOfBoundsException) index < 0 || getLength(array) <= index;
      @   signals (IllegalArgumentException) true;
      @   signals (Exception e) e instanceof ArrayIndexOutOfBoundsException ||
				e instanceof IllegalArgumentException;
      @ also public behavior
      @ requires 0 <= index && index < getLength(array);
      @ {|
      @   requires \elemtype(\typeof(array)) <: \type(Object);
      @   ensures \result == ((Object[])array)[index];
      @ also
      @   requires \elemtype(\typeof(array)) == \type(int);
      @   ensures \result != null;
      @   ensures \result instanceof Integer;
      @   ensures ((Integer)\result).intValue() == ((int[])array)[index];
      @ also
      @   requires \elemtype(\typeof(array)) == \type(byte);
      @   ensures \result != null;
      @   ensures \result instanceof Byte;
      @   ensures ((Byte)\result).byteValue() == ((byte[])array)[index];
      @ |}
	// FIXME - do the rest of the primitive types
	// Also if not an array then throw an exception - FIXME

      @ 
      @*/
    //@ pure
    public static native java.lang.Object get(java.lang.Object array, int index)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;

    /*@
      @ 
      @*/
    public static native void set(java.lang.Object array, int index, java.lang.Object value)
        throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException;
}
