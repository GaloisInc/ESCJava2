// @(#)$Id: PrintStream.refines-java 2118 2006-10-20 21:28:15Z davidcok $

// Copyright (C) 2006 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.io;

/** JML's specification of PrintStream
 * @author David Cok
 * @author Gary T. Leavens
 * @author Patrice Chalin
 */
public class PrintStream extends FilterOutputStream {

    //@ model public non_null String outputText; in outputBytes;
    //@ model public boolean endsInNewLine; in outputBytes;
    //@ ghost public non_null static final String eol;

    //@ public model boolean error;

    //@ public normal_behavior
    //@   requires out != null;
    //@   ensures outputText.equals("");
    //@   ensures !endsInNewLine;
    //@   ensures out.isOpen ==> isOpen;
    //@   ensures underlyingStream == out;
    //@ pure
    public PrintStream(OutputStream out);

    //@ public normal_behavior
    //@   ensures outputText.equals("");
    //@   ensures !endsInNewLine;
    //@   ensures out.isOpen ==> isOpen;
    //@   ensures underlyingStream == out;
    //@ pure
    public PrintStream(OutputStream out, boolean autoFlush);

    //@ public normal_behavior
    //@   ensures outputText.equals("");
    //@   ensures !endsInNewLine;
    //@   ensures out.isOpen ==> isOpen;
    //@   ensures underlyingStream == out;
    //@ pure
    public PrintStream(OutputStream out, boolean autoFlush, String encoding)
        throws java.io.UnsupportedEncodingException;


    //@ public normal_behavior
    //@   requires true;
    //@   modifies outputText, endsInNewLine;
    //@   ensures endsInNewLine;
    //@   ensures outputText.equals(\old(outputText) + eol);
    public void println();

    /*@ protected normal_behavior
      @   modifies error;
      @   ensures error;
      @*/
    protected void setError();

    /*@ public normal_behavior
      @   requires !isOpen;
      @   modifies error;
      @   ensures error;
      @   ensures \result == error;
      @*/
    public boolean checkError();

    //@ public normal_behavior
    //@   requires true;
    //@   modifies outputText, endsInNewLine;
    //@   ensures outputText.equals(\old(outputText) + c);
    public void print(char c);

    //@ public normal_behavior
    //@   requires true;
    //@   modifies outputText, endsInNewLine;
    //@   ensures endsInNewLine;
    //@   ensures outputText.equals(\old(outputText) + x + eol); 
    public void println(char x); 

    //@ public normal_behavior
    //@   requires true;
    //@   modifies outputText, endsInNewLine;
    //@   ensures endsInNewLine;
    //@   ensures x != null ==> outputText.equals(\old(outputText) + x + eol);
    public void println(String x);

    //@ public normal_behavior
    //@   requires true;
    //@   modifies outputText, endsInNewLine;
    //@   ensures s != null ==> outputText.equals(\old(outputText) + s);
    public void print(String s);

    public void print(double d);

    public void println(double x);

    public void print(float f);

    public void println(float x);

    //@ public normal_behavior
    //@   requires true;
    //@   modifies outputText, endsInNewLine;
    //@   ensures endsInNewLine;
    //@   ensures (x!=null)==> outputText.equals(\old(outputText) + x.theString + eol);
    //@   ensures (x==null)==> outputText.equals(\old(outputText)+"null"+eol);
    public void println(Object x);

    //@ public normal_behavior
    //@   requires true;
    //@   modifies outputText, endsInNewLine;
    //@   ensures (obj!=null)==> outputText.equals(\old(outputText) + obj.theString);
    //@   ensures (obj==null)==> outputText.equals(\old(outputText)+"null");
    public void print(Object obj);

    //@ requires true;
    //@ modifies outputText, endsInNewLine;
    //@ ensures endsInNewLine;
    //@ ensures outputText.startsWith(\old(outputText));
    public void println(boolean x);

    public void print(boolean b);

    public void print(int i);

    //@ requires true;
    //@ modifies outputText, endsInNewLine;
    //@ ensures endsInNewLine;
    //@ ensures outputText.startsWith(\old(outputText));
    public void println(int x);

    public void print(long l);

    public void println(long x);

    /*@ also
      @ public normal_behavior
      @   requires !isOpen;
      @   modifies error;
      @   ensures error;
      @ also
      @ public exceptional_behavior
      @   modifies output, error;
      @   signals (IOException) false;
      @*/
    public void flush();

    public void print(char[] s);

    public void println(char[] x);

    public void write(int b);

    public void write(byte[] buf, int off, int len);

    /*@ also
      @ public normal_behavior
      @   requires !isOpen;
      @   modifies error;
      @   ensures error;
      @ also
      @ public exceptional_behavior
      @   modifies output, error;
      @   signals (IOException) false;
      @*/
    public void close();
}
