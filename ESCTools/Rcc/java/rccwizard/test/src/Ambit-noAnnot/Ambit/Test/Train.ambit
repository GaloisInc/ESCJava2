
(* Taking the train *)

new stationA stationB luca. 

new train. (
  stationA[
    (rec P. take money. give in train. P) |
    train[ take ticket. go out stationA. go in stationB. give out train ]
  ] |
  stationB[
    (rec P. take money. give in train. P)
  ]
) 

|

luca[
  go in stationA.
    new money. say money. ask ticket. go ticket. 
      say ticket. ask exit. go exit
  ]

--------

new A B train luca.

  A[
    train[ 
      rec T. take ready. go out A. go in B. give train. 
             take ready. go out B. go in A. give train. T
    ]
  ] |
  
  B[
  ] |
  
  luca[
    go in A. go in train. say luca. ask arrived. go out train. go out B
  ]

--------

new A B trainA trainB luca.

  A[
    trainA[ 
      rec T. wait 2.0. go out A. go in B. be trainB. 
             wait 2.0. go out B. go in A. be trainA. T
    ]
  ] |
  
  B[
  ] |
  
  luca[
    rec L. wait 3.0. go in A. go in trainA. go out trainB. go out B.
           wait 6.0. go in B. go in trainB. go out trainA. go out A. L
  ]

--------

new stationA stationB stationC trainABatA trainABatB trainBCatB trainBCatC train1 train2 train3.

  stationA[
    train1[ 
      rec T. be trainABatA. wait 2.0. go out stationA. wait 10.0. go in stationB. 
             be trainABatB. wait 2.0. go out stationB. wait 10.0. go in stationA. T]] |
  
  stationB[
    train2[
      rec T. be trainBCatB. wait 2.0. go out stationB. wait 20.0. go in stationC. 
             be trainBCatC. wait 2.0. go out stationC. wait 20.0. go in stationB. T]] |
  
  stationC[
    train3[
      rec T. be trainBCatC. wait 2.0. go out stationC. wait 30.0. go in stationB.
             be trainBCatB. wait 2.0. go out stationB. wait 30.0. go in stationC. T]] |
  
new joe.
  joe[
    go in stationA. "--- Departing from A". go in trainABatA. go out trainABatB. 
    "--- Changing at B". go in trainBCatB. go out trainBCatC. "--- Arriving at C". go out stationC] |
  
new nancy.
  nancy[
    go in stationC. "--- Departing from C". go in trainBCatC. go out trainBCatB. 
    "--- Changing at B". go in trainABatB. go out trainABatA. "--- Arriving at A". go out stationA]
    
--------

(new stationA stationB stationC trainABatA trainABatB trainBCatB trainBCatC train1 train2 train3.

  rec travelAgent. 
    give in stationA. give in trainABatA. give out trainABatB. give in trainBCatB. give out trainBCatC. 
    give out stationC. travelAgent |

  stationA[
    train1[ 
      rec T. be trainABatA. wait 2.0. go out stationA. wait 10.0. go in stationB. 
             be trainABatB. wait 2.0. go out stationB. wait 10.0. go in stationA. T
    ]
  ] |
  
  stationB[
    train2[
      rec T. be trainBCatB. wait 2.0. go out stationB. wait 20.0. go in stationC. 
             be trainBCatC. wait 2.0. go out stationC. wait 20.0. go in stationB. T
    ]
  ] |
  
  stationC[
    train3[
      rec T. be trainBCatC. wait 2.0. go out stationC. wait 30.0. go in stationB.
             be trainBCatB. wait 2.0. go out stationB. wait 30.0. go in stationC. T
    ]
  ]

) |

new passenger.
  passenger[
    ask in`stationA. ask in`trainABatA. ask out`trainABatB. ask in`trainBCatB. 
    ask out`trainBCatC. ask out`stationC. 
    go in`stationA. "--- Departing from A". go in`trainABatA. go out`trainABatB. 
    "--- Changing at B". go in`trainBCatB. go out`trainBCatC. "--- Arriving at C". go out`stationC]
    
------------------

let train(stationX stationY XYatX XYatY tripTime) =
  new moving.
    moving[ rec T.
      be XYatX. wait 2.0.
      be moving. go out stationX. wait tripTime. go in stationY. 
      be XYatY. wait 2.0. 
      be moving. go out stationY. wait tripTime. go in stationX.
      T ];

new stationA stationB stationC ABatA ABatB BCatB BCatC.

  stationA[ train(stationA stationB ABatA ABatB 10.0) ] |
  stationB[ train(stationB stationC BCatB BCatC 20.0) ] |
  stationC[ train(stationC stationB BCatC BCatB 30.0) ] |

new joe.
  joe[
    go in stationA. 
    "--- Departing from A". 
    go in ABatA. go out ABatB. 
    "--- Changing at B". 
    go in BCatB. go out BCatC. 
    "--- Arriving at C". 
    go out stationC] |

new nancy.
  nancy[
    go in stationC. 
    "--- Departing from C". 
    go in BCatC. go out BCatB. 
    "--- Changing at B". 
    go in ABatB. go out ABatA. 
    "--- Arriving at A". 
    go out stationA]

------------------

let packet(postOffice address) =
  new packet.
    packet[
      go in postOffice.
      ask inclerk. go inclerk.
      say address.
      ask route. go route];

new postOffice destination1.

(new address. packet(postOffice address)) |

postOffice[
  rec T.
    new clerk.
      give in clerk.T |
      clerk[take address. "compute route". give out clerk & out postOffice & in destination1]
  ] |
  
destination1[]

--------------

let routable(address) =
  rec R. say address. ask route. go route. R;
  
let packet(address) =
  new p. p[routable(address)];
  
new postOffice destination1.

let pickup() =
  take address. give in postOffice;
  
pickup() | new p1. packet(p1) |

let clerk(k) =
  k[take address. "compute route". give out k & out postOffice & in destination1];

postOffice[
  rec T. 
    new aClerk.
      take address. give in aClerk.T | 
      clerk(aClerk)
  ] |
  
destination1[]

-----------------------------------------------

new f arg. f[rec R. do open arg. ask x. (say x&x. R)] | arg[do in f. say in f]
