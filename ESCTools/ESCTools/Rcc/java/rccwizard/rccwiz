# Copyright 2000, 2001, Compaq Computer Corporation

#!/bin/sh -f
# rcc/Java forward annotation wizard
# Copyright (c) 1999, Compaq Computer Corporation
# Change history:
#   14 Jul 1999  rustan & flanagan  Created
#   28 Jul 1999  flanagan           Modified
#   02 Aug 1999  burrows & flanagan Converted to sh
#   31 Aug 1999  rustan & flanagan  Added warnings to "removed" pragmas
#   22 Nov 1999  rustan & flanagan  Used assumers sets
#   24 Nov 1999  rustan & flanagan  Fixed bugs
#   30 Nov 1999  steve & flanagan   changed for rcc
#   10 Jan 2000  rustan & yuanyu    Fixed arguments to "sort"
#    7 Feb 2000  rustan             Added "-annotateOnly" switch
#   19 May 2000  rustan & flanagan  New command-line interface
#   22 May 2000  rustan & flanagan  Completed new command-line interface
#   27 May 2000  rustan             Added use of -routineIndirect option
#   31 May 2000  flanagan           changed for rcc


ulimit -s 32000
VERSION="rccwiz version 1.2, Mar 13 2001"
echo ${VERSION}

COMMANDLINE="$*"

if [ "x${RCC}" = "x" -o "x${RCC_ROOT}" = "x" ]; then
  echo "Error: Must first source setup in rccjava directory"
  exit 1
fi
    
USAGE_MSG="Usage: rccwiz [-bootclasspath p] [-classpath p] [-pmnr] [-noguessnull] [-progGuesser guesser] [-libGuesser guesser] [-noreadonly] outdir programIndirectionFile [libIndirectionFile]"
    
    
##  Parse command line  #################################


if [ 2 -le $# ]; then
  if [ "x$1" = "x-bootclasspath" ]; then
    BOOTCLASSPATH="$2"
    shift
    shift
  fi
fi

if [ 2 -le $# ]; then
  if [ "x$1" = "x-classpath" ]; then
    CLASSPATH="$2"
    shift
    shift
  fi
fi

if [ "x${BOOTCLASSPATH}" = "x" ]; then
  BCL_PATH_ARG=
else
  BCL_PATH_ARG="-bootclasspath ${BOOTCLASSPATH}"
fi

# Prepend . to classpath, so that the copied (and annotated) libraries will be
# picked up appropriately.
if [ "x${CLASSPATH}" = "x" ]; then
  CL_PATH_ARG="-classpath ."
else
  CL_PATH_ARG="-classpath .:${CLASSPATH}"
fi
PATH_ARG="${BCL_PATH_ARG} ${CL_PATH_ARG}"

    
pmnr=
if [ 1 -le  $# ]; then
  if [ "x$1" = "x-pmnr" ]; then
    pmnr="-pmnr"
    shift
  fi
fi
    
noguessnull=
if [ 1 -le  $# ]; then
  if [ "x$1" = "x-noguessnull" ]; then
    noguessnull="-noguessnull"
    shift
  fi
fi
        
PROG_GUESSER=""
if [ 2 -le $# ]; then
  if [ "x$1" = "x-progGuesser" ]; then
    PROG_GUESSER="$2"
    shift
    shift
  fi
fi
    
LIB_GUESSER=""
if [ 2 -le $# ]; then
  if [ "x$1" = "x-libGuesser" ]; then
    LIB_GUESSER="$2"
    shift
    shift
  fi
fi

doreadonly="true"
if [ 1 -le $# ]; then
  if [ "x$1" = "x-noreadonly" ]; then
    doreadonly="false"
    shift
  fi
fi

if [ 2 = $# -o 3 = $# ]; then
  OUTDIR="$1"
  PROG_INDIRECT_FILE="$2"
  if [ 3 = $# ]; then
    LIB_INDIRECT_FILE="$3"
  else
    LIB_INDIRECT_FILE=""
  fi
    else
  echo ${USAGE_MSG}
  exit 1
fi
    
##  Configuration  #################################

if [ "$RCC_FLAGS" = "" ]; then
  RCC_FLAGS="-warn ThreadLocal  -nowarn SharedArray -chl -ihl -ihnl -dts -suggest"
fi  

if [ "$RCC_FLAGS_FINAL_RUN" = "" ]; then
  RCC_FLAGS_FINAL_RUN="-warn ThreadLocal -nowarn SharedArray -chl -ihl -ihnl -dts -suggest"
fi

    
COPY_LOADED="${JAVA} -classpath ${RCC_CLASSPATH} javafe.CopyLoaded"
ANNOTATION_VISITOR="${JAVA} -classpath ${RCC_CLASSPATH} rccwizard.Main -noCautions ${pmnr} ${noguessnull}"
ANNOTATION_INSERTER="${JAVA} -classpath ${RCC_CLASSPATH} escwizard.AnnotationInserter"
ANNOTATION_LINKS="${JAVA} -classpath ${RCC_CLASSPATH} rccwizard.AnnLinks"
JAVA2HTML="${JAVAFE_ROOT}/java/tohtml/tool2html"
      
##  Sanity checks  #################################

if [ -e "${OUTDIR}" ]; then
  echo "rccwiz: Error: outdir ${OUTDIR} already exists"
  exit 1
fi

mkdir ${OUTDIR}
if [ $? != 0 ]; then
  echo "rccwiz: Error: could not create outdir ${OUTDIR}"
  exit 1
fi
    
mkdir ${OUTDIR}/src-original
mkdir ${OUTDIR}/src-annotated
mkdir ${OUTDIR}/src-annotated-ro
mkdir ${OUTDIR}/log
mkdir ${OUTDIR}/html

OUTDIR=`expandpath $OUTDIR`
LOGDIR="${OUTDIR}/log"
export LOGDIR
LOGFILE="${LOGDIR}/rccwiz.log"
COORDFILE="${LOGDIR}/coordinator.out"



if [ ! -e "${PROG_INDIRECT_FILE}" ]; then
  echo "rccwiz: indirection file ${PROG_INDIRECT_FILE} does not exist" |
    tee -a ${LOGFILE}
  exit 1
fi
cp "${PROG_INDIRECT_FILE}" "${LOGDIR}/progIndirectFiles-given"

if [ "x${LIB_INDIRECT_FILE}" != "x" ]; then
  echo "rccwiz: library path has been deprecated"
  exit 1
fi

GIVEN_SOURCE_FILES_ARG="-f ${LOGDIR}/progIndirectFiles-given"
PROG_INDIRECT_FILE="${LOGDIR}/progIndirectFiles"
LIB_INDIRECT_FILE="${LOGDIR}/libIndirectFiles"

echo "##########################################################" >> ${LOGFILE}
echo "${VERSION}" >> ${LOGFILE}
echo "`date`: Start" >> ${LOGFILE}
echo "Command-line arguments: ${COMMANDLINE}" >> ${LOGFILE}
echo "The machine is: `hostname`" >> ${LOGFILE}
printenv | egrep "RCC|CLASSPATH" | xargs echo Environment variables: >> ${LOGFILE}

# Copy program and library source files
echo "`date`: Copying files..." | tee -a ${LOGFILE}
${COPY_LOADED} ${PATH_ARG} -outdir ${OUTDIR}/src-original \
    -outProgIndirect ${PROG_INDIRECT_FILE} -outLibIndirect ${LIB_INDIRECT_FILE} \
    ${GIVEN_SOURCE_FILES_ARG} >> ${LOGFILE} 2>&1
if [ $? != 0 ]; then
  echo "`date`: Failed to run CopyLoaded" | tee -a ${LOGFILE}
  exit 1
fi
    

# After the following "cd", we must only do relative "cd" commands
cd ${OUTDIR}

iter=0
if [ "$doreadonly" = "true" ]; then
  PHASE_GUESSER="-readonly"
  PHASE="readonly annotations"
  PHASE_DIR_ORIG_PARSE=src-original
  PHASE_DIR_ORIG_ANNOTATE=src-original
  PHASE_DIR_DEST=src-annotated-ro
  PHASE_DIR_DEST_INIT=src-annotated-ro-init
  PHASE_REMOVE_ANNOTATIONS="true"
else
  PHASE_GUESSER=""
  PHASE="locking annotations, no readonly"
  PHASE_DIR_ORIG_PARSE=src-original
  PHASE_DIR_ORIG_ANNOTATE=src-original
  PHASE_DIR_DEST=src-annotated
  PHASE_DIR_DEST_INIT=
  PHASE_REMOVE_ANNOTATIONS="false"
fi


while true; do

  # Create candidate annotation set
  echo "`date`: Creating candidate annotation set for ${PHASE}..." | tee -a ${LOGFILE}
    
  cd ${PHASE_DIR_ORIG_PARSE}
    
  echo running: ${ANNOTATION_VISITOR} ${PATH_ARG} ${PHASE_GUESSER} -f ${PROG_INDIRECT_FILE} | tee -a ${LOGFILE}
  # throws out Cautions now- 2/15/01
  if ${ANNOTATION_VISITOR} ${PATH_ARG} ${PHASE_GUESSER} -f ${PROG_INDIRECT_FILE} > ${LOGDIR}/annotations.instr; then
    : nothing
  else
    echo "rccwiz: Error: failed to run annotation visitor for program files (${LOGDIR}/annotations.instr)" |
      tee -a ${LOGFILE}
    exit 1
  fi
    
#  if ${ANNOTATION_VISITOR} ${PATH_ARG}  ${PHASE_GUESSER} ${LIB_GUESSER} -f ${LIB_INDIRECT_FILE} >> ${LOGDIR}/annotations.instr; then
#    : nothing
# else
#    echo "rccwiz: Error: failed to run annotation visitor for library files (${LOGDIR}/annotations.instr)" |
#      tee -a ${LOGFILE}
#    exit 1
#  fi

  cd ../${PHASE_DIR_ORIG_ANNOTATE}
  echo "`date`: Inserting annotations..." | tee -a ${LOGFILE}
    
  # create ...wizardUpdate.tmp files containing the annotations
  if ${ANNOTATION_INSERTER} ${LOGDIR}/annotations.instr -f ${PROG_INDIRECT_FILE} -f ${LIB_INDIRECT_FILE}; then
    : nothing
  else
    echo "rccwiz: Error: failed to insert initial annotations (${LOGDIR}/annotations.instr)" |
      tee -a ${LOGFILE}
    exit 1
  fi
    
  # Create the directory structure in src-annotated
  for f in `find . -type d`; do
    mkdir -p ../${PHASE_DIR_DEST}/${f}
  done
    
  # Move the annotated files into src-annotated
  for f in `cat ${PROG_INDIRECT_FILE} ${LIB_INDIRECT_FILE}`; do
    if [ -e "${f}.wizardUpdate.tmp" ]; then
      mv "${f}.wizardUpdate.tmp" "../${PHASE_DIR_DEST}/${f}"
    else
      cp "${f}" "../${PHASE_DIR_DEST}/${f}"
    fi
  done
    
  echo "`date`: Annotation completed" |
    tee -a ${LOGDIR}/annotation.checkpoint ${LOGFILE}
    
  cd ..
    
  if [ "x$PHASE_DIR_DEST_INIT" != "x" ]; then
     cp -r ${PHASE_DIR_DEST} ${PHASE_DIR_DEST_INIT}
  fi
    
  ##  Iterative part  #################################

  cd ${PHASE_DIR_DEST}
  echo > "${LOGDIR}/assocdecls.txt"      
  while true; do
    echo "`date`: Iteration ${iter} " | tee -a ${LOGFILE}
    
    cntProgAnn="`cat ${PROG_INDIRECT_FILE} | xargs cat | ${RCC_ROOT}/java/rcc/getAllPragmas.lim | wc -l`"
    cntLibAnn="`cat ${LIB_INDIRECT_FILE} | xargs cat | ${RCC_ROOT}/java/rcc/getAllPragmas.lim | wc -l`"
    
    # run rccjava on each of filesToCheck
    RCCOUT=${LOGDIR}/rccjava.${iter}.out
    echo "`date`: rccjava run ${iter}" | tee ${RCCOUT} >> ${LOGFILE}
    
    rccjavaCommand="${RCC} ${PATH_ARG} ${RCC_FLAGS} -ignoreAnnFile ${LOGDIR}/assocdecls.txt -f ${PROG_INDIRECT_FILE}"
    echo Calling: ${rccjavaCommand} | tee -a ${RCCOUT} >> ${LOGFILE}
    
    ${rccjavaCommand} >> ${RCCOUT} 2>&1
    if [ $? != 0 ]; then
      echo "`date`: Failed to run rccjava" |
      tee -a ${RCCOUT} ${LOGFILE}
    exit 1
  fi
    
  cat ${RCCOUT} >> ${COORDFILE}

  echo "`date`: rccjava finished" | tee -a ${RCCOUT} >> ${LOGFILE}
    
  grep "s]  passed" ${RCCOUT} | wc -l |
    xargs echo Passed: >> ${LOGFILE}
  grep "s]  failed" ${RCCOUT} | wc -l |
    xargs echo Failed: >> ${LOGFILE}
  grep "s]  skipped" ${RCCOUT} | wc -l |
    xargs echo Skipped: >> ${LOGFILE}
  grep "s]  timed out" ${RCCOUT} | wc -l |
    xargs echo Timed out: >> ${LOGFILE}
  grep "Warning:" ${RCCOUT} | wc -l |
    xargs echo Warnings: >> ${LOGFILE}
  grep "Error:" ${RCCOUT} | wc -l |
    xargs echo Errors: >> ${LOGFILE}
  grep "Fatal error:" ${RCCOUT} | wc  -l |
    xargs echo Fatal errors: >> ${LOGFILE}
    
  grep "^Fatal error:" ${RCCOUT}
  if [ $? = 0 ]; then
    echo "rccwiz: Error: rccjava returned fatal error" | tee -a ${LOGFILE}
    exit 1
  fi
    
  ${RCC_ROOT}/java/rccwizard/GetAssocDecls.perl \
    < ${RCCOUT} |
    sort -u -k 1,1 -k 2,2n -k 3,3nr > "${LOGDIR}/assocdecls.${iter}.txt"
    
  cat "${LOGDIR}/assocdecls.${iter}.txt" | wc -l |
    xargs echo "Unique associated declarations:" >> ${LOGFILE}

  cat "${LOGDIR}/assocdecls.txt" > "${LOGDIR}/assocdecls.old.txt"
  cat "${LOGDIR}/assocdecls.old.txt" \
      "${LOGDIR}/assocdecls.${iter}.txt" |\
      sort | uniq > "${LOGDIR}/assocdecls.txt"
  diff "${LOGDIR}/assocdecls.old.txt" "${LOGDIR}/assocdecls.txt" > \
	${LOGDIR}/filesToCheck.txt 

  iter=`expr $iter + 1`
  if [ ! -s "${LOGDIR}/filesToCheck.txt" ]; then
    break
  fi
    done
 
  if [ "${PHASE_REMOVE_ANNOTATIONS}" = "true" ]; then  
    rm -f "${LOGDIR}/annremoved.txt"
    for f in `cat ${PROG_INDIRECT_FILE} ${LIB_INDIRECT_FILE}`; do
      ${RCC_ROOT}/java/rccwizard/AnnotationRemover.perl $f \
        < "${LOGDIR}/assocdecls.txt" \
        >> "${LOGDIR}/annremoved.txt"
      if [ $? = 2 ]; then
        echo "`date`: Failed to run annotation remover" | tee -a ${LOGFILE}
        exit 1
	fi
    done
  fi

  echo "`date`, Reached fixpoint after ${iter} iterations" | tee -a ${LOGFILE}
  cd ..
    
  if [ "x${PHASE_GUESSER}" = "x-readonly" ]; then
    PHASE_GUESSER=""
    PHASE="locking annotations"
    PHASE_DIR_ORIG_PARSE=src-annotated-ro
    PHASE_DIR_ORIG_ANNOTATE=src-annotated-ro-init
    PHASE_DIR_DEST=src-annotated
    PHASE_DIR_DEST_INIT=
    PHASE_REMOVE_ANNOTATIONS="false"
  else
    break;
  fi
done
    
## ----------- Compute AnnLinks

echo "`date`: Computing Annotation links" | tee -a ${LOGFILE}

    
cd src-annotated

echo running: ${ANNOTATION_LINKS} ${PATH_ARG} -f ${PROG_INDIRECT_FILE}
if ${ANNOTATION_LINKS} ${PATH_ARG} -f ${PROG_INDIRECT_FILE}\
  2>&1 >${LOGDIR}/annlinkfile.tmp.txt; then
  : nothing
else
  echo "Failed to run AnnLinks for ${PROG_INDIRECT_FILE}"
  tail -n10 ${LOGDIR}/annlinkfile.tmp.txt
  exit 1
fi    

grep "^WarnDecl\|^AnnText\|^DeclName\|^DeclAnn" < ${LOGDIR}/annlinkfile.tmp.txt > ${LOGDIR}/annlinkfile.txt

# Convert to HTML
 
RCCOUT=${LOGDIR}/rccjava.final.out
echo "`date`: Final rccjava run" | tee ${RCCOUT} | tee -a ${LOGFILE}
rccjavaCommand="${RCC}  ${PATH_ARG} ${RCC_FLAGS_FINAL_RUN} -ignoreAnnFile ${LOGDIR}/assocdecls.txt  -f ${PROG_INDIRECT_FILE}"
echo Calling: ${rccjavaCommand} | tee -a ${RCCOUT} >> ${LOGFILE}
${rccjavaCommand} >> ${RCCOUT} 2>&1
if [ $? != 0 ]; then
  echo "`date`: Failed to run rccjava" | tee -a ${RCCOUT} ${LOGFILE}
  exit 1
fi

echo "`date`: rccjava finished" | tee -a ${RCCOUT} | tee -a ${LOGFILE}
rm -f "${LOGDIR}/annremoved.txt"
for f in `cat ${PROG_INDIRECT_FILE} ${LIB_INDIRECT_FILE}`; do
  ${RCC_ROOT}/java/rccwizard/AnnotationRemover.perl $f \
    < "${LOGDIR}/assocdecls.txt" \
    >> "${LOGDIR}/annremoved.txt"
  if [ $? = 2 ]; then
    echo "`date`: Failed to run annotation remover" | tee -a ${LOGFILE}
    exit 1
  fi
done

echo "`date`: Calling tool2html" | tee -a ${LOGFILE}
echo Calling: TOOL_CLASSPATH="${RCC_CLASSPATH}" PATH_ARG="${PATH_ARG}" \
    ${JAVA2HTML} ${RCCOUT} . ../html '#' ${PROG_INDIRECT_FILE} >> ${LOGFILE}
TOOL_CLASSPATH="${RCC_CLASSPATH}" PATH_ARG="${PATH_ARG}" \
    ${JAVA2HTML} ${RCCOUT} . ../html '#' ${PROG_INDIRECT_FILE} >> ${LOGFILE} 2>&1

cd ..


# All done

echo "`date`: Done" | tee -a ${LOGFILE}
exit 0

