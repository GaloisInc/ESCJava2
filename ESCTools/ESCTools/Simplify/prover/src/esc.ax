;;; -*- lisp -*-

(FORALL (m i x)
  (PATS (select (store m i x) i))
  (EQ (select (store m i x) i) x))

(FORALL (m i v j)
  (PATS (select (store m i v) j) PROMOTE)
  (OR 
;   (LBL SS1
     (EQ i j)
;     )
;   (LBL SS2
     (EQ (select (store m i v) j)
	 (select m j))
;     )
   )
  )

;; Why wasn't this an error?
(FORALL (m i n) 
  (PATS (NUMBER (ADDR (SUBARRAY m i n)) 0))
  (EQ (NUMBER (ADDR (SUBARRAY m i n)) 0) n))

(FORALL (m i n j)
  (PATS (select (SUBARRAY m i n) j))
  (EQ (select (SUBARRAY m i n) j) (select m (+ i j))))

(FORALL (m i x)
  (PATS (ADDR (store m i x)))
  (EQ (ADDR (store m i x)) (ADDR m)))

(FORALL (m i n m2)
  (PATS (ADDR (storeSub m i n m2)))
  (EQ (ADDR (storeSub m i n m2)) (ADDR m)))

(FORALL (m r)
  (PATS (MPAT (ADDR (select m r))
	      (CONCVARSYM m)))
  (IMPLIES
   (AND
    (EQ (CONCVARSYM m) |@true|)
    (EQ (SUBTYPE1 (TYPECODE r) |REFANY.TYPECODE|) |@true|)
    (NEQ (TYPECODE r) |ROOT.TYPECODE|)
    )
   (EQ (ADDR (select m r)) r)))

(FORALL (m i v)
  (PATS (MPAT (CONCVARSYM m) (store m i v)))
  (IMPLIES (EQ (CONCVARSYM m) |@true|)
	   (EQ (CONCVARSYM (store m i v)) |@true|)))

(FORALL (m i j)
  (PATS (NUMBER (ADDR (select m i)) j))
  (IMPLIES
   (EQ (|Is$ORDINAL| i) |@true|)
   (EQ (NUMBER (ADDR (select m i)) j)
       (NUMBER (ADDR m) (+ j 1)))))


(FORALL (r)
  (IMPLIES
   (EQ (|Is$ROOT| r) |@true|)
   (EQ (|Is$REFANY| r) |@true|)))

(FORALL (v i)
  (PATS (select (mapFill v) i))
  (EQ (select (mapFill v) i) v))

(FORALL (m i)
  (PATS (NUMBER m i))
  (>= (NUMBER m i) 0))

(FORALL (i t)
  (PATS (ORD (VAL i t)))
  (EQ (ORD (VAL i t)) i))

;; This seemingly liberal trigger is necessary to establish the function
;; ORD is injective.
(FORALL (i)
  (PATS (ORD i))
  (EQ (VAL (ORD i) (TYPECODE i)) i))

(FORALL (x tc)
  (PATS (NARROW x tc))
  (IMPLIES
   (EQ (SUBTYPE (TYPECODE x) tc) |@true|)
   (EQ (NARROW x tc) x)))

;; Rules about NEW
(FORALL (ao ll virg tc pos)
  (PATS (NEW ao ll virg tc pos))
  (NEQ (select ao (NEW ao ll virg tc pos)) |@true|)
  )
(FORALL (ao ll virg tc pos)
  (PATS (NEW ao ll virg tc pos))
  (NEQ (MEMBER (NEW ao ll virg tc pos) ll) |@true|))

(FORALL (ao ll virg tc pos)
  (PATS (NEW ao ll virg tc pos))
  (EQ (select virg (NEW ao ll virg tc pos)) |@true|)
  )
(FORALL (ao ll virg tc pos)
  (PATS (NEW ao ll virg tc pos))
  (EQ (TYPECODE (NEW ao ll virg tc pos)) tc))
(FORALL (ao ll virg tc pos)
  (PATS (NEW ao ll virg tc pos))
  (NEQ (NEW ao ll virg tc pos) |$NIL|))

;; Subtype...
(ORDER SUBTYPE_STRICT SUBTYPE)

;;-----------------------------------
;; Def of DCL rule.
(FORALL (x al)
  (PATS (MPAT (|Is$REFANY| x) (|Is$DCL| x al)))
  (IMPLIES
   (AND
    (EQ (|Is$REFANY| x) |@true|)
    (EQ (|Is$DCL| x al) |@true|)
    )
   (EQ (select al x) |@true|)))

;; Def of NVIRG rule.
(FORALL (x v)
  (PATS (MPAT (|Is$REFANY| x) (|Is$NVIRG| x v)))
  (IMPLIES
   (AND
    (EQ (|Is$REFANY| x) |@true|)
    (EQ (|Is$NVIRG| x v) |@true|)
    )
   (NEQ (select v x) |@true|)))

;; Preservation through SUCCEEDS...

;; ...of Is$DCL...
(FORALL (x al0 v0 al1 v1)
  (PATS (MPAT (|Is$DCL| x al0) (SUCCEEDS al1 v1 al0 v0)))
  (IMPLIES
   (AND (EQ (|Is$DCL| x al0) |@true|)
	(EQ (SUCCEEDS al1 v1 al0 v0) |@true|))
   (EQ (|Is$DCL| x al1) |@true|)
   ))

;; ...of Is$DCLOSED...
(FORALL (f al0 v0 al1 v1)
  (PATS (MPAT (|Is$DCLOSED| f al0) (SUCCEEDS al1 v1 al0 v0)))
  (IMPLIES
   (AND (EQ (|Is$DCLOSED| f al0) |@true|)
	(EQ (SUCCEEDS al1 v1 al0 v0) |@true|))
   (EQ (|Is$DCLOSED| f al1) |@true|)
   ))


;; ...of Is$NVIRG...
(FORALL (x al0 v0 al1 v1)
  (PATS (MPAT (|Is$NVIRG| x v0) (SUCCEEDS al1 v1 al0 v0)))
  (IMPLIES
   (AND (EQ (|Is$NVIRG| x v0) |@true|)
	(EQ (SUCCEEDS al1 v1 al0 v0) |@true|))
   (EQ (|Is$NVIRG| x v1) |@true|)
   ))

;; ...and of Is$VCONSISTENT.
(FORALL (f al0 v0 al1 v1)
  (PATS (MPAT (|Is$VCONSISTENT| f al0 v0) (SUCCEEDS al1 v1 al0 v0)))
  (IMPLIES
   (AND (EQ (|Is$VCONSISTENT| f al0 v0) |@true|)
	(EQ (SUCCEEDS al1 v1 al0 v0) |@true|))
   (EQ (|Is$VCONSISTENT| f al1 v1) |@true|)
   ))

;;-----------------------------------
;; Is$DCL select-of-store rule.
(FORALL (x al y)
  (PATS (|Is$DCL| x (store al y |@true|)))
  (IMPLIES (AND
	    (EQ (|Is$REFANY| x) |@true|)
	    (EQ (|Is$DCL| x (store al y |@true|)) |@true|)
	    )
	   (OR (EQ x y)
	       (EQ (|Is$DCL| x al) |@true|))))

;;-----------------------------------

;; Subtype1 implies subtype
(FORALL (tc1 tc2) 
  (PATS (SUBTYPE1 tc1 tc2))
  (IMPLIES (EQ (SUBTYPE1 tc1 tc2) |@true|)
	   (EQ (SUBTYPE tc1 tc2) |@true|)))

;; Necessary to make type distinctions work.
(FORALL (x)
  (PATS (TYPECODE x))
  (EQ (SUBTYPE (TYPECODE x) (TYPECODE x)) |@true|))

;; The incomparable type rule (Jim Saxe version...yay!)
(FORALL (tc1 tc2 tc3)
  (PATS (MPAT (SUBTYPE1 tc2 tc1) (SUBTYPE tc3 tc2)))
  (IMPLIES
   (AND
    (EQ (SUBTYPE1 tc2 tc1) |@true|)
    (EQ (SUBTYPE tc3 tc2) |@true|)
    (NEQ tc3 (TYPECODE |$NIL|))
    )
   (EQ (ONESTEP tc1 tc3) tc2)
   ))

;;; Some facts about NULL.
(EQ (TYPECODE |$NIL|) |NULL.TYPECODE|)

(FORALL (x) 
  (PATS (NEQ x |$NIL|))
  (IMPLIES (NEQ x |$NIL|) (NEQ (TYPECODE x) |NULL.TYPECODE|)))

;; Ordinals and refs are distinct
(FORALL (x)
  (PATS (MPAT (SUBTYPE (TYPECODE x) |REFANY.TYPECODE|)
	      (|Is$ORDINAL| x)))
  (OR
   (NEQ (SUBTYPE (TYPECODE x) |REFANY.TYPECODE|) |@true|)
   (NEQ (|Is$ORDINAL| x) |@true|))
  )

;; INTEGER are MATHINTs; MATHINTs are ordinals.
(FORALL (x)
  (PATS (|Is$INTEGER| x))
  (IMPLIES (EQ (|Is$INTEGER| x) |@true|)
	   (EQ (|Is$MATHINT| x) |@true|)))
(FORALL (x)
  (PATS (|Is$MATHINT| x))
  (IMPLIES (EQ (|Is$MATHINT| x) |@true|)
	   (EQ (|Is$ORDINAL| x) |@true|)))


;;; Definitions of MAX and MIN.
(FORALL (a b)
  (PATS (MAX a b))
  (>= (MAX a b) a))
(FORALL (a b)
  (PATS (MAX a b))
  (>= (MAX a b) b))
(FORALL (a b)
  (PATS (MAX a b))
  (OR (EQ (MAX a b) a) (EQ (MAX a b) b)))

(FORALL (a b)
  (PATS (MIN a b))
  (<= (MIN a b) a))
(FORALL (a b)
  (PATS (MIN a b))
  (<= (MIN a b) b))
(FORALL (a b)
  (PATS (MIN a b))
  (OR (EQ (MIN a b) a) (EQ (MIN a b) b)))


;; MUT_LT is a partial order used for mutex lock order.

;; MUT_LT Irreflexive...
(FORALL (x)
  (PATS (MUT_LT x x))
  (NEQ (MUT_LT x x) |@true|))

;; MUT_LT Anti-symmetric...
(FORALL (x y)
  (PATS (MPAT (MUT_LT x y) (MUT_LT y x)))
  (OR (NEQ (MUT_LT x y) |@true|) (NEQ (MUT_LT y x) |@true|)))

;; MUT_LT Transitive.
(FORALL (x y z)
  (PATS (MPAT (MUT_LT x y) (MUT_LT y z)))
  (OR (NEQ (MUT_LT x y) |@true|) 
      (NEQ (MUT_LT y z) |@true|) (EQ (MUT_LT x z) |@true|)))

;; Other of MUT_LT...

;; MUT_LE
(FORALL (a b)
  (PATS (MUT_LE a b))
  (IFF (EQ (MUT_LE a b) |@true|) (OR (EQ a b) (EQ (MUT_LT a b) |@true|))))

;; MUT_GE
(FORALL (a b)
  (PATS (MUT_GE a b))
  (EQ (MUT_GE a b) (MUT_LE b a)))

;; MUT_GT
(FORALL (a b)
  (PATS (MUT_GT a b))
  (EQ (MUT_GT a b) (MUT_LT b a)))

;;; Manipulation of locking level sets.

;; MEMBER 1
(FORALL (x s)
  (PATS (MEMBER x (INSERT s x)))
  (EQ (MEMBER x (INSERT s x)) |@true|))

;; MEMBER 2
(FORALL (x y s) 
  (PATS (MEMBER x (INSERT s y)))
  (IMPLIES (NEQ x y) (EQ (MEMBER x (INSERT s y)) (MEMBER x s))))

;; DELETE 1
(FORALL (x s) 
  (PATS (DELETE s x))
  (IMPLIES (NEQ (MEMBER x s) |@true|) (EQ (DELETE s x) s)))

;; DELETE 2
(FORALL (x s) 
  (PATS (DELETE (INSERT s x) x))
  (EQ (DELETE (INSERT s x) x) (DELETE s x)))

;; DELETE 3
(FORALL (x y s) 
  (PATS (DELETE (INSERT s y) x))
  (IMPLIES (NEQ x y) (EQ (DELETE (INSERT s y) x) (INSERT (DELETE s x) y))))

;; sup 1
(FORALL (s) (PATS (sup s)) (EQ (MEMBER (sup s) s) |@true|))

;; sup 2
(FORALL (s x)
  (PATS (MEMBER x s))
  (IMPLIES (EQ (MEMBER x s) |@true|)  (EQ (MUT_LE x (sup s)) |@true|)))

;; sup 3
(FORALL (s x)
  (PATS (sup (INSERT s x)))
  (IMPLIES (EQ (MUT_LT (sup s) x) |@true|) (EQ (sup (INSERT s x)) x)))

(FORALL (m i n m2 j)
  (PATS (select (storeSub m i n m2) j))
  (AND (OR (>= j i)
	   (EQ (select (storeSub m i n m2) j)
	       (select m j)))
       (OR (< j (+ i n))
	   (EQ (select (storeSub m i n m2) j)
	       (select m j)))
       (OR (< j i)
	   (>= j (+ i n))
	   (EQ (select (storeSub m i n m2) j)
	       (select m2 (- j i))))
       (OR (EQ (select (storeSub m i n m2) j)
	       (select m j))
	   (EQ (select (storeSub m i n m2) j)
	       (select m2 (- j i)))))
	)

;; Axioms about reachability.

;; A1f (one-hop forward)
(FORALL (u v l x)
  (PATS (REACH u v l x))
  (IMPLIES (EQ (REACH u v l x) |@true|)
	   (OR (EQ u v)
	       (AND (NEQ u x)
		    (EQ (REACH (select l u) v l x) |@true|)))))

;; A1r1 (one-hop reverse1)
(FORALL (u u l x)
  (PATS (REACH u u l x))
  (EQ (REACH u u l x) |@true|))
;; A1r2 (one-hop reverse2)
(FORALL (u v l x)
  (PATS (REACH (select l u) v l x))
  (IMPLIES 
   (AND (NEQ u x)
	(EQ (REACH (select l u) v l x) |@true|)
	)
   (EQ (REACH u v l x) |@true|)
   ))

;; A2 (transitivity)
(FORALL (u v w l x)
  (PATS (MPAT (REACH u v l x) (REACH v w l x)))
  (IMPLIES
   (AND 
    (EQ (REACH u v l x) |@true|)
    (EQ (REACH v w l x) |@true|)
    )
   (EQ (REACH u w l x) |@true|)))

;; A3 (select-first)
(FORALL (u v l x)
 (PATS (REACH u v l x))
  (IMPLIES
   (EQ (REACH u v l x) |@true|)
   (EQ (REACH u v l v) |@true|)))

;; A4 (exclude-transitivity)
(FORALL (u x y z l)
  (PATS (MPAT (REACH u x l y) (REACH u y l z)))
  (IMPLIES
   (AND
    (EQ (REACH u x l y) |@true|)
    (EQ (REACH u y l z) |@true|)
    )
   (EQ (REACH u x l z) |@true|)))

;; A5 (almost-total)
(FORALL (u x y l)
  (PATS (REACH u x l y))
  (IMPLIES
   (OR
    (EQ (REACH u x l x) |@true|)
    (EQ (REACH u y l y) |@true|)
    )
   (OR
    (EQ (REACH u x l y) |@true|)
    (EQ (REACH u y l x) |@true|)
    )))

;; A6 ()
(FORALL (u x y z l)
  (PATS (MPAT (REACH u x l y) (REACH u y l z)))
  (IMPLIES
   (AND
    (EQ (REACH u x l y) |@true|)
    (EQ (REACH u y l z) |@true|)
    )
   (EQ (REACH x y l z) |@true|)))

;; A7 ()
(FORALL (u v l)
  (PATS (REACH (select l u) v l v))
  (IMPLIES
   (EQ (REACH (select l u) v l v) |@true|)
   (EQ (REACH (select l u) v l u) |@true|)))

;; A8 ()
(FORALL (u v l x p q)
  (PATS (MPAT (REACH u v l x) (REACH u v l p) (store l p q)))
  (IMPLIES
   (AND (EQ (REACH u v l x) |@true|)
	(EQ (REACH u v l p) |@true|))
   (AND (EQ (REACH u v (store l p q) x) |@true|)
	(EQ (REACH u v (store l p q) p) |@true|))))

;; The following are reachability-related...

;; This enables for preservation of validity in t80.
;; It seems like it ought to be a lemma.  Maybe we can put it in an
;; interface...
(FORALL (s alloc t l x)
  (PATS (MPAT (|Is$DCL| s ALLOCATED)
	      (REACH s t l x)))
  (IMPLIES
   (AND
    (EQ (|Is$DCL| s ALLOCATED) |@true|)
    (EQ (REACH s t l x) |@true|)
    )
   (EQ (|Is$DCL| t ALLOCATED) |@true|)))

;; This is kind of the converse of the above.  It came up in "Filter.Try", in
;; showing that some of the modtargets possibilities didn't have to be
;; considered.  I hope there's some other way of doing it. 
(FORALL (s t alloc l x)
  (PATS (MPAT (REACH s t l x) (NEQ (select alloc s) |@true|)))
  (IMPLIES
   (AND
    (NEQ (select alloc s) |@true|)
    (EQ (select alloc t) |@true|)
    )
   (NEQ (REACH s t l x) |@true|)
   ))

;; A fact about NIL:
(FORALL (s l x)
  (PATS (REACH |$NIL| s l x))
  (IMPLIES
   (EQ (REACH |$NIL| s l x) |@true|)
   (EQ s |$NIL|)))

	 
;; CONCAT, used by built-in spec of Text.Cat.
(FORALL (m1 m2)
  (PATS (NUMBER (ADDR (CONCAT m1 m2)) 0))
  (EQ (NUMBER (ADDR (CONCAT m1 m2)) 0) (+ (NUMBER m1 0) (NUMBER m2 0))))

(FORALL (m1 m2 i)
  (PATS (select (CONCAT m1 m2) i))
  (AND (OR (NOT (< i (NUMBER m1 0)))
	   (EQ (select (CONCAT m1 m2) i) (select m1 i)))
       (OR (NOT (>= i (NUMBER m1 0)))
	   (EQ (select (CONCAT m1 m2) i)
	       (select m2 (- i (NUMBER m1 0)))))))

;;; Integer arithmetic operations.

(FORALL (x y)
  (PATS (DIV x y))
  (EQ (+ (MOD x y) (* y (DIV x y))) x))

(FORALL (x y)
  (PATS (MOD x y))
  (IMPLIES (> y 0) (<= 0 (MOD x y))))
(FORALL (x y)
  (PATS (MOD x y))
  (IMPLIES (> y 0) (< (MOD x y) y)))
(FORALL (x y)
  (PATS (MOD x y))
  (IMPLIES (< y 0) (< y (MOD x y))))
(FORALL (x y)
  (PATS (MOD x y))
  (IMPLIES (< y 0) (<= (MOD x y) 0)))
(FORALL (x y)
  (PATS (MOD (+ x y) y))
  (EQ (MOD (+ x y) y) (MOD x y)))
(FORALL (x y)
  (PATS (MOD (+ y x) y))
  (EQ (MOD (+ y x) y) (MOD x y)))
(FORALL (x y)
  (PATS (MOD (- x y) y))
  (EQ (MOD (+ y x) y) (MOD x y)))

;; Rules about operations on REAL's.

(FORALL (r1 r2)
  (PATS (|R<=| r1 r2))
  (IMPLIES (EQ (|R<=| r1 r2) |@true|)
	   (OR (EQ (|R<| r1 r2) |@true|) (EQ r1 r2))))
(FORALL (r1 r2)
  (PATS (|R<| r1 r2))
  (IMPLIES (EQ (|R<| r1 r2) |@true|) (EQ (|R<=| r1 r2) |@true|)))
(FORALL (r1 r2)
  (PATS (|R>=| r1 r2))
  (IMPLIES (EQ (|R>=| r1 r2) |@true|)
	   (OR (EQ (|R>| r1 r2) |@true|) (EQ r1 r2))))
(FORALL (r1 r2)
  (PATS (|R>| r1 r2))
  (IMPLIES (EQ (|R>| r1 r2) |@true|) (OR (EQ (|R>=| r1 r2) |@true|))))

(FORALL (r)
  (PATS (|R*| r 0.0D0))
  (EQ (|R*| r 0.0D0) 0.0D0))
(FORALL (r)
  (PATS (|R*| 0.0D0 r))
  (EQ (|R*| 0.0D0 r) 0.0D0))
(FORALL (r1 r2)
  (PATS (|R*| r1 r2))
  (IMPLIES (OR (AND (EQ (|R>=| r1 0.0D0) |@true|)
		    (EQ (|R>=| r2 0.0D0) |@true|))
	       (AND (EQ (|R<=| r1 0.0D0) |@true|)
		    (EQ (|R<=| r2 0.0D0) |@true|)))
	   (EQ (|R>=| (|R*| r1 r2) 0.0D0) |@true|)))
(FORALL (r1 r2)
  (PATS (|R*| r1 r2))
  (IMPLIES (OR (AND (EQ (|R>| r1 0.0D0) |@true|)
		    (EQ (|R<| r2 0.0D0) |@true|))
	       (AND (EQ (|R<| r1 0.0D0) |@true|)
		    (EQ (|R>| r2 0.0D0) |@true|)))
	   (EQ (|R<| (|R*| r1 r2) 0.0D0) |@true|)))

(FORALL (r) (PATS (|R+| r 0.0D0)) (EQ (|R+| r 0.0D0) r))
(FORALL (r) (PATS (|R+| 0.0D0 r)) (EQ (|R+| 0.0D0 r) r))
(FORALL (r1 r2)
  (PATS (|R+| r1 r2))
  (IMPLIES (AND (EQ (|R>=| r1 0.0D0) |@true|)
		(EQ (|R>=| r2 0.0D0) |@true|))
	   (EQ (|R>=| (|R+| r1 r2) 0.0D0) |@true|)))
(FORALL (r1 r2)
  (PATS (|R+| r1 r2))
  (IMPLIES (AND (EQ (|R<=| r1 0.0D0) |@true|)
		(EQ (|R<=| r2 0.0D0) |@true|))
	   (EQ (|R<=| (|R+| r1 r2) 0.0D0) |@true|)))


(FORALL (i type)
  (PATS (FLOAT i type))
  (IMPLIES (>= i 0) (EQ (|R>=| (FLOAT i type) 0.0D0) |@true|)))

(FORALL (r)
  (PATS (ROUND r))
  (IMPLIES (EQ (|R>=| r 0.0D0) |@true|) (>= (ROUND r) 0)))

;; Term versions of relational and boolean operators.
(FORALL (x y)
  (PATS (|TERM=| x y))
  (IFF (EQ (|TERM=| x y) |@true|) (EQ x y)))
(FORALL (x y)
  (PATS (|TERM#| x y))
  (IFF (EQ (|TERM#| x y) |@true|) (NEQ x y)))
(FORALL (x y)
  (PATS (|TERM<| x y))
  (IFF (EQ (|TERM<| x y) |@true|) (< x y)))
(FORALL (x y)
  (PATS (|TERM>| x y))
  (IFF (EQ (|TERM>| x y) |@true|) (> x y)))
(FORALL (x y)
  (PATS (|TERM<=| x y))
  (IFF (EQ (|TERM<=| x y) |@true|) (<= x y)))
(FORALL (x y)
  (PATS (|TERM>=| x y))
  (IFF (EQ (|TERM>=| x y) |@true|) (>= x y)))
(FORALL (x y)
  (PATS (|TERM_AND| x y))
  (IFF (EQ (|TERM_AND| x y) |@true|) (AND (EQ x |@true|) (EQ y |@true|))))
(FORALL (x y)
  (PATS (|TERM_OR| x y))
  (IFF (EQ (|TERM_OR| x y) |@true|) (OR (EQ x |@true|) (EQ y |@true|))))
(FORALL (x)
  (PATS (|TERM_NOT| x))
  (IFF (EQ (|TERM_NOT| x) |@true|) (NEQ x |@true|)))

;; For all the function symbols axiomatized in this file that always
;; return a single type, we need to axiomatize that type restriction.
;; It would be good to have a more general mechanism that does this
;; for user declared types, as well; what I think of as the "side
;; condition" mechanism.
(FORALL (s) (PATS (sup s)) (EQ (|Is$MUTEX| (sup s)) |@true|))

;; Performance of this is questionable...
(FORALL (m i)
  (PATS (NUMBER m i))
;  (EQ (|Is$MATHINT| (NUMBER m i)) |@true|)
  (EQ (|Is$INTEGER| (NUMBER m i)) |@true|)
  )

;(FORALL (b)
;  (PATS (|Is$PRED| b))
;  (IMPLIES (EQ (|Is$PRED| b) |@true|)
;	   (EQ (|Is$BOOLEAN| b |@DUMMY|) |@true|)
;	   ))

(FORALL (s1 s2) (PATS (SUBSET s1 s2))
      (EQ (|Is$BOOLEAN| (SUBSET s1 s2)) |@true|))
(FORALL (r) (PATS (TYPECODE r))
      (EQ (|Is$ORDINAL| (TYPECODE r)) |@true|))
(FORALL (a b) (PATS (MAX a b)) (EQ (|Is$INTEGER| (MAX a b)) |@true|))
(FORALL (a b) (PATS (MIN a b)) (EQ (|Is$INTEGER| (MIN a b)) |@true|))
(FORALL (r) (PATS (ROUND r)) (EQ (|Is$INTEGER| (ROUND r)) |@true|))
(FORALL (a b) (PATS (+ a b)) (EQ (|Is$MATHINT| (+ a b)) |@true|))
(FORALL (a b) (PATS (- a b)) (EQ (|Is$MATHINT| (- a b)) |@true|))
(FORALL (m1 m2) (PATS (MUT_LT m1 m2))
      (EQ (|Is$BOOLEAN| (MUT_LT m1 m2)) |@true|))
(FORALL (m1 m2) (PATS (MUT_LE m1 m2))
      (EQ (|Is$BOOLEAN| (MUT_LE m1 m2)) |@true|))
(FORALL (m1 m2) (PATS (MUT_GT m1 m2))
      (EQ (|Is$BOOLEAN| (MUT_GT m1 m2)) |@true|))
(FORALL (m1 m2) (PATS (MUT_GE m1 m2))
      (EQ (|Is$BOOLEAN| (MUT_GE m1 m2)) |@true|))
(FORALL (s m)
  (PATS (MEMBER m s))
  (EQ (|Is$BOOLEAN| (MEMBER m s)) |@true|))
(FORALL (a b)
  (PATS (DIV a b))
  (IMPLIES (NEQ b 0)
	   (EQ (|Is$MATHINT| (DIV a b)) |@true|)))
(FORALL (a b)
  (PATS (MOD a b))
  (IMPLIES (NEQ b 0)
	   (EQ (|Is$MATHINT| (MOD a b)) |@true|)))


