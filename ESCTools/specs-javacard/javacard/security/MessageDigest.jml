/*
 * JML/ESC/Java2 specs for the Java Card API 2.2.1
 * by Wojciech Mostowski, woj@cs.ru.nl
 * Copyright (C) 2006 Radboud University Nijmegen, the Netherlands 
 *
 * The Java Card API 2.2.1 itself is Copyright (c) 2000 Sun Microsystems, Inc.
 *
 * These specs are based on Erik Poll's and Engelbert Hubbers' specs
 * for Java Card API 2.1.1, see
 * http://www.sos.cs.ru.nl/research/escjava/esc2jcapi.html
 *
 * $Id: MessageDigest.jml,v 1.5 2006/05/24 15:38:12 woj Exp $
 *
 */

package javacard.security;

public abstract class MessageDigest {

  public static final byte ALG_MD5;
  public static final byte ALG_RIPEMD160;
  public static final byte ALG_SHA;

  //@ public static invariant ALG_MD5 == 2;
  //@ public static invariant ALG_RIPEMD160 == 3;
  //@ public static invariant ALG_SHA == 1;

  //@ public ghost byte _algorithm;
  /*@ public invariant _algorithm == ALG_MD5 || _algorithm == ALG_RIPEMD160 ||
                _algorithm == ALG_SHA; @*/
  
  /*@
     public normal_behavior 
       requires algorithm == ALG_MD5 || algorithm == ALG_RIPEMD160 ||
                algorithm == ALG_SHA;
       ensures \result != null && \result._algorithm == algorithm ;
       assignable \nothing;
  @*/
  public static final MessageDigest getInstance(
    byte algorithm, boolean externalAccess)
      throws CryptoException;

  /*@
     public normal_behavior 
       requires true ;
       ensures \result == _algorithm ;
       assignable \nothing ;
  @*/
  public abstract /*@pure@*/ byte getAlgorithm();

  /*@
     public normal_behavior 
       requires true ;
       ensures \result > 0 ;
       assignable \nothing ;
  @*/
  public abstract /*@pure@*/ byte getLength();

  /*@
     public normal_behavior 
       requires inBuff != null;
       requires inOffset >= 0 && inOffset + inLength <= inBuff.length &&
		inLength >= 0;
       requires outBuff != null;
       requires outOffset >= 0 && outOffset <= outBuff.length;
       ensures \result >= 0;
       assignable outBuff[outOffset..outBuff.length-1];
  @*/
  public abstract short doFinal(
    byte[] inBuff, short inOffset, short inLength,
    byte[] outBuff, short outOffset);

  /*@
     public normal_behavior 
       requires inBuff != null;
       requires inOffset >= 0 && inOffset + inLength <= inBuff.length &&
		inLength >= 0 ;
       ensures true;
       assignable \nothing;
  @*/
  public abstract void update(
    byte[] inBuff, short inOffset, short inLength);

  /*@
     public normal_behavior 
       requires true ;
       ensures true ;
       assignable \nothing ;
  @*/
  public abstract void reset();

}
