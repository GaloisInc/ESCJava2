/*
 * JML/ESC/Java2 specs for the Java Card API 2.2.1
 * by Wojciech Mostowski, woj@cs.ru.nl
 * Copyright (C) 2006 Radboud University Nijmegen, the Netherlands 
 *
 * The Java Card API 2.2.1 itself is Copyright (c) 2000 Sun Microsystems, Inc.
 *
 * These specs are based on Erik Poll's and Engelbert Hubbers' specs
 * for Java Card API 2.1.1, see
 * http://www.sos.cs.ru.nl/research/escjava/esc2jcapi.html
 *
 * $Id: KeyBuilder.jml,v 1.6 2006/05/24 15:38:12 woj Exp $
 *
 */

package javacard.security;

public class KeyBuilder {

  public static final short LENGTH_AES_128;
  public static final short LENGTH_AES_192;
  public static final short LENGTH_AES_256;
  public static final short LENGTH_DES;
  public static final short LENGTH_DES3_2KEY;
  public static final short LENGTH_DES3_3KEY;
  public static final short LENGTH_DSA_1024;
  public static final short LENGTH_DSA_512;
  public static final short LENGTH_DSA_768;
  public static final short LENGTH_EC_F2M_113;
  public static final short LENGTH_EC_F2M_131;
  public static final short LENGTH_EC_F2M_163;
  public static final short LENGTH_EC_F2M_193;
  public static final short LENGTH_EC_FP_112;
  public static final short LENGTH_EC_FP_128;
  public static final short LENGTH_EC_FP_160;
  public static final short LENGTH_EC_FP_192;
  public static final short LENGTH_RSA_1024;
  public static final short LENGTH_RSA_1280;
  public static final short LENGTH_RSA_1536;
  public static final short LENGTH_RSA_1984;
  public static final short LENGTH_RSA_2048;
  public static final short LENGTH_RSA_512;
  public static final short LENGTH_RSA_736;
  public static final short LENGTH_RSA_768;
  public static final short LENGTH_RSA_896;

  public static final byte TYPE_AES;
  public static final byte TYPE_AES_TRANSIENT_DESELECT;
  public static final byte TYPE_AES_TRANSIENT_RESET;
  public static final byte TYPE_DES;
  public static final byte TYPE_DES_TRANSIENT_DESELECT;
  public static final byte TYPE_DES_TRANSIENT_RESET;
  public static final byte TYPE_DSA_PRIVATE;
  public static final byte TYPE_DSA_PUBLIC;
  public static final byte TYPE_EC_F2M_PRIVATE;
  public static final byte TYPE_EC_F2M_PUBLIC;
  public static final byte TYPE_EC_FP_PRIVATE;
  public static final byte TYPE_EC_FP_PUBLIC;
  public static final byte TYPE_RSA_CRT_PRIVATE;
  public static final byte TYPE_RSA_PRIVATE;
  public static final byte TYPE_RSA_PUBLIC;

  //@ public static invariant LENGTH_AES_128 == 128;
  //@ public static invariant LENGTH_AES_192 == 192;
  //@ public static invariant LENGTH_AES_256 == 256;
  //@ public static invariant LENGTH_DES == 64;
  //@ public static invariant LENGTH_DES3_2KEY == 128;
  //@ public static invariant LENGTH_DES3_3KEY == 192;
  //@ public static invariant LENGTH_DSA_1024 == 1024;
  //@ public static invariant LENGTH_DSA_512 == 512;
  //@ public static invariant LENGTH_DSA_768 == 768;
  //@ public static invariant LENGTH_EC_F2M_113 == 113;
  //@ public static invariant LENGTH_EC_F2M_131 == 131;
  //@ public static invariant LENGTH_EC_F2M_163 == 163;
  //@ public static invariant LENGTH_EC_F2M_193 == 193;
  //@ public static invariant LENGTH_EC_FP_112 == 112;
  //@ public static invariant LENGTH_EC_FP_128 == 128;
  //@ public static invariant LENGTH_EC_FP_160 == 160;
  //@ public static invariant LENGTH_EC_FP_192 == 192;
  //@ public static invariant LENGTH_RSA_1024 == 1024;
  //@ public static invariant LENGTH_RSA_1280 == 1280;
  //@ public static invariant LENGTH_RSA_1536 == 1536;
  //@ public static invariant LENGTH_RSA_1984 == 1984;
  //@ public static invariant LENGTH_RSA_2048 == 2048;
  //@ public static invariant LENGTH_RSA_512 == 512;
  //@ public static invariant LENGTH_RSA_736 == 736;
  //@ public static invariant LENGTH_RSA_768 == 768;
  //@ public static invariant LENGTH_RSA_896 == 896;

  //@ public static invariant TYPE_AES == 15;
  //@ public static invariant TYPE_AES_TRANSIENT_DESELECT == 14;
  //@ public static invariant TYPE_AES_TRANSIENT_RESET == 13;
  //@ public static invariant TYPE_DES == 3;
  //@ public static invariant TYPE_DES_TRANSIENT_DESELECT == 2;
  //@ public static invariant TYPE_DES_TRANSIENT_RESET == 1;
  //@ public static invariant TYPE_DSA_PRIVATE == 8;
  //@ public static invariant TYPE_DSA_PUBLIC == 7;
  //@ public static invariant TYPE_EC_F2M_PRIVATE == 10;
  //@ public static invariant TYPE_EC_F2M_PUBLIC == 9;
  //@ public static invariant TYPE_EC_FP_PRIVATE == 12;
  //@ public static invariant TYPE_EC_FP_PUBLIC == 11;
  //@ public static invariant TYPE_RSA_CRT_PRIVATE == 6;
  //@ public static invariant TYPE_RSA_PRIVATE == 5;
  //@ public static invariant TYPE_RSA_PUBLIC == 4;

  /*@
     public normal_behavior
       requires keyType >= TYPE_DES_TRANSIENT_RESET && keyType <= TYPE_AES;
       requires keyLength >= 0;
       ensures \result != null && !\result.isInitialized();
       ensures keyEncryption ==> \result instanceof javacardx.crypto.KeyEncryption;
       ensures keyType == TYPE_AES || keyType == TYPE_AES_TRANSIENT_DESELECT || 
	       keyType == TYPE_AES_TRANSIENT_RESET ==> \result instanceof AESKey;
       ensures keyType == TYPE_DES || keyType == TYPE_DES_TRANSIENT_DESELECT || 
	        keyType == TYPE_DES_TRANSIENT_RESET ==> \result instanceof DESKey;
       ensures keyType == TYPE_DSA_PRIVATE ==> \result instanceof DSAPrivateKey;
       ensures keyType == TYPE_DSA_PUBLIC ==> \result instanceof DSAPublicKey;
       ensures keyType == TYPE_EC_F2M_PRIVATE || keyType == TYPE_EC_FP_PRIVATE 
	            ==> \result instanceof ECPrivateKey;
       ensures keyType == TYPE_EC_F2M_PUBLIC || keyType == TYPE_EC_FP_PUBLIC 
	            ==> \result instanceof ECPublicKey;
       ensures keyType == TYPE_RSA_PRIVATE ==> \result instanceof RSAPrivateKey;
       ensures keyType == TYPE_RSA_CRT_PRIVATE ==> \result instanceof RSAPrivateCrtKey;
       ensures keyType == TYPE_RSA_PUBLIC ==> \result instanceof RSAPublicKey;
       assignable \nothing;
  @*/
  public static Key buildKey(
    byte keyType, short keyLength, boolean keyEncryption)
      throws CryptoException;

}
