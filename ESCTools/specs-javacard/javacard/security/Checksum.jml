/*
 * JML/ESC/Java2 specs for the Java Card API 2.2.1
 * by Wojciech Mostowski, woj@cs.ru.nl
 * Copyright (C) 2006 Radboud University Nijmegen, the Netherlands 
 *
 * The Java Card API 2.2.1 itself is Copyright (c) 2000 Sun Microsystems, Inc.
 *
 * These specs are based on Erik Poll's and Engelbert Hubbers' specs
 * for Java Card API 2.1.1, see
 * http://www.sos.cs.ru.nl/research/escjava/esc2jcapi.html
 *
 * $Id: Checksum.jml,v 1.4 2006/05/24 15:38:12 woj Exp $
 *
 */

package javacard.security;

public abstract class Checksum {

  public static final byte ALG_ISO3309_CRC16;
  public static final byte ALG_ISO3309_CRC32;

  //@ public static invariant ALG_ISO3309_CRC16 == 1;
  //@ public static invariant ALG_ISO3309_CRC32 == 2;

  //@ public ghost boolean _initialized;

  //@ public ghost byte _algorithm;
  /*@ public invariant _algorithm == ALG_ISO3309_CRC16 ||
                _algorithm == ALG_ISO3309_CRC32; @*/
  
  /*@
     public normal_behavior 
       requires algorithm == ALG_ISO3309_CRC16 ||
                algorithm == ALG_ISO3309_CRC32;
       ensures \result != null && \result._algorithm == algorithm ;
       ensures !\result._initialized;
       assignable \nothing;
  @*/
  public static final Checksum getInstance(
    byte algorithm, boolean externalAccess)
      throws CryptoException;

  /*@
     public normal_behavior 
       requires bArray != null;
       requires bOff >= 0 && bOff + bLen <= bArray.length;
       requires _algorithm ==  ALG_ISO3309_CRC16 ==> bLen == 2;
       requires _algorithm ==  ALG_ISO3309_CRC32 ==> bLen == 4;
       ensures _initialized;
       assignable \nothing;
  @*/
  public abstract void init(
    byte[] bArray, short bOff, short bLen)
      throws CryptoException;

  /*@
     public normal_behavior 
       requires true ;
       ensures \result == _algorithm ;
       assignable \nothing ;
  @*/
  public abstract /*@pure@*/ byte getAlgorithm();

  /*@
     public normal_behavior 
       requires _initialized;
       requires inBuff != null;
       requires inOffset >= 0 && inOffset + inLength <= inBuff.length && inLength >= 0;
       requires outBuff != null;
       requires outOffset >= 0 && outOffset <= outBuff.length;
       ensures \result >= 0;
       assignable outBuff[outOffset..outBuff.length-1];
  @*/
  public abstract short doFinal(
    byte[] inBuff, short inOffset, short inLength,
    byte[] outBuff, short outOffset);

  /*@
     public normal_behavior 
       requires _initialized;
       requires inBuff != null;
       requires inOffset >= 0 && inOffset + inLength <= inBuff.length &&
		inLength >= 0 ;
       ensures true;
       assignable \nothing;
  @*/
  public abstract void update(
    byte[] inBuff, short inOffset, short inLength);

}
