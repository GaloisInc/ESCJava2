/*
 * JML/ESC/Java2 specs for the Java Card API 2.2.1
 * by Wojciech Mostowski, woj@cs.ru.nl
 * Copyright (C) 2006 Radboud University Nijmegen, the Netherlands 
 *
 * The Java Card API 2.2.1 itself is Copyright (c) 2000 Sun Microsystems, Inc.
 *
 * These specs are based on Erik Poll's and Engelbert Hubbers' specs
 * for Java Card API 2.1.1, see
 * http://www.sos.cs.ru.nl/research/escjava/esc2jcapi.html
 *
 * $Id: Cipher.jml,v 1.6 2006/05/24 15:38:12 woj Exp $
 *
 */

package javacardx.crypto;

import javacard.security.CryptoException;
import javacard.security.Key;

public abstract class Cipher {

    public static final byte ALG_AES_BLOCK_128_CBC_NOPAD;
    public static final byte ALG_AES_BLOCK_128_ECB_NOPAD;
    public static final byte ALG_DES_CBC_ISO9797_M1;
    public static final byte ALG_DES_CBC_ISO9797_M2;
    public static final byte ALG_DES_CBC_NOPAD;
    public static final byte ALG_DES_CBC_PKCS5;
    public static final byte ALG_DES_ECB_ISO9797_M1;
    public static final byte ALG_DES_ECB_ISO9797_M2;
    public static final byte ALG_DES_ECB_NOPAD;
    public static final byte ALG_DES_ECB_PKCS5;
    public static final byte ALG_RSA_ISO14888;
    public static final byte ALG_RSA_ISO9796;
    public static final byte ALG_RSA_NOPAD;
    public static final byte ALG_RSA_PKCS1;
    public static final byte ALG_RSA_PKCS1_OAEP;
    public static final byte MODE_DECRYPT;
    public static final byte MODE_ENCRYPT; 

    //@ public static invariant ALG_AES_BLOCK_128_CBC_NOPAD == 13;
    //@ public static invariant ALG_AES_BLOCK_128_ECB_NOPAD == 14;
    //@ public static invariant ALG_DES_CBC_ISO9797_M1 == 2;
    //@ public static invariant ALG_DES_CBC_ISO9797_M2 == 3;
    //@ public static invariant ALG_DES_CBC_NOPAD == 1;
    //@ public static invariant ALG_DES_CBC_PKCS5 == 4;
    //@ public static invariant ALG_DES_ECB_ISO9797_M1 == 6;
    //@ public static invariant ALG_DES_ECB_ISO9797_M2 == 7;
    //@ public static invariant ALG_DES_ECB_NOPAD == 5;
    //@ public static invariant ALG_DES_ECB_PKCS5 == 8;
    //@ public static invariant ALG_RSA_ISO14888 == 9;
    //@ public static invariant ALG_RSA_ISO9796 == 11;
    //@ public static invariant ALG_RSA_NOPAD == 12;
    //@ public static invariant ALG_RSA_PKCS1 == 10;
    //@ public static invariant ALG_RSA_PKCS1_OAEP == 15;
    //@ public static invariant MODE_DECRYPT == 1;
    //@ public static invariant MODE_ENCRYPT == 2; 

    //@ public ghost boolean _initialized;

    //@ public ghost byte _algorithm;
    /*@ public invariant _algorithm >=  ALG_DES_CBC_NOPAD &&
      _algorithm <= ALG_RSA_PKCS1_OAEP; @*/

    /*@
       public normal_behavior 
         requires algorithm >=  ALG_DES_CBC_NOPAD &&
                algorithm <= ALG_RSA_PKCS1_OAEP;
         ensures \result != null;
	 ensures \result._algorithm == algorithm;
	 ensures !\result._initialized;
         assignable \nothing;
    @*/
    public static final Cipher getInstance(
      byte algorithm, boolean externalAccess) throws CryptoException;

    /*@
       public normal_behavior 
         requires theKey != null;
	 requires theMode == MODE_DECRYPT || theMode == MODE_ENCRYPT;
         ensures _initialized;
         assignable _initialized;
    @*/
    public abstract void init(
      Key theKey, byte theMode) throws CryptoException;

    /*@
       public normal_behavior 
         requires theKey != null;
	 requires theMode == MODE_DECRYPT || theMode == MODE_ENCRYPT;
         requires bArray != null;
	 requires bLen >= 0 && bOff >= 0 && bOff + bLen <= bArray.length;
         ensures _initialized;
         assignable _initialized;
    @*/
    public abstract void init(
      Key theKey, byte theMode,
      byte[] bArray, short bOff, short bLen)
         throws CryptoException;

    /*@
       public normal_behavior 
         requires true ;
         ensures \result == _algorithm;
         assignable \nothing ;
    @*/
    public abstract /*@pure@*/ byte getAlgorithm();

    /*@
       public normal_behavior 
         requires _initialized;
         requires inBuff != null;
	 requires inOffset >= 0 && inOffset + inLength <= inBuff.length &&
	    	  inLength >= 0;
	 requires outBuff != null;
	 requires outOffset >= 0 && outOffset <= outBuff.length;
         ensures \result >= 0;
         assignable outBuff[outOffset..outBuff.length-1];
    @*/
    public abstract short doFinal(
      byte[] inBuff, short inOffset, short inLength,
      byte[] outBuff, short outOffset)
         throws CryptoException;

    /*@
       public normal_behavior 
         requires _initialized;
         requires inBuff != null;
	 requires inOffset >= 0 && inOffset + inLength <= inBuff.length &&
	    	  inLength >= 0;
	 requires outBuff != null;
	 requires outOffset >= 0 && outOffset <= outBuff.length;
         ensures \result >= 0;
         assignable outBuff[outOffset..outBuff.length-1];
    @*/
    public abstract short update(
      byte[] inBuff, short inOffset, short inLength,
      byte[] outBuff, short outOffset)
         throws CryptoException;

}
