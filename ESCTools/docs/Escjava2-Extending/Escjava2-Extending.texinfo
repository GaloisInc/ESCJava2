\input texinfo   @c -*-texinfo-*-
@c %**start of header

@setfilename Escjava2-Extending.info
@settitle Extending ESC/Java2 $Revision$
@c Other commands that globally affect the document formatting: 
@c synindex, footnotestyle
@afourwide
@paragraphindent 0
@c firstparagraphindent 0
@c %**end of header
@c =============================================================================

@c =============================================================================
@c Definitions of new indices for this document

@c =============================================================================
@c Functions are indexed using the built-in @findex
@c Predicates are indexed using @pindex
@defcodeindex p
@c Constants are indexed using @kindex
@defcodeindex k

@c Map predicates (pindex) and constants (kindex) the function index.

@syncodeindex p fn
@syncodeindex k fn

@c =============================================================================

@c =============================================================================
@c %**summary and copyright

Original version by Joseph Kiniry.  Initially written in early 2004,
then lost, then rewritten beginning in November, 2004.

Current author and editor: Joseph Kiniry.

This document describes how to extend ESC/Java2.  It describes the
high-level architecture of the system and how to extend it through a
series of case studies.

This is edition $Revision$.

This document is a work in progress.  Suggestions and input are always
welcome.

@copying
``Extending ESC/Java2'' is licensed under the Creative Commons
Attribution-NonCommercial-ShareAlike 2.0 license.  See
@uref{http://creativecommons.org/licenses/by-nc-sa/2.0/}

Copyright @copyright{} 2004 Joseph R. Kiniry and University College
Dublin.

@quotation
You are free:
@itemize
@item
to copy, distribute, display, and perform the work
@item
to make derivative works
@end itemize

Under the following conditions:
@itemize
@item
Attribution. You must give the original author credit.
@item
Noncommercial. You may not use this work for commercial purposes.
@item
Share Alike. If you alter, transform, or build upon this work, you may
distribute the resulting work only under a license identical to this
one.
@end itemize

For any reuse or distribution, you must make clear to others the license
terms of this work.

Any of these conditions can be waived if you get permission from the
author.

Your fair use and other rights are in no way affected by the above.

This is a human-readable summary of the Legal Code.

See @uref{http://creativecommons.org/licenses/by-nc-sa/2.0/legalcode}
@end quotation

@end copying

@c %**end of summary and copyright
@c =============================================================================

@c =============================================================================
@c %**title, contents, and copyright

@titlepage
@title Extending ESC/Java2
@subtitle Edition $Revision$, November 2004
@subtitle This document describes how to extend ESC/Java2 version 2.0a8 and later.
@author Joseph R. Kiniry <kiniry@@acm.org>

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

@c To be published by the KindSoftware Research Group, Department of
@c Computer Science, University College Dublin as technical report TBD
@c See @uref{http://secure.ucd.ie/}
@end titlepage

@c metadata used in HTML
@documentdescription
ESC/Java, ESC/Java2, Java Modeling Language, JML, Extended Static
Checking, Extended Static Checker, Design by Contract, Java,
Verification, BISL, Object-oriented Logic, Behavioral Interface
Specification Language, Extending, Lexer, Parser, Kiniry
@end documentdescription

@c Output the table of contents at the beginning.
@contents

@c %**end of title, contents, and copyright
@c =============================================================================

@c =============================================================================
@c %**top node and master menu

@c We recommend including the copying permissions here as well as the
@c segments above.
@ifnottex
@node Top, Introduction, (dir), (dir)
@top Extending ESC/Java2

@insertcopying
@end ifnottex

This document describes how to extend ESC/Java2.  It describes the
high-level architecture of the system and how to extend it through a
series of case studies.

@menu
* Introduction::                An introduction to this document.
* The ESC/Java2 Architecture::  The detailed design of the Extended Static Checker.
* The Java Front-end Architecture::  The detailed design of the Java front-end.
* The ESC/Java2 Architecture::  The detailed design of the Extended Static Checker.
* The ESC/Java2 VC Generation Calculi::  
* The ESC/Java2 Logics::        
* The Theorem Prover Interface::  Adding a new prover.
* Testing Extensions::          How to test your extension.
* Specifications::              BON specifications of ESC/Java2.
* Copying::                     Your rights and freedoms.
* Index::                       Complete index.
@end menu

@c %**end top node and master menu
@c =============================================================================

@c =============================================================================
@c %**body

@c =============================================================================
@node Introduction, The ESC/Java2 Architecture, Top, Top
@chapter Introduction

@cindex Introduction

This document describes how to extend ESC/Java2.  It describes the
high-level architecture of the system and how to extend it through a
series of case studies.

The case studies discussed were chosen because they: (a) focused on each
independent aspects of the architecture, (b) were relatively small and
self-contained examples, and (c) they were additions that we made to the
original SRC ESC/Java system, thus writing them up in this manner was
straightforward.

We describe the ESC/Java2 architecture using the specification language
BON.  BON is a specification language developed by Kim Walden and
Jean-Marc Nerson and is documented in the book ``Seamless Object-Oriented
Software Construction,'' available from @uref{http://www.bon-method.com/}.

BON is a simple enough specification language that most, if not all, of
the specifications herein will be understandable to the reader who knows
nothing at all of BON.

@c =============================================================================
@node The ESC/Java2 Architecture, The Java Front-end Architecture, Introduction, Top
@chapter The ESC/Java2 Architecture

@cindex The ESC/Java2 Architecture

ESC/Java2 is an extension of Digital/Compaq/Hewlett-Packard System
Research Center's (SRC henceforth) ESC/Java.

@c -----------------------------------------------------------------------------
@float Chart,fig:System_Chart

@multitable @columnfractions .15 .70 .15
@item @b{SYSTEM}
@tab EXTENDED_STATIC_CHECKER
@tab @b{Part:} 1/1
@end multitable
@multitable @columnfractions .50 .50
@item @b{PURPOSE}

An extended static checker for Java.
@tab
@b{INDEXING}

@b{author:} Joseph Kiniry

@b{keywords:} extended static checker, ESC, Java
@end multitable
@multitable @columnfractions .4 .6
@item @b{Cluster}
@tab
@b{Description}
@item JAVA_FRONT_END
@tab A generic Java scanner, parser, and type checker.
@item EXTENDED_STATIC_CHECKER
@tab An extended static checker for Java.
@item UTILITY
@tab Miscellaneous utility classes.
@end multitable

@caption{The BON System Chart for ESC/Java2}
@end float
@c -----------------------------------------------------------------------------

ESC/Java2 has two primary subcomponents: a generic Java front-end in the
Java package @var{javafe} and the extended static checking framework
found in the package @var{escjava}.

There are a few other classes used for testing found in the
@var{junitutils} package.  We discuss this part of the architecture in
@ref{X}.
@c fill in cross-reference

ESC/Java depended at one time (and perhaps still today) upon a few
external packages that we do not have the source for.  These relevant
packages are called @var{mochalib}, @var{decsrc}, @var{jtools}, and
@var{tohtml}@footnote{There are also a number of deprecated packages
currently included in the CVS repository for ESC/Java2 including
@var{escwizard}, @var{houdini}, and @var{instrumenter}.  These packages
are not used or supported at this time and we plan on removing them from
the CVS HEAD in the near future.  See Bug #X for more information.}

@c analyse and discuss these packages somewhere and xref here

ESC/Java2 depends upon a number of Open Source Java libraries whose Java
archive (jar) files are provided with the source release.  The current
packages on which we depend include Ant, jUnit, and XML-RPC libraries.
@c add hyperlinks/cites to these libraries

@menu
* The Generic Java Front-end::  The high-level design of the Java front-end.
* The Extended Static Checker for Java::  The high-level design of the Extended Static Checker.
@end menu

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The Generic Java Front-end, The Extended Static Checker for Java, The ESC/Java2 Architecture, The ESC/Java2 Architecture
@section The Generic Java Front-end

@cindex The Generic Java Front-end

ESC/Java2 uses the generic Java front-end developed by SRC, available as
an independent download from http://todo.  The only modifications that
have been made to the javafe package are the addition of support for the
assert statement that was added to the Java languange in the Java 1.4
release.  We discuss this extension as the first case study, found in
@ref{X}.

@c -----------------------------------------------------------------------------
@float Chart,fig:Javafe_Cluster_Chart

@multitable @columnfractions .15 .70 .15
@item @b{CLUSTER}
@tab JAVA_FRONT_END
@tab @b{Part:} 1/1
@end multitable
@multitable @columnfractions .50 .50
@item @b{PURPOSE}

A generic Java scanner, parser, and type checker.
@tab
@b{INDEXING}

@b{author:} Joseph Kiniry

@b{keywords:} Java, scanner, parser, type checker
@end multitable
@multitable @columnfractions .33 .66
@item @b{Class/(Cluster)}
@tab
@b{Description}
@item (AST)
@tab The abstract symbol tree classes for Java.
@item (FILES)
@tab TBD
@item (LEXER)
@tab TBD
@item (OPTIONS)
@tab TBD
@item (PARSER)
@tab TBD
@item (READER)
@tab TBD
@item (TYPECHECKER)
@tab TBD
@item (UTILITY)
@tab TBD
@item (TOOLS)
@tab TBD
@item (UTILITY)
@tab TBD
@end multitable

@caption{The BON Cluster Chart for the ESC/Java2 Java Front-end}
@end float
@c -----------------------------------------------------------------------------

@c PARSER should have classfile parser and source file parser

The Java front-end is summarised in the informal cluster chart in
@ref{fig:Escjava_Cluster_Chart}.  The main subcomponents of the Java
front-end are the core tool classes (in the @sc{TOOLS} cluster), a Java
lexer, a parser, and type checker (the @sc{LEXER}, @sc{PARSER}, and
@sc{TYPECHECKER} clusters).  An abstract symbol tree is used to
represent the parsed Java classes (the @sc{AST} cluster).  Command-line
option parsing is another major subcomponent that most extensions need
to modify (the @sc{OPTIONS} cluster).  Finally, there are a number of
classes used to search for source and class files in the classpath
(@sc{FILES}), read in source and class files and cache their locations
and contents (@sc{READER}), and track warning and errors and related
data that are detected during compilation (@sc{UTILITY}).

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The Extended Static Checker for Java,  , The Generic Java Front-end, The ESC/Java2 Architecture
@section The Extended Static Checker for Java
@cindex The Extended Static Checker for Java

The extended static checker for Java has several major subcomponents.

@c -----------------------------------------------------------------------------
@float Chart,fig:Escjava_Cluster_Chart

@multitable @columnfractions .15 .70 .15
@item @b{CLUSTER}
@tab EXTENDED_STATIC_CHECKER
@tab @b{Part:} 1/1
@end multitable
@multitable @columnfractions .50 .50
@item @b{PURPOSE}

An extended static checker for Java.
@tab
@b{INDEXING}

@b{author:} Joseph Kiniry

@b{keywords:} extended static checker, Java
@end multitable
@multitable @columnfractions .50 .50
@item @b{Class/(Cluster)}
@tab
@b{Description}
@item (ANT)
@tab TBD
@item (AST)
@tab TBD
@item (BACKGROUND_PREDICATE)
@tab TBD
@item (GUI)
@tab TBD
@item (OPTIONS)
@tab TBD
@item (PREDICATE_ABSTRACTION)
@tab TBD
@item (PARSER)
@tab TBD
@item (PROVER)
@tab TBD
@item (READER)
@tab TBD
@item (SOUNDNESS_CHECKER)
@c This cluster should get refactored to include the new work by Barry.
@tab TBD
@item (DYNAMIC_SINGLE_ASSIGNMENT)
@tab TBD
@item (TYPECHECKER)
@tab TBD
@item (VERIFICATION_CONDITION_GENERATOR)
@tab TBD
@item (TOOLS)
@tab TBD
@end multitable

@caption{The BON Cluster Chart for the ESC/Java2 Extended Static Checker}
@end float
@c -----------------------------------------------------------------------------

A full JML parser and type checker is the first main component (clusters
@sc{PARSER} and @sc{TYPECHECKER}).  It is realised as a specialisation
of the generic pragma parser in the Java front-end (cluster
@sc{JAVA_FRONT_END.PARSER}).  Conseqently, an AST hierarchy also exists
for JML constructs (cluster @sc{AST}).

@c ant ast backpred gui pa parser prover reader sp tc translate vcGenertion

@c =============================================================================
@node The Java Front-end Architecture, The ESC/Java2 Architecture, The ESC/Java2 Architecture, Top
@chapter The Java Front-end Architecture

@cindex The Java Front-end Architecture

@menu
* The Java Lexer::              The Java lexer.
* The Java AST::                The Java abstract symbol tree.
* The Java Parser::             The Java parser.
* The Java Type Checker::       The Java type checker.
* Case Studies in Extending the Java Front-end::  Front-end case studies.
@end menu

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The Java Lexer, The Java AST, The Java Front-end Architecture, The Java Front-end Architecture
@section The Java Lexer

@cindex The Java Lexer

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The Java AST, The Java Parser, The Java Lexer, The Java Front-end Architecture
@section The Java AST

@cindex The Java AST

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The Java Parser, The Java Type Checker, The Java AST, The Java Front-end Architecture
@section The Java Parser

@cindex The Java Parser

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The Java Type Checker, Case Studies in Extending the Java Front-end, The Java Parser, The Java Front-end Architecture
@section The Java Type Checker

@cindex The Java Type Checker

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Case Studies in Extending the Java Front-end,  , The Java Type Checker, The Java Front-end Architecture
@section Case Studies in Extending the Java Front-end

@cindex Case Studies in Extending the Java Front-end

@menu
* The Assert Statement::        
* New Java Bytecodes::          
@end menu

@c -----------------------------------------------------------------------------
@node The Assert Statement, New Java Bytecodes, Case Studies in Extending the Java Front-end, Case Studies in Extending the Java Front-end
@subsection The Assert Statement

@cindex assert

@c -----------------------------------------------------------------------------
@node New Java Bytecodes,  , The Assert Statement, Case Studies in Extending the Java Front-end
@subsection New Java Bytecodes

@cindex bytecodes
@cindex types

@c =============================================================================
@node The ESC/Java2 Architecture, The ESC/Java2 VC Generation Calculi, The Java Front-end Architecture, Top
@chapter The ESC/Java2 Architecture

@cindex The ESC/Java2 Architecture
@cindex AST
@cindex Pragma AST
@cindex hierarchy.j

Like in the Java front-end, the AST for pragmas is specified with a
@file{hierarchy.j} file which is transformed with the @command{astgen}
tool into source Java files.  This file and its related classes are
locate in the @code{escjava.ast} package that is located in the
repository at @file{ESCTools/Escjava/java/escjava/ast/}.

There are a few classes in this package that are not specified using
@file{hierarchy.j}: @file{DecreasesInfo.java},
@file{DerivedMethodDecl.java}, @file{EscPrettyPrint.java},
@file{Modifiers.java}, @file{TagConstants.java}, and @file{Utils.java}.

@c Move DecreasesInfo and Modifiers into hierarchy.j. -JRK

The case study that we use to demonstrate how to extend the JML pragma
lexer and parser is the addition of the @code{nullable} keyword,
presented by Patrice Chalin at SAVCBS 2005@cite{P. Chalin and F. Rioux,
``Non-null References by Default in the Java Modeling Language.''
Workshop on the Specification and Verification of Component-Based
Systems (SAVCBS'05), Lisbon, Portugal, Sept. 2005. (Updated version:
@uref{http://www.cs.concordia.ca/%7Echalin/papers/TR-2005-004-r3.2.pdf}
{ENCS-CSE TR 2005-004, December 2005}).  We discuss this extension as
the in @ref{nullable_case_study}.

@menu
* The ESC/Java2 JML Lexer::     The JML lexer.
* The ESC/Java2 JML Parser::    The JML parser.
* The ESC/Java2 Type Checker::  The JML type checker.
* Case Studies in Extending the Extended Static Checker Lexer::  Extended static checker case studies.
@end menu

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The ESC/Java2 JML Lexer, The ESC/Java2 JML Parser, The ESC/Java2 Architecture, The ESC/Java2 Architecture
@section The ESC/Java2 JML Lexer

@cindex The ESC/Java2 JML Lexer

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The ESC/Java2 JML Parser, The ESC/Java2 Type Checker, The ESC/Java2 JML Lexer, The ESC/Java2 Architecture
@section The ESC/Java2 JML Parser

@cindex The ESC/Java2 JML Parser

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The ESC/Java2 Type Checker, Case Studies in Extending the Extended Static Checker Lexer, The ESC/Java2 JML Parser, The ESC/Java2 Architecture
@section The ESC/Java2 Type Checker

@cindex The ESC/Java2 Type Checker

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Case Studies in Extending the Extended Static Checker Lexer,  , The ESC/Java2 Type Checker, The ESC/Java2 Architecture
@section Case Studies in Extending the Extended Static Checker Lexer, Parser, and Type Checker

@cindex case study
@cindex case studies
@cindex extending the extended static checker lexer
@cindex extending the extended static checker parser
@cindex extending the extended static checker type checker

@menu
* Default Reference Type Values::  
@end menu

@c -----------------------------------------------------------------------------
@node Default Reference Type Values,  , Case Studies in Extending the Extended Static Checker Lexer, Case Studies in Extending the Extended Static Checker Lexer
@subsection Default Reference Type Values

@cindex reference type value
@cindex non-null
@cindex nullable

@c =============================================================================
@node The ESC/Java2 VC Generation Calculi, The ESC/Java2 Logics, The ESC/Java2 Architecture, Top
@chapter The ESC/Java2 VC Generation Calculi

@cindex calculus
@cindex calculi
@cindex weakest-precondition calculus
@cindex strongest-postcondition calculus

@menu
* The DSA Intermediate Representation::  
* The Weakest-Precondition Calculus::  
* The Strongest-Postcondition Calculus::  
* Case Studies in Extending the VC Generation Calculi::  
@end menu

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The DSA Intermediate Representation, The Weakest-Precondition Calculus, The ESC/Java2 VC Generation Calculi, The ESC/Java2 VC Generation Calculi
@section The DSA Intermediate Representation

@cindex DSA
@cindex dynamic single assignment

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The Weakest-Precondition Calculus, The Strongest-Postcondition Calculus, The DSA Intermediate Representation, The ESC/Java2 VC Generation Calculi
@section The Weakest-Precondition Calculus

@cindex calculus
@cindex weakest-precondition calculus

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The Strongest-Postcondition Calculus, Case Studies in Extending the VC Generation Calculi, The Weakest-Precondition Calculus, The ESC/Java2 VC Generation Calculi
@section The Strongest-Postcondition Calculus

@cindex calculus
@cindex strongest-postcondition calculus

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node Case Studies in Extending the VC Generation Calculi,  , The Strongest-Postcondition Calculus, The ESC/Java2 VC Generation Calculi
@section Case Studies in Extending the VC Generation Calculi

@cindex case study
@cindex case studies
@cindex extending the vc generation calculi

@menu
* Reasoning about Loops::       
* Reasoning about Java Bytecodes::  
@end menu

@c -----------------------------------------------------------------------------
@node Reasoning about Loops, Reasoning about Java Bytecodes, Case Studies in Extending the VC Generation Calculi, Case Studies in Extending the VC Generation Calculi
@subsection Reasoning about Loops

@cindex loops

@c -----------------------------------------------------------------------------
@node Reasoning about Java Bytecodes,  , Reasoning about Loops, Case Studies in Extending the VC Generation Calculi
@subsection Reasoning about Java Bytecodes

@cindex bytecode

@c =============================================================================
@node The ESC/Java2 Logics, The Theorem Prover Interface, The ESC/Java2 VC Generation Calculi, Top
@chapter The ESC/Java2 Logics

@cindex The ESC/Java2 Logics

@c =============================================================================
@node The Theorem Prover Interface, Testing Extensions, The ESC/Java2 Logics, Top
@chapter The Theorem Prover Interface

@cindex The Theorem Prover Interface

@c =============================================================================
@node Testing Extensions, Specifications, The Theorem Prover Interface, Top
@chapter Testing Extensions

@cindex Testing Extensions

@c =============================================================================
@node Specifications, Copying, Testing Extensions, Top
@unnumbered List of Charts
@listoffloats Chart

@unnumbered List of Interface Specifications
@listoffloats Interface

@c =============================================================================
@node Copying, Index, Specifications, Top
@appendix Copying

@cindex Copying

@insertcopying

@c %**end of body
@c =============================================================================

@c =============================================================================
@c %**end of document

@node Index,  , Copying, Top
@unnumbered Index

@printindex cp

@bye
