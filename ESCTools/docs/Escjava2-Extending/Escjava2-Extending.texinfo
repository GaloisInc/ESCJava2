\input texinfo   @c -*-texinfo-*-
@c %**start of header

@setfilename Escjava2-Extending.info
@settitle Extending ESC/Java2 $Revision$
@c Other commands that globally affect the document formatting: 
@c synindex, footnotestyle
@afourwide
@paragraphindent 0
@c firstparagraphindent 0
@c %**end of header
@c =============================================================================

@c =============================================================================
@c Definitions of new indices for this document

@c =============================================================================
@c Functions are indexed using the built-in @findex
@c Predicates are indexed using @pindex
@defcodeindex p
@c Constants are indexed using @kindex
@defcodeindex k

@c Map predicates (pindex) and constants (kindex) the function index.

@syncodeindex p fn
@syncodeindex k fn

@c =============================================================================

@c =============================================================================
@c %**summary and copyright

Original version by Joseph Kiniry.  Initially written in early 2004,
then lost, then rewritten beginning in November, 2004.

Current author and editor: Joseph Kiniry.

This document describes how to extend ESC/Java2.  It describes the
high-level architecture of the system and how to extend it through a
series of case studies.

This is edition $Revision$.

This document is a work in progress.  Suggestions and input are always
welcome.

@copying
``Extending ESC/Java2'' is licensed under the Creative Commons
Attribution-NonCommercial-ShareAlike 2.0 license.  See
@uref{http://creativecommons.org/licenses/by-nc-sa/2.0/}

Copyright @copyright{} 2004 Joseph R. Kiniry and University College
Dublin.

@quotation
You are free:
@itemize
@item
to copy, distribute, display, and perform the work
@item
to make derivative works
@end itemize

Under the following conditions:
@itemize
@item
Attribution. You must give the original author credit.
@item
Noncommercial. You may not use this work for commercial purposes.
@item
Share Alike. If you alter, transform, or build upon this work, you may
distribute the resulting work only under a license identical to this
one.
@end itemize

For any reuse or distribution, you must make clear to others the license
terms of this work.

Any of these conditions can be waived if you get permission from the
author.

Your fair use and other rights are in no way affected by the above.

This is a human-readable summary of the Legal Code.

See @uref{http://creativecommons.org/licenses/by-nc-sa/2.0/legalcode}
@end quotation

@end copying

@c %**end of summary and copyright
@c =============================================================================

@c =============================================================================
@c %**title, contents, and copyright

@titlepage
@title Extending ESC/Java2
@subtitle Edition $Revision$, November 2004
@subtitle This document describes how to extend ESC/Java2 version 2.0a8 and later.
@author Joseph R. Kiniry <kiniry@@acm.org>

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

@c To be published by the KindSoftware Research Group, Department of
@c Computer Science, University College Dublin as technical report TBD
@c See @uref{http://secure.ucd.ie/}
@end titlepage

@c metadata used in HTML
@documentdescription
ESC/Java, ESC/Java2, Java Modeling Language, JML, Extended Static
Checking, Extended Static Checker, Design by Contract, Java,
Verification, BISL, Object-oriented Logic, Behavioral Interface
Specification Language, Extending, Lexer, Parser, Kiniry
@end documentdescription

@c Output the table of contents at the beginning.
@contents

@c %**end of title, contents, and copyright
@c =============================================================================

@c =============================================================================
@c %**top node and master menu

@c We recommend including the copying permissions here as well as the
@c segments above.
@ifnottex
@node Top, Introduction, (dir), (dir)
@top Extending ESC/Java2

@insertcopying
@end ifnottex

This document describes how to extend ESC/Java2.  It describes the
high-level architecture of the system and how to extend it through a
series of case studies.

@menu
* Introduction::                An introduction to this document.
* ESC/Java2 Architecture::      A summary of the architecture.
* The ESC/Java2 AST::           The abstract symbol table/tree.
* Extending the ESC/Java2 Lexer::  Turning bytes into tokens.
* Extending the ESC/Java2 Parser::  Turning tokens into an AST.
* Extending the ESC/Java2 Type Checker::  Type checking the AST.
* Extending the VC Generation Calculus::  Generating verification conditions.
* Extending the ESC/Java2 Logics::  Axioms about Java and JML.
* The Theorem Prover Interface::  Adding a new prover.
* Testing Extensions::          How to test your extension.
* Copying::                     Your rights and freedoms.
* Index::                       Complete index.
@end menu

@c %**end top node and master menu
@c =============================================================================

@c =============================================================================
@c %**body

@node Introduction, ESC/Java2 Architecture, Top, Top
@chapter Introduction

@cindex Introduction

This document describes how to extend ESC/Java2.  It describes the
high-level architecture of the system and how to extend it through a
series of case studies.

The case studies discussed were chosen because they: (a) focused on each
independent aspects of the architecture, (b) were relatively small and
self-contained examples, and (c) they were additions that we made to the
original SRC ESC/Java system, thus writing them up in this manner was
straightforward.

@c =============================================================================
@node ESC/Java2 Architecture, The ESC/Java2 AST, Introduction, Top
@chapter ESC/Java2 Architecture

@cindex ESC/Java2 Architecture

ESC/Java2 is an extension of Digital/Compaq/Hewlett-Packard System
Research Center's (SRC henceforth) ESC/Java.

ESC/Java2 has two primary subcomponents: a generic Java front-end in the
Java package @var{javafe} and the extended static checking framework
found in the package @var{escjava}.

There are a few other classes used for testing found in the
@var{junitutils} package.  We discuss this part of the architecture in
@ref{X}.
@c fill in cross-reference

ESC/Java depended at one time (and perhaps still today) upon a few
external packages that we do not have the source for.  These relevant
packages are called @var{mochalib}, @var{decsrc}, @var{jtools}, and
@var{tohtml}@footnote{There are also a number of deprecated packages
currently included in the CVS repository for ESC/Java2 including
@var{escwizard}, @var{houdini}, and @var{instrumenter}.  These packages
are not used or supported at this time and we plan on removing them from
the CVS HEAD in the near future.  See Bug #X for more information.}

@c analyse and discuss these packages somewhere and xref here

ESC/Java2 depends upon a number of Open Source Java libraries whose Java
archive (jar) files are provided with the source release.  The current
packages on which we depend include Ant, jUnit, and XML-RPC libraries.
@c add hyperlinks/cites to these libraries

@section The Generic Java Front-end
@cindex The Generic Java Front-end

ESC/Java2 uses the generic Java front-end developed by SRC, available as
an independent download from http://todo.  The only modifications that
have been made to the javafe package are the addition of support for the
assert statement that was added to the Java languange in the Java 1.4
release.  We discuss this extension as the first case study, found in
@ref{X}.

The main subcomponents of the Java front-end are a Java lexer, a parser,
and typechecker.  An abstract symbol tree (AST) is used to represent the
parsed Java classes.  Command-line option parsing is another major
subcomponent that most extensions need to modify.  Finally, there are a
number of classes used to search for source and class files in the
classpath, read in source and class files and cache their locations and
contents, and track warning and errors and related data that are
detected during compilation.

@section The Extended Static Checker for Java
@cindex The Extended Static Checker for Java

The extended static checker for Java has several major subcomponents
discussed herein.  

A full JML parser and typechecker is the first main component.  It is
realised as a specialisation of the generic pragma parser in the Java
front-end.  Conseqently, an AST hierarchy also exists for JML
constructs.  

@c ant ast backpred gui pa parser prover reader sp tc translate vcGenertion

@c =============================================================================
@node The ESC/Java2 AST, Extending the ESC/Java2 Lexer, ESC/Java2 Architecture, Top
@chapter The ESC/Java2 AST

@cindex The ESC/Java2 AST

@c =============================================================================
@node Extending the ESC/Java2 Lexer, Extending the ESC/Java2 Parser, The ESC/Java2 AST, Top
@chapter Extending the ESC/Java2 Lexer

@cindex Extending the ESC/Java2 Lexer

@c =============================================================================
@node Extending the ESC/Java2 Parser, Extending the ESC/Java2 Type Checker, Extending the ESC/Java2 Lexer, Top
@chapter Extending the ESC/Java2 Parser

@cindex Extending the ESC/Java2 Parser

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@menu
* The Java Parser::             
* The Java Modeling Language Parser::  
@end menu

@node The Java Parser, The Java Modeling Language Parser, Extending the ESC/Java2 Parser, Extending the ESC/Java2 Parser
@section The Java Parser

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@node The Java Modeling Language Parser,  , The Java Parser, Extending the ESC/Java2 Parser
@section The Java Modeling Language Parser

@c =============================================================================
@node Extending the ESC/Java2 Type Checker, Extending the VC Generation Calculus, Extending the ESC/Java2 Parser, Top
@chapter Extending the ESC/Java2 Type Checker

@cindex Extending the ESC/Java2 Type Checker

@c =============================================================================
@node Extending the VC Generation Calculus, Extending the ESC/Java2 Logics, Extending the ESC/Java2 Type Checker, Top
@chapter Extending the VC Generation Calculus

@cindex Extending the VC Generation Calculus

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@section The ESC/Java2 Weakest Precondition Calculus

@c =============================================================================
@node Extending the ESC/Java2 Logics, The Theorem Prover Interface, Extending the VC Generation Calculus, Top
@chapter Extending the ESC/Java2 Logics

@cindex Extending the ESC/Java2 Logics

@c =============================================================================
@node The Theorem Prover Interface, Testing Extensions, Extending the ESC/Java2 Logics, Top
@chapter The Theorem Prover Interface

@cindex The Theorem Prover Interface

@c =============================================================================
@node Testing Extensions, Copying, The Theorem Prover Interface, Top
@chapter Testing Extensions

@cindex Testing Extensions

@c =============================================================================
@node Copying, Index, Testing Extensions, Top
@appendix Copying

@cindex Copying

@insertcopying

@c %**end of body
@c =============================================================================

@c =============================================================================
@c %**end of document

@node Index,  , Copying, Top
@unnumbered Index

@printindex cp

@bye
