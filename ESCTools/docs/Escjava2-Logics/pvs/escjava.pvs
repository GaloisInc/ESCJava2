% The ESC/Java2 unsorted logic.
%
% This is the unsorted logic used by ESC/Java2.
%
% $Id$
%
% It was written by Joe Kiniry, Cesare Tinelli, Patrice Chalin, and
% Clement Hurlin in 2005.
%
% This is the canonical unsorted logic which is meant to be
% semantically equivalent to the original Simplify logic.

escjava_types : THEORY
  BEGIN
    S : TYPE+
  END escjava_types

escjava_builtin_array_theory : THEORY
  BEGIN
    IMPORTING escjava_types

    select : [ S, S -> S ]
    store : [ S, S, S -> S ]

    % === ESCJ 8: Section 0.4

    select_store1 : AXIOM
      FORALL (m, i, x : S): select (store (m, i, x), i) = x

    select_store2 : AXIOM
      FORALL (m, i, j, x : S): i /= j IMPLIES 
                               select(store(m, i, x), j) = select(m, j)

  END escjava_builtin_array_theory

escjava_builtin_array_theory_lemmas : THEORY
  BEGIN
    IMPORTING escjava_builtin_array_theory

    map, map0, map1, index, index0, index1, value, value0, value1 : VAR S

    ss0 : LEMMA
      FORALL (map, index, value) :
        select(store (map, index, value), index) = value

  END escjava_builtin_array_theory_lemmas

escjava_java_typesystem : THEORY
  BEGIN
    IMPORTING escjava_builtin_array_theory,
              orders[S]

    % === ESCJ 8: Section 1.1

    % We will use '<=' in PVS for '<:' in the Simplify logic.  Thus,
    % <= is reflexive, transitive, and antisymmetric.
    <= : ({R : PRED[[S, S]] | 
         reflexive?(R) AND transitive?(R) AND antisymmetric?(R)})

    % The base type in Java (java.lang.Object).

    T_java_lang_Object : S

    % Primative types are final.

    T_boolean, T_char, T_byte, T_short, T_int, T_long, T_float, T_double : S

    primitive?(c : S): bool = (c = T_boolean) OR
                              (c = T_char) OR 
                              (c = T_byte) OR 
                              (c = T_short) OR 
                              (c = T_int) OR
                              (c = T_long) OR
                              (c = T_float) OR
                              (c = T_double)

    primative_types_are_final : AXIOM
      FORALL (c, p : S): c <= p AND primitive?(p) IMPLIES c = p
    primative_types_have_no_proper_supertypes : AXIOM
      FORALL (c, p : S): c <= p AND primitive?(c) IMPLIES p = c

    java_lang_Object_is_Top : AXIOM
      FORALL (c : S): NOT primitive?(c) IMPLIES c <= T_java_lang_Object
    % This could be expressed also using upper_bound?

    % === ESCJ 8: Section 1.2

    % Another employment of the 'as' trick, faking types/sorts on an
    % untyped/unsorted logic.
    % 'as' trick in use.
    asChild : [S, S -> S]
    % If t0 is a proper subclass of t2, then classDown(t2, t0) is
    % the direct subclass of t2 that is a superclass of t0.
    classDown : [S, S -> S]

    classDown_definition : AXIOM
      FORALL (t0, t1, t2 : S): t0 <= asChild(t1, t2) IMPLIES 
                               classDown(t2, t0) = asChild(t1, t2)

    % === ESCJ 8: Section 1.3

    T_java_lang_Cloneable : S

    elemtype : [S -> S]
    array_constructor : [S -> S]

    arrays_are_cloneable : AXIOM
      FORALL (t : S): array_constructor(t) <= T_java_lang_Cloneable
    elemtype_definition : AXIOM
      FORALL (t : S): elemtype(array_constructor(t)) = t
    array_subtyping : AXIOM
      FORALL (t0, t1 : S): t0 <= array_constructor(t1) IFF
                           (t0 = array_constructor(elemtype(t0)) AND 
                            elemtype(t0) <= t1)

    % === ESCJ 8: Section 2.1

    is : [ S, S -> bool ]
    cast : [ S, S -> S ]

    redundant_cast_removal : AXIOM
      FORALL (x, t : S): is(x, t) IMPLIES cast(x, t) = x

    % === ESCJ 8: Section 2.2

    bool_false, bool_true : S

    java_false_and_true_are_distinct : AXIOM
      bool_false /= bool_true;

    java_null : S

    Javas_boolTrue_differs_from_Javas_boolFalse : AXIOM
      bool_false /= bool_true

    % Not in ESCJ8, but should be
    refEQ, refNE : [ S, S -> S ]

    refEQ : AXIOM
      FORALL (x, y : S): refEQ(x, y) = bool_true IFF x = y

    refNE : AXIOM
      FORALL (x, y : S): refNE(x, y) = bool_true IFF x /= y

  END escjava_java_typesystem

escjava_java_boolean_ops : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem

    % === ESCJ 8: Section 5.2

    boolAnd (a, b : S): bool = a = bool_true AND b = bool_true
    boolEq (a, b : S): bool = a = bool_true IFF b = bool_true
    boolImplies (a, b : S): bool = a = bool_true IMPLIES b = bool_true
    boolNE (a, b : S): bool = NOT (a = bool_true IFF b = bool_true)
    boolNot (a : S): bool = NOT (a = bool_true)
    boolOr (a, b : S): bool = a = bool_true OR b = bool_true

    % Added to make the translation of the pretty-printer easier.

%     S_to_bool(a : S) : bool = 
% 	if(a = bool_true) 
% 	  then true 
% 	  else false
% 	endif 

    bool_to_S(a : bool) : S = 
	if(a) 
	  then bool_true 
	  else bool_false
	endif 
	
%    CONVERSION+ S_to_bool
    CONVERSION+ bool_to_S

    % === ESCJ 8: Section 5.3

    % Java's ternary 'conditional' operator (? :)

    termConditional (b, x, y : S): S = IF b = bool_true
                                         THEN x
                                         ELSE y
                                       ENDIF

    termConditional_elimination : LEMMA
      FORALL (x, y : S): termConditional(bool_true, x, y) = x
    termConditional_falsehood : LEMMA
      FORALL (b, x, y : S): b /= bool_true IMPLIES
                            termConditional(b, x, y) = y

  END escjava_java_boolean_ops

escjava_java_integral_types : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem
    
    % === ESCJ 8: Section 2.2.1

    % Axioms to express the size of the basic types.
    S_to_real : [ S -> real ]
    CONVERSION+ S_to_real
	
    % Additional axiom for the translation
    real_to_S : [ real -> S ]
    CONVERSION+ real_to_S

    intFirst, intLast, longFirst, longLast : real

    range_of_char : AXIOM
      FORALL (x : S): is(x, T_char) IFF 0 <= x AND x <= 65535
    range_of_byte : AXIOM
      FORALL (x : S): is(x, T_byte) IFF -128 <= x AND x <= 127
    range_of_short : AXIOM
      FORALL (x : S): is(x, T_short) IFF -32768 <= x AND x <= 32767
    range_of_int : AXIOM
      FORALL (x : S): is(x, T_int) IFF intFirst <= x AND x <= intLast
    range_of_long : AXIOM
      FORALL (x : S): is(x, T_long) IFF longFirst <= x AND x <= longLast

    intFirst_definition : AXIOM
      longFirst < intFirst AND intFirst < -1000000 AND 1000000 < intLast AND intLast < longLast

  END escjava_java_integral_types

escjava_java_integral_ops : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem

    % === ESCJ 8: Section 5.1

    integralMod : [ S, S -> S ]
    integralDiv : [ S, S -> S ]

    S_to_numfield : [ S -> numfield ]
    numfield_to_S : [ numfield -> S ]
    CONVERSION+ S_to_numfield, numfield_to_S

    integral_mod_div1 : AXIOM
      FORALL (i, j : S): integralDiv(i, j) * j + integralMod(i, j) = i

    integral_mod_div2 : AXIOM
      FORALL (i, j : S): 0 < j IMPLIES
                         (0 <= integralMod(i, j) AND
                          integralMod(i, j) < j)

    integral_mod_div3 : AXIOM
      FORALL (i, j : S): j < 0 IMPLIES
                         (j < integralMod(i, j) AND
                          integralMod(i, j) <= 0)

    integral_mod_div4 : AXIOM
      FORALL (i, j : S): integralMod(i + j, j) = integralMod(i, j)

    integral_mod_div5 : AXIOM
      FORALL (i, j : S): integralMod(j + i, j) = integralMod(i, j)

    integral_mod_div6 : AXIOM
      FORALL (i, j : S): i /= 0 IMPLIES integralMod(0, i) = 0

    integral_div_definition : AXIOM
      FORALL (x, y : S): integralDiv(x * y, y) * y = x * y

    integralEQ, integralGE, integralGT, integralLE, integralLT, integralNE : [ S, S -> S ]
    integralEQ_definition : AXIOM
      FORALL (x, y : S): integralEQ(x, y) = bool_true IFF x = y
    integralGE_definition : AXIOM
      FORALL (x, y : S): integralGE(x, y) = bool_true IFF x >= y
    integralGT_definition : AXIOM
      FORALL (x, y : S): integralGT(x, y) = bool_true IFF x > y
    integralLE_definition : AXIOM
      FORALL (x, y : S): integralLE(x, y) = bool_true IFF x <= y
    integralLT_definition : AXIOM
      FORALL (x, y : S): integralLT(x, y) = bool_true IFF x < y
    integralNE_definition : AXIOM
      FORALL (x, y : S): integralNE(x, y) = bool_true IFF x /= y

    % === Axioms about properties of integral &, |, and /

    integralAnd, integralOr, integralXor, intShiftL, longShiftL : [ S, S -> S ]
    integralAnd_definition1 : AXIOM
      FORALL (x, y : S): (0 <= x OR 0 <= y) IMPLIES
                         0 <= integralAnd(x, y)
    integralAnd_definition2 : AXIOM
      FORALL (x, y : S): 0 <= x IMPLIES
                         integralAnd(x, y) <= x
    integralAnd_definition3 : AXIOM
      FORALL (x, y : S): 0 <= y IMPLIES
                         integralAnd(x, y) <= y
    integralOr_definition : AXIOM
      FORALL (x, y : S): (0 <= x AND 0 <= y) IMPLIES
                         x <= integralOr(x, y) AND y <= integralOr(x, y)
    integralDiv_definition : AXIOM
      FORALL (x, y : S): (0 <= x AND 0 <= y) IMPLIES
                         0 <= integralDiv(x, y) AND integralDiv(x, y) <= x
    integralXor_definition : AXIOM
      FORALL (x, y : S): (0 <= x AND 0 <= y) IMPLIES
                         0 <= integralXor(x, y)
    intShiftL_definition : AXIOM
      FORALL (n : S): (0 <= n AND n < 31) IMPLIES
                      1 <= intShiftL(1, n)
    longShiftL_definition : AXIOM
      FORALL (n : S): (0 <= n AND n < 63) IMPLIES
                      1 <= longShiftL(1, n)

  END escjava_java_integral_ops

escjava_java_floating_point : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem

    % === A few floating point axioms - DRCok

    floatingEQ, floatingGE, floatingGT, floatingLE, floatingLT, floatingNE : [ S, S -> S ]
    floatingADD, floatingMUL, floatingMOD : [ S, S -> S ]
    floatingNEG : [ S -> S ]

    order_axiom : AXIOM
      FORALL (d, dd : S):
        (floatingLT(d, dd) = bool_true OR
         floatingEQ(d, dd) = bool_true OR
         floatingGT(d, dd) = bool_true) AND
        floatingLE(d, dd) = bool_true IFF floatingEQ(d, dd) = bool_true OR floatingLT(d, dd) = bool_true AND
        floatingGE(d, dd) = bool_true IFF floatingEQ(d, dd) = bool_true OR floatingGT(d, dd) = bool_true AND
        floatingLT(d, dd) = bool_true IFF floatingGT(dd, d) = bool_true AND
        floatingLE(d, dd) = bool_true IFF floatingGE(dd, d) = bool_true AND
        NOT (floatingLT(d, dd) = bool_true IFF floatingGE(d, dd) = bool_true) AND
        NOT (floatingGT(d, dd) = bool_true IFF floatingLE(d, dd) = bool_true)

    floatingNE_definition : AXIOM
      FORALL (d, dd : S): floatingEQ(d, dd) = bool_true IFF NOT floatingNE(d, dd) = bool_true

    F_0_0 : S

    floatingADD_definition : AXIOM
      FORALL (d, dd : S): (floatingGT(d, floatingNEG(dd)) = bool_true) IMPLIES
                          floatingGT(floatingADD(d, dd), F_0_0) = bool_true

    % currently commented out/incomplete in ESC/Java unsorted logic
    % floatingMUL_definition : AXIOM
    %   FORALL (d, dd : S): ...

    floatingMOD_definition1 : AXIOM
      FORALL (d, dd : S): (floatingNE(d, F_0_0) = bool_true) IMPLIES
                          (floatingGE(d, F_0_0) = bool_true AND
                           floatingGE(floatingMOD(d, dd), F_0_0) = bool_true AND
                           floatingLE(d, F_0_0) = bool_true AND
                           floatingLE(floatingMOD(d, dd), F_0_0) = bool_true)
    floatingMOD_definition2 : AXIOM
      FORALL (d, dd : S): (floatingGT(d, F_0_0) = bool_true) IMPLIES
                          (floatingGT(floatingMOD(d, dd), floatingNEG(dd)) = bool_true AND
                           floatingLT(floatingMOD(d, dd), dd) = bool_true)
    floatingMOD_definition3 : AXIOM
      FORALL (d, dd : S): (floatingLT(dd, F_0_0) = bool_true) IMPLIES
                          floatingLT(floatingMOD(d, dd), floatingNEG(dd)) = bool_true
    floatingMOD_definition4 : AXIOM
      FORALL (d, dd : S): (floatingLT(dd, F_0_0) = bool_true) IMPLIES
                          floatingGT(floatingMOD(d, dd), dd) = bool_true

  END escjava_java_floating_point

escjava_java_field_representation : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem,
              escjava_jml_semantics

    S_to_real : [ S -> real ]
    CONVERSION+ S_to_real

    % === ESCJ 8: Section 2.4

    % 'as' trick in use.
    asField : [ S, S -> S ]
    asField_definition : AXIOM
      FORALL (f, t, x : S): is(select(asField(f, t), x), t)

    % === ESCJ 8: Section 2.5

    % 'as' trick in use.
    asElems : [ S -> S ]
    asElems_definition : AXIOM
      FORALL (e, a, i : S): is(select(select(asElems(e), a), i),
                               elemtype(typeof(a)))

    % === ESCJ 8: Section 3.0

    vAllocTime : [ S -> S ]
    isAllocated (x, a0 : S): bool = vAllocTime(x) < a0

    % === ESCJ 8: Section 3.1

    fClosedTime : [ S -> S ]
    fClosedTime_definition : AXIOM
      FORALL (x, f, a0 : S): 
        (fClosedTime(f) < a0 AND isAllocated(x, a0)) IMPLIES
        isAllocated(select(f, x), a0)

    % === ESCJ 8: Section 3.2

    eClosedTime : [ S -> S ]
    eClosedTime_definition : AXIOM
      FORALL (a, e, i, a0 : S):
        (eClosedTime(e) < a0 AND isAllocated(a, a0)) IMPLIES
        isAllocated(select(select(e, a), i), a0)        

    % === Axioms about classLiteral; not in ESCJ 8 (yet?):

    classLiteral : [ S -> S ]
    T_java_lang_Class : S
    % TODO: review use of alloc
    alloc : S

    classLiteral_definition1 : AXIOM
      FORALL (t : S): classLiteral(t) /= java_null AND
                      is(classLiteral(t), T_java_lang_Class) AND
                      isAllocated(classLiteral(t), alloc)

    classLiteral_definition2 : AXIOM
      FORALL (t : S): classLiteral(t) = t

  END escjava_java_field_representation

escjava_java_strings : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem,
              escjava_jml_semantics

    T_java_lang_String : S
    stringCat (x, y : S): S

    stringCat_definition1 : AXIOM
      FORALL (x, y : S): stringCat(x, y) /= java_null AND
                         typeof(stringCat(x, y)) <= T_java_lang_String

  END escjava_java_strings

escjava_java_semantics : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem,
              escjava_java_boolean_ops,
              escjava_java_integral_types,
              escjava_java_integral_ops,
              escjava_java_floating_point,
              escjava_java_field_representation,
              escjava_java_strings
  END escjava_java_semantics

escjava_lock_semantics : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem,
              escjava_jml_semantics,
              escjava_java_field_representation,
	      escjava_java_integral_ops

    LS : S

    % === ESCJ 8: Section 4

    % 'as' trick in use.
    asLockSet : [ S -> S ]
    max : [ S -> S ]
    max_of_a_lockset_is_a_lockset : AXIOM
      FORALL (s : S): select(asLockSet(s), max(asLockSet(s))) = bool_true

    % null is in lockset (not in ESCJ 8)
    null_is_in_lockset : AXIOM
      FORALL (s : S): select(asLockSet(s), java_null) = bool_true

%     lockLE (x, y : S): bool = x <= y
%     lockLT (x, y : S): bool = x < y

    lockLE (x, y : S): S = integralLE(x, y)
    lockLT (x, y : S): S = integralLT(x, y)

    % all locks in lockset are below max(lockset) (not in ESCJ 8)
    all_locks_in_lockset_are_below_max_lockset : AXIOM
      FORALL (s, mu : S): select(asLockSet(s), mu) = bool_true IMPLIES
                          lockLE(mu, max(asLockSet(s))) = bool_true

    % null precedes all objects in locking order (not in ESCJ 8)
    null_precedes_all_objects : AXIOM
      FORALL (x : S): typeof(x) <= T_java_lang_Object IMPLIES
                      lockLE(java_null, x) = bool_true

  END escjava_lock_semantics

escjava_arrays : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem,
              escjava_java_field_representation,
              escjava_java_integral_types

    % === ESCJ 8: Section 5.0

    arrayLength : [ S -> S ]
    arrayLength_definition : AXIOM
      FORALL (a : S): 0 <= arrayLength(a) AND 
                      is(arrayLength(a), T_int)

    % elems will be eliminated in the new logic, at a cost of
    % complexity in the translator of course, and instead separate
    % maps will be introduced for each array.  This will make the
    % logic cleaner and possibly help the prover be more efficient.
    elems : S
    arrayFresh : [ S, S, S, S, S, S, S -> bool ]
    arrayMake : [ S, S, S, S, S -> S ]
    arrayShapeOne : [ S -> S ]
    arrayShapeMore : [ S, S -> S ]
    arrayParent : [ S -> S ]
    arrayPosition : [ S -> S ]

    array_axiom1 : AXIOM
      FORALL (a, a0, b0, e, n, s, T, v : S):
        arrayFresh(a, a0, b0, e, arrayShapeMore(n, s), T, v) IFF
        (a0 <= vAllocTime(a) AND
         isAllocated(a, b0) AND
         a /= java_null AND
         typeof(a) = T AND
         arrayLength(a) = n AND
         FORALL (i : S):
           arrayFresh(select(select(e, a), i), a0, b0, e, s, elemtype(T), v) AND
           arrayParent(select(select(e, a), i)) = a AND
           arrayPosition(select(select(e, a), i)) = i)

    array_axiom2 : AXIOM
      FORALL (a, a0, b0, e, n, T, v : S):
        arrayFresh(a, a0, b0, e, arrayShapeOne(n), T, v) IFF
        (a0 <= vAllocTime(a) AND
         isAllocated(a, b0) AND
         a /= java_null AND
         typeof(a) = T AND
         arrayLength(a) = n AND
         FORALL (i : S):
           select(select(e, a), i) = v)

    array_axiom3 : AXIOM
      FORALL (a0, b0, e, s, T, v : S):
        arrayFresh(arrayMake(a0, b0, s, T, v), a0, b0, elems, s, T, v)

    array_axiom4: AXIOM
      FORALL (a0, b0, a1, b1, s1, s2, T1, T2, v : S):
        (arrayMake(a0, b0, s1, T1, v) = arrayMake(a1, b1, s2, T2, v)) IMPLIES
        (b0 = b1 AND T1 = T2 AND s1 = s2)

    % === code to ensure that (isNewArray x) ==> x has no invariants

    % arrayType represents the type from which all Java arrays inherit.
    arrayType : S

    % arrayType is distinct from all types with invariants (due to the
    % generated type-distinctness axiom)
    arrayType_distinct : AXIOM
      arrayType = asChild(arrayType, T_java_lang_Object)

    isNewArray : [ S -> S ]

    arrayType_definition : AXIOM
      FORALL (t : S): array_constructor(t) <= arrayType
    arrayType_is_top : AXIOM
      FORALL (s : S):
        (bool_true = isNewArray(s)) IMPLIES
        typeof(s) <= arrayType

    % === Implementation of nonnullelements; not in ESCJ 8 (yet?):

    nonnullelements (x, e : S): bool =
      x /= java_null AND
      FORALL (i : S):
        (0 <= i AND i < arrayLength(x)) IMPLIES
        select(select(e, x), i) /= java_null

  END escjava_arrays

escjava_jml_semantics : THEORY
  BEGIN
    IMPORTING escjava_java_typesystem

    % === Define typeof for primitive types - DRCok
    typeof : [ S -> S ]

    typeof_char : AXIOM
      FORALL (x : S): is(x, T_char) IFF typeof(x) = T_char
    typeof_byte : AXIOM
      FORALL (x : S): is(x, T_byte) IFF typeof(x) = T_byte
    typeof_short : AXIOM
      FORALL (x : S): is(x, T_short) IFF typeof(x) = T_short
    typeof_int : AXIOM
      FORALL (x : S): is(x, T_int) IFF typeof(x) = T_int
    typeof_long : AXIOM
      FORALL (x : S): is(x, T_long) IFF typeof(x) = T_long
    typeof_float : AXIOM
      FORALL (x : S): is(x, T_float) IFF typeof(x) = T_float
    typeof_double : AXIOM
      FORALL (x : S): is(x, T_double) IFF typeof(x) = T_double

    % === ESCJ 8: Section 2.3

    typeof_reference_definition : AXIOM
      FORALL (x, t : S): t <= T_java_lang_Object IMPLIES
                         x = t IFF (x = java_null OR typeof(x) <= t)

  END escjava_jml_semantics

escjava_logic : THEORY
  BEGIN
    IMPORTING escjava_java_semantics,
              escjava_jml_semantics,
              escjava_lock_semantics,
              escjava_arrays

  EXPLIES(a, b : bool) : bool = a OR (NOT b) 

  END escjava_logic
