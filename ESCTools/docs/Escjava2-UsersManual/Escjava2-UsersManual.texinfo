\input texinfo   @c -*-texinfo-*-
@c %**start of header

@setfilename Escjava2-UsersManual.info
@settitle The ESC/Java2 User's Manual $Revision$
@c Other commands that globally affect the document formatting: 
@c synindex, footnotestyle
@afourwide
@paragraphindent 0
@c firstparagraphindent 0
@c %**end of header
@c =============================================================================

@c =============================================================================
@c Definitions of new indices for this document

@c =============================================================================
@c Functions are indexed using the built-in @findex
@c Predicates are indexed using @pindex
@defcodeindex p
@c Constants are indexed using @kindex
@defcodeindex k

@c Map predicates (pindex) and constants (kindex) the function index.

@syncodeindex p fn
@syncodeindex k fn

@c =============================================================================

@c =============================================================================
@c %**summary and copyright

Original version of user's manual (document SRC Technical Note 2000-002
and ESCJ 27) by K. Rustan M. Leino, Greg Nelson, and James B. Saxe,
October 12, 2000.

Modified by Joseph Kiniry 1 April 2007.
Modified by Dermot Cochran 14-15 January 2008.

Current editors Joseph Kiniry and Dermot Cochran.

This document describes ESC/Java2.  All ``public'' features of ESC/Java2
are described in some detail with examples.  Some ``private'' (research)
features that are under development are described herein as well.

This is edition $Revision$.

This document is a work in progress.  Suggestions and input are always
welcome.

@copying
Portions of ``The ESC/Java2 User's Manual'' is licensed under
the Creative Commons Attribution-NonCommercial-ShareAlike 2.0 license.
See @uref{http://creativecommons.org/licenses/by-nc-sa/2.0/}

Portions Copyright @copyright{} 1999, 2000 K. Rustan Leino, Greg Nelson,
Jim Saxe, and Compaq Computer Corporation.

Portions Copyright @copyright{} 2007, 2008 Joseph R. Kiniry and University
College Dublin.

Portions Copyright @copyright{} 2010 Joseph R. Kiniry and IT University
of Copenhagen.

@b{Original Compaq limitation of liability:} This publication and the
software it describes are provided ``as is'' without warranty of any
kind, express or implied, including, but not limited to, the implied
warranties of merchantability, fitness for a particular purpose, or
non-infringement.

This publication could include technical inaccuracies or typographical
errors.  Furthermore, the Compaq Extended Static Checker for Java
(ESC/Java) is currently under development.  Compaq therefore expects
that changes will occur in the ESC/Java software and documentation, from
time to time.  Compaq reserves the right to adopt such changes, or to
cause or recommend that ESC/Java users adopt such changes, upon such
notice as is practicable under the circumstances or without any notice,
in its discretion.

The Compaq Extended Static Checker for Java (ESC/Java) is not a product
of Sun Microsystems, Inc.

Compaq is a registered trademark of Compaq Computer Corporation.  Java
is a trademark or registered trademark of Sun Microsystems, Inc.  UNIX
is a registered trademark in the United States and other countries,
exclusively licensed through X/Open Company, Ltd.  Windows is a
registered trademark of Microsoft Corporation.  PostScript is a
registered trademark of Adobe Systems, Inc.  All other trademarks or
registered trademarks mentioned herein are the property of their
respective holders.

@b{Mobius declaration:}
This work was funded in part by the Information Society Technologies
programme of the European Commission, Future and Emerging Technologies
under the IST-2005-015905 MOBIUS Project. 

This presentation reflects only the author's views; the Community is not
liable for any use that may be made of the information contained therein.

@quotation
You are free:
@itemize
@item
to copy, distribute, display, and perform the work
@item
to make derivative works
@end itemize

Under the following conditions:
@itemize
@item
Attribution. You must give the original author credit.
@item
Noncommercial. You may not use this work for commercial purposes.
@item
Share Alike. If you alter, transform, or build upon this work, you may
distribute the resulting work only under a license identical to this
one.
@end itemize

For any reuse or distribution, you must make clear to others the license
terms of this work.

Any of these conditions can be waived if you get permission from the
author.

Your fair use and other rights are in no way affected by the above.

This is a human-readable summary of the Legal Code.

See @uref{http://creativecommons.org/licenses/by-nc-sa/2.0/legalcode}
@end quotation

@end copying

@c %**end of summary and copyright
@c =============================================================================

@c =============================================================================
@c %**title, contents, and copyright

@titlepage
@title The ESC/Java2 User's Manual
@subtitle Edition $Revision$, April 2010
@subtitle This document describes the ESC/Java2 version 2.0b0 and later.
@author Joseph R. Kiniry <kiniry@@acm.org>

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

@c To be published by the KindSoftware Research Group, Software
@c Development Group, IT University of Copenhagen as technical report
@c See @uref{http://kindsoftware.com/}
@end titlepage

@c metadata used in HTML
@documentdescription
ESC/Java, ESC/Java2, Java Modeling Language, JML, Extended Static
Checking, Extended Static Checker, Design by Contract, Java,
Verification, BISL, Object-oriented Logic, Behavioral Interface
Specification Language, User's Guide, Kiniry
@end documentdescription

@c Output the table of contents at the beginning.
@contents

@c %**end of title, contents, and copyright
@c =============================================================================

@macro escjava
ESC/Java2
@end macro

@c =============================================================================
@c %**top node and master menu

@c We recommend including the copying permissions here as well as the
@c segments above.
@ifnottex
@node Top, Preface, (dir), (dir)
@top The ESC/Java2 User's Guide

@insertcopying
@end ifnottex

This document describes ESC/Java2.  All ``public'' features of ESC/Java2
are described in some detail with examples.  Some ``private'' (research)
features that are under development are described herein as well.

The @emph{Extended Static Checker for Java, version 2} (ESC/Java2) is a
programming tool that attempts to find common runtime errors in Java
programs by static analysis of the program text.  Users can control the
amount and kinds of checking that ESC/Java2 performs by annotating their
programs with specially formatted comments called @emph{pragmas} in the
Java Modeling Language (JML).  

This manual is designed to serve both as an introduction to ESC/Java2
and as a reference manual.  It starts by providing an overview of
ESC/Java2 through several illustrative examples of its use and a summary
of its features, and then goes on to document all the core JML
annotations supported by ESC/Java2 and all the kinds of warnings that it
generates.  Appendices provide a brief sketch of ESC/Java2's
implementation, information about obtaining ESC/Java2, and some
discussion of its limitations.

@c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@menu
* Preface::                     
* Acknowledgments::             
* An illustrative example of using ESC/Java2::  
* An Overview of ESC/Java2 and of this Manual::  
* ESC/Java2 Pragmas::           
* Specification Expressions::   
* Warnings::                    
* Command-line Options and Environment Variables::  
* Java Language Support and Limitations::  
* Appendix A: Overview of how ESC/Java Works::  
* Appendix B: Installing and Using ESC/Java2 at your Site::  
* Appendix C: Sources of Unsoundness and Incompleteness ESC/Java::  
* References::                  
@end menu

@c =============================================================================
@node Preface, Acknowledgments, Top, Top
@section Preface

ESC/Java2 is based upon the @emph{Compaq Extended Static Checker for
Java} (henceforce, ESC/Java).  ESC/Java is a programming tool that
attempts to find common runtime errors in Java programs by static
analysis of the program text.  Users can control the amount and kinds of
checking that ESC/Java performs by annotating their program with
specially formatted comments called @emph{pragmas}.  The pragmas
supported by ESC/Java1 were a small superset of a subset of those
pragmas available in the Java Modeling Language (JML).

ESC/Java2 improves upon ESC/Java1 in several ways.  ESC/Java2
@itemize
@item
supports the full Java Modeling Language, in particular it
@itemize
@item
checks frame conditions,
@item
supports annotations that contain (pure) method calls,
@item
supports reasoning with model fields and methods,
@item
reasoning with first-order assertions,
@item
automatically generates rich loop annotations,
@item
is integrated with the Eclipse Java development platform,
@end itemize
@item 
reasons in several new, more powerful logics,
@item
reasons about specifications as well as code, and
@item
uses several automatic and interactive theorem provers to perform
verification.
@item
@end itemize

This manual starts by providing an overview of ESC/Java2 through an
illustrative example of its use and a summary of its features, and then
goes on to document all the core JML pragmas supported by ESC/Java2 and
all the kinds of warnings that it generates.  It also provides basic
information about running ESC/Java2.

This manual documents Version 2.0b4 of ESC/Java2, released in January,
2008.  We sometimes speak of ``the current ESC/Java2'', rather than just
``ESC/Java2''--to emphasize that particular features, bugs, or
limitations under discussion are artifacts of the prior versions,
particularly ESC/Java1, and may be subject to change in future versions.
Of course, there is no guarantee that all such aspects of ESC/Java2 will
in fact change (nor that other aspects will remain unchanged) as the
tool evolves.

This manual is designed to serve both as an introduction to ESC/Java2
and as a reference manual.  First-time readers may prefer to skip the
portions marked ``@b{Fine point(s)}'' as well as some other parts that
we have indicated.  On the other hand, the first extended example in
@ref{An illustrative example of using ESC/Java2} should be particularly
helpful to first-time readers.

For a much abridged treatment of the information in this manual,
@xref{[SLS00], ``ESC/Java Quick Reference''}.  The Quick Reference lists
most of the specification language features described in sections 2 and
3 of this manual and all the warning types described in section 4,
giving very brief descriptions of each.  While it necessarily omits
numerous examples, tips, motivating discussions, and technical details
found in the present manual and other ESC/Java2 documentation, it will
still be of interest both the new reader seeking a whirlwind tour of
ESC/Java2's features and to the experienced user seeking a quick
reminder about some ESC/Java2 feature.

Although ESC/Java2 contains a full Java program verifier, the goal of
ESC/Java2 is not to provide formally rigorous program verification.
Rather, it is to help programmers find some kinds of errors more quickly
than they might be found by other methods, such as testing or code
reviews.  Consequently, ESC/Java2 embodies engineering trade-offs among
a number of factors including the frequency of missed errors, the
frequency of false alarms, the amount of time used by the tool, the
effort required to learn and use the annotation language, and the effort
required to implement the tool.

In this manual we attempt to give a precise description of the syntax,
type-checking, and other linguistic rules of the annotation language, as
well as a clear though informal description of the meanings of the
various pragmas.  While we discuss potential sources of missed errors or
false alarms at various places in the manual, including a summary in
Appendix C (@pxref{Appendix C: Sources of unsoundness and
incompleteness}), we do not attempt to characterize precisely the degree
of (in)accuracy of ESC/Java2's checking

In many places we cite sections of different editions of @emph{The Java
Specification Language} (@ref{JLS1},@ref{JLS2}, @ref{JLS3}).  For
example, the notation ``@ref{JLS2}, 19.2]'' refers to section 19.2 of
@emph{The Java Language Specification, second edition}.  The list of
@ref{References} at the end of this manual gives bibliographic
information for this and other works cited herein.

A specification notation and set of tools related to ESC/Java is the
Java Modeling Language (JML) @xref{[LBR99]}, @xref{[LBR00]},
@xref{[LLPRJ00]}.  Through a collaborative effort, we have attempted to
make the JML specification language and the ESC/Java annotation language
as similar as practical, with JML providing a superset of the features
of ESC/Java.  The goals of the two languages are different, so
differences in the notations remain.  However, many programs annotated
with ESC/Java annotations should be amenable to processing with other
JML tools, and programmers who learn one language should have little
trouble picking up the other as well.

@c =============================================================================
@node Acknowledgments, An illustrative example of using ESC/Java2, Preface, Top
@section Acknowledgments

ESC/Java was originally designed and implemented at the Compaq Systems
Research Center (SRC) by Cormac Flanagan, Mark Lillibridge, Raymie
Stata, and the authors.  Todd Millstein implemented ESC/Java's execution
trace facility and helped with other aspects of ESC/Java.  Caroline Tice
and Rajeev Joshi lent helping hands with miscellaneous aspects of the
implementation, including reducing ESC/Java's memory footprint (Tice)
and getting the build recipe for the Simplify theorem prover to work on
multiple platforms (Joshi).

The ESC/Java project is a follow-on to an earlier extended static
checking project at SRC targeting the Modula-3 language
(@pxref{[DLNS98]}), and continues to use the Simplify theorem prover
developed as part of that project.

The authors thank our colleagues who have offered comments on earlier
versions of this manual. Allan Heydon, David Jefferson, Mark
Lillibridge, Silvija Seres, and Caroline Tice have been particularly
helpful in this regard.  Silvija Seres compiled the initial version of
the ESC/Java Quick Reference [<a href="#[SLS00]">SLS00</a>] from an
earlier version of this manual.  We and the other implementers of
ESC/Java have benefited from the feedback of early users, including
Sanjay Ghemawat, Steve Glassman, Allan Heydon, David Jefferson, Marc
Najork, Keith Randall, and Silvija Seres.  Gary Leavens played a major
role in our attempt to remove gratuitous incompatibilities between
ESC/Java and JML, and helped us to improve the ESC/Java annotation
language in the process.

@c =============================================================================
@node An illustrative example of using ESC/Java2, An Overview of ESC/Java2 and of this Manual, Acknowledgments, Top
@section An illustrative example of using ESC/Java2

To give the reader a general idea of what ESC/Java does and how to use
it, we begin with an example illustrating some salient features of
ESC/Java through its application to a simple class declaration
deliberately seeded with some errors.

@menu
* Scene 0: We write a class declaration.::  
* Scene 1: We run ESC/Java::    
* Scene 2: We write a requires (precondition) pragma for::  
* Scene 3: We add a non_null pragma for the field a.::  
* Scene 4: We correct a bug in Bag.extractMin.::  
* Scene 5: We take no action for a redundant warning.::  
* Scene 6: We supply a precondition for Bag.extractMin.::  
* Scene 7: We run ESC/Java again and it still issues a warn::  
* Scene 8: We supply an invariant pragma relating n to a.le::  
* Scene 9: ESC/Java notices a typographical error.::  
* Scene 10: Our efforts come to a happy conclusion.::  
@end menu

@node Scene 0: We write a class declaration., Scene 1: We run ESC/Java, An illustrative example of using ESC/Java2, An illustrative example of using ESC/Java2
@subsection Scene 0: We write a class declaration.

Our example starts with the class @code{Bag} declared in a file
@file{Bag0.java}.  We will refine this class over several steps with the
assistance of both ESC/Java2 and other tools.  Each more refined version
is found in a file with a correspondinging incremented suffix, e.g.,
@file{Bag1.java}, @file{Bag2.java}, etc.

@example
1:  class Bag @{
2:    int[] a;
3:    int n;
4:
5:    Bag(int[] input) @{
6:      n = input.length;
7:      a = new int[n];
8:      System.arraycopy(input, 0, a, 0, n);
9:    @}
10:
11:    int extractMin() @{
12:      int m = Integer.MAX_VALUE;
13:      int mindex = 0;
14:      for (int i = 1; i <= n; i++) @{
15:        if (a[i] < m) @{
16:          mindex = i;
17:          m = a[i];
18:        @}
19:      @}
20:      n--;
21:      a[mindex] = a[n];
22:      return m;
23:    @}
24:  @}
@end example

A copy of this program is in
@file{<ESCJava2Root>/examples/bags/Bag0.java}, where
@file{<ESCJava2Root>} denotes the (site-specific) top-level directory
for ESC/Java2 @pxref{Appendix B: Installing and using ESC/Java2 at your
site}.

The idea is that an object @code{x} of class @code{Bag} represents a
multiset (also known as a ``bag'') of integers in the form of integer
array @code{x.a} together with an integer @code{x.n}, where the elements
of the multiset are the first @code{x.n} elements of the array.

In our example declaration, we define a constructor that creates a
@code{Bag} from an array, and a single method @code{extractMin} that
finds, removes, and returns the minimal element of a @code{Bag}.  The
@code{extractMin} method iterates over the first @code{this.n} elements
of @code{this.a}, keeping track of the smallest one in the local
variable @code{m} .  After finding the smallest element of
@code{this.a}, it copies the element at the highest used position of
@code{x.a} into the position formerly occupied by the minimum element,
decreases the count of used elements, and returns the value that was
saved in @code{m} .

@node Scene 1: We run ESC/Java2, Scene 2: We write a requires (precondition) pragma for, Scene 0: We write a class declaration., An illustrative example of using ESC/Java2
@subsection Scene 1: We run ESC/Java2, and it warns of two potential @code{null} dereferences

To compile @file{Bag.java}, we type the command line: @kbd{javac
Bag.java}.  To check our definition of class @code{Bag} with
ESC/Java2, we instead type the following similar command line:
@kbd{escjava2 Bag.java}.  ESC/Java2 then produces the following
output:
@verbatim
Bag.java:6: Warning: Possible null dereference (Null)
    n = input.length;
             ^
Bag.java:15: Warning: Possible null dereference (Null)
      if (a[i] < m) {
           ^
Execution trace information:
    Reached top of loop after 0 iterations in "Bag.java", line 14, col 4.

Bag.java:15: Warning: Array index possibly too large (IndexTooBig)
      if (a[i] < m) {
           ^
Execution trace information:
    Reached top of loop after 0 iterations in "Bag.java", line 14, col 4.

Bag.java:21: Warning: Possible null dereference (Null)
    a[mindex] = a[n];
                 ^
Execution trace information:
    Reached top of loop after 0 iterations in "Bag.java", line 14, col 4.

Bag.java:21: Warning: Possible negative array index (IndexNegative)
    a[mindex] = a[n];
                 ^
Execution trace information:
    Reached top of loop after 0 iterations in "Bag.java", line 14, col 4.

5 warnings
@end verbatim

@b{Remark:} Actually, the above is the output generated by the command
@kbd{escjava -quiet Bag.java}.  The normal output of ESC/Java2 also
includes various progress messages and timing information which are
omitted here.

@b{Remark:} Some of the messages above include a part marked as
``@t{Execution trace information}''.  We say more about execution traces
below, particularly in @ref{Parts of ESC/Java warning messages}, but
will not discuss them further in the course of this introductory
example.

@node Scene 2: We write a requires (precondition) pragma for, Scene 3: We add a non_null pragma for the field a., Scene 1: We run ESC/Java, An illustrative example of using ESC/Java2
@subsection Scene 2: We write a requires (precondition) pragma for

ESC/Java's first warning is that the attempt on line 6 to access
@code{input.length} might fail because @code{input} might be
@code{null}.  We now must decide what to do about this warning.

One approach is to decide that the implementation of the constructor
is incorrect.  Following this approach, we would modify the constructor
to test for a null argument and, for example, construct an empty multiset:
@example
  Bag(int[] input) @{
    if (input == null) @{
      n = 0;
      a = new int[0];
    @} else @{
      n = input.length;
      a = new int[n];
      System.arraycopy(input, 0, a, 0, n);
    @}
  @}
@end example

This change does indeed eliminate the first warning.  
@c todo kiniry - Discuss how this is an example of defensive coding.

Instead, however, we will continue our example by illustrating a second
approach, in which we decide that the implementation of the constructor
is correct, but that we do not intend for the constructor ever to be
called with a @code{null} argument.  We inform ESC/Java2 of this decision
by adding an annotation to the constructor declaration: 

@verbatim
  //@ requires input != null;
  Bag(int[] input) {
    n = input.length;
    ...
@end verbatim

When the character @verb{|@|} is the first character after the initial
line comment marker @code{//} or block comment marker @code{/*} of a
Java comment, as in the first line of the program fragment above,
ESC/Java2 expects the body of the comment to consist of a JML
annotations, also known as @emph{pragmas} in general, or
@emph{assertions} in particular.

The @code{requires} pragma above specifies a @emph{precondition} for the
constructor.  A precondition of a method or constructor @code{m} is a
boolean expression which @b{must} be @emph{true} at the start of any
call to @code{m}.

When checking the body of a method or constructor that is annotated with
a precondition, ESC/Java2 can assume the validity (i.e., the truth) of
the precondition to confirm the absence of errors in the body (for
example, the absence of a @code{null} dereference during the evaluation
of @code{input.length} in the code fragment above).

When checking code that calls a method or constructor annotated with a
precondition, ESC/Java2 will issue a warning if it cannot confirm that
the precondition (with the values of the actual parameters substituted
for the formal parameter names) would @b{always} be to @code{true} at
the call site.

@node Scene 3: We add a non_null pragma for the field a., Scene 4: We correct a bug in Bag.extractMin., Scene 2: We write a requires (precondition) pragma for, An illustrative example of using ESC/Java2
@subsection Scene 3: We add a @code{non_null} pragma for the field @code{a}.

So much for the first warning.  We now turn our attention to the second
warning:
@verbatim
Bag.java:15: Warning: Array index possibly too large (IndexTooBig)
      if (a[i] < m) {
           ^
Execution trace information:
    Reached top of loop after 0 iterations in "Bag.java", line 14, col 4.
@end verbatim

Here, ESC/Java2 is warning that the array variable @code{a} (actually
@code{this.a})
might be @code{null}.  We could deal with this warning using either
of the approaches discussed above in connection with the first warning---that
is, by adding the precondition @code{requires a != null} to the @code{extractMin}
method, or by adding special code for the case @code{a == null}.  

However, ESC/Java2 offers yet another choice, which is to specify that
the @code{a} field of any @code{Bag} is @b{always} supposed to be
non-@code{null}.  To do this, we annotate the declaration of @code{a}
with a @code{non_null} pragma:
@verbatim
  class Bag {
    /*@ non_null */ int[] a;
    ...
@end verbatim

This annotation causes ESC/Java2 to assume that the @code{a} field of
any @code{Bag} object is itself non-@code{null} (and thus can safely be
dereferenced).  Conversely, it causes ESC/Java2 to issue a warning for
any assignment to the @code{a} field of a @code{Bag} if it cannot
confirm that the expression being assigned will have a non-@code{null}
value at runtime.  Furthermore, ESC/Java2 will check that every
@code{Bag} constructor initializes the @code{a} field of the constructed
object to a non-@code{null} value.

@node Scene 4: We correct a bug in Bag.extractMin., Scene 5: We take no action for a redundant warning., Scene 3: We add a non_null pragma for the field a., An illustrative example of using ESC/Java2
@subsection Scene 4: We correct a bug in Bag.extractMin.

We now consider the third warning:
<blockquote>@t{Bag.java:15: Warning: Array index possibly too large (IndexTooBig)}

@t{      if (a[i] < m) @{}

@t{           ^}</blockquote>
Examining the program, we now find a genuine bug.  The @t{for}
loop starting on line 15 (in the original program) examines array elements
@t{a[1]}
through
@t{a[n]}, but array indexing in Java is zero based. 
We correct the line to read
<blockquote>@t{       
for (int i = 0; i < n; i++) @{}</blockquote>

@node Scene 5: We take no action for a redundant warning., Scene 6: We supply a precondition for Bag.extractMin., Scene 4: We correct a bug in Bag.extractMin., An illustrative example of using ESC/Java2
@subsection Scene 5: We take no action for a redundant warning.

The fourth warning
<blockquote>@t{Bag.java:21: Warning: Possible null dereference (Null)}

@t{    a[mindex] = a[n];}

@t{                
^}</blockquote>
requires no action, as the @t{non_null} pragma we added in section
0.3 already prevents @t{a} from being @t{null.}  In other
words, the second and fourth warnings complain about the same problem.
<blockquote>@b{Remark:}  ESC/Java often avoids issuing
such redundant warnings.  Note, for example, that it doesn't complain
about the expression @t{a[m]} on (original) line 17, or the expression
@t{a[mindex]}
on the left hand side of the assignment on (original) line 21.  However,
it does not avoid them in all cases.  A detailed description of the
circumstances in which ESC/Java will or will not issue multiple warnings
with the same underlying cause is beyond the scope of this manual.</blockquote>

@node Scene 6: We supply a precondition for Bag.extractMin., Scene 7: We run ESC/Java again and it still issues a warn, Scene 5: We take no action for a redundant warning., An illustrative example of using ESC/Java2
@subsection Scene 6: We supply a precondition for Bag.extractMin.

We now consider the last of the five warnings:
<blockquote>@t{Bag.java:21: Warning: Possible negative array index (IndexNegative)}

@t{    a[mindex] = a[n];}

@t{                
^}</blockquote>
The problem is that the code in (original) lines 20-21 removes an element
from the bag even when the bag is already empty (that is, when @t{this.n
== 0} on entry to @t{extractMin}).  ESC/Java has called our
attention to the need for another design decision: do we add special
code to handle the situation when
@t{extractMin} is called on an empty
bag, or do we add a precondition forbidding such calls?  Let's try
the latter course:
<blockquote>@t{12:    //@ requires
n >= 1;}

@t{13:    int extractMin() @{}</blockquote>

@node Scene 7: We run ESC/Java again and it still issues a warn, Scene 8: We supply an invariant pragma relating n to a.le, Scene 6: We supply a precondition for Bag.extractMin., An illustrative example of using ESC/Java2
@subsection Scene 7: We run ESC/Java again and it still issues a warn

With all the changes described above, our example program now reads:
<blockquote>@t{ 1:  class Bag @{}

@t{ 2:    /*@ non_null */
int[] a;}

@t{ 3:    int n;}

@t{ 4:}

@t{ 5:    //@ requires input
!= null;}

@t{ 6:    Bag(int[] input)
@{}

@t{ 7:      n =
input.length;}

@t{ 8:      a =
new int[n];}

@t{ 9:      System.arraycopy(input,
0, a, 0, n);}

@t{10     @}}

@t{11:}

@t{12:    //@ requires n >= 1;}

@t{12:    int extractMin() @{}

@t{13:      int m =
Integer.MAX_VALUE;}

@t{14:      int mindex
= 0;}

@t{15:      for (int
i = 0; i < n; i++) @{}

@t{16:       
if (a[i] < m) @{}

@t{17:         
mindex = i;}

@t{18:         
m = a[i];}

@t{19:       
@}}

@t{20:      @}}

@t{21:      n--;}

@t{22:      a[mindex]
= a[n];}

@t{23:      return m;}

@t{24:    @}}

@t{25:  @}}</blockquote>
We now run ESC/Java again and it produces the following warning:
<blockquote>@t{Bag.java:17: Warning: Array index possibly too large (IndexTooBig)}

@t{      if (a[i] < m) @{}

@t{           ^}</blockquote>

@node Scene 8: We supply an invariant pragma relating n to a.le, Scene 9: ESC/Java notices a typographical error., Scene 7: We run ESC/Java again and it still issues a warn, An illustrative example of using ESC/Java2
@subsection Scene 8: We supply an invariant pragma relating n to a.le

It may appear that ESC/Java is still complaining about the bug we thought
we'd fixed in section 0.4, but further study reveals a different problem: 
ESC/Java has no reason to expect that @t{n}, which we intend to be
the length of the meaningful prefix of @t{a}, will in fact be at most
@t{a.length}.  
We can express this intention with an @t{invariant} pragma:
<blockquote>@t{ 1:  class Bag @{}

@t{ 2:    /*@ non_null */
int[] a;}

@t{ 3:    int n;}

@t{ 4:    //@ invariant 0
<= n & n <= a.lenght;}

...</blockquote>
Roughly speaking, ESC/Java treats an invariant as an implicit postcondition
of every constructor and as both a precondition and postcondition of every
method.  The semantics of @t{invariant} pragmas--and all other
ESC/Java pragmas--are described in greater detail in <a href="#2  ESC/Java pragmas">section
2</a> below.  The full rules about expressions that can occur in pragmas
(called @emph{specification expressions}) are given in section 3. 
For now, we remark that since specification expressions are not actually
executed, the unconditional logical operators @t{&} and @t{|}
are interchangeable (except for binding power) in specification expressions
with the respective conditional operators @t{&&} and @t{||}.

@node Scene 9: ESC/Java notices a typographical error., Scene 10: Our efforts come to a happy conclusion., Scene 8: We supply an invariant pragma relating n to a.le, An illustrative example of using ESC/Java2
@subsection Scene 9: ESC/Java notices a typographical error.

When we run ESC/Java again, the result is:
<blockquote>@t{Bag.java:4: Error: No such field in type int[]}

@t{  //@ invariant 0 <= n & n <= a.lenght;}

@t{                               
^}

@t{Caution: Turning off extended static checking due to type error(s)}

@t{1 caution}

@t{1 error}</blockquote>

@node Scene 10: Our efforts come to a happy conclusion.,  , Scene 9: ESC/Java notices a typographical error., An illustrative example of using ESC/Java2
@subsection Scene 10: Our efforts come to a happy conclusion.

Whoops!  Our @t{invariant} pragma had a spelling error. We correct
it to read
<blockquote>@t{ 4:    //@ invariant
0 <= n & n <= a.length;}</blockquote>
and try again.  This time ESC/Java runs without reporting any further
complaints.

The file @file{<ESCJava2Root>/examples/0.10/Bag.java} contains
a copy of the final version of the @t{Bag} class.

@c =============================================================================
@node An Overview of ESC/Java2 and of this Manual, ESC/Java2 Pragmas, An illustrative example of using ESC/Java2, Top
@section An Overview of ESC/Java2 and of this Manual

In this section we summarize the principal features of ESC/Java. While
some of the things we say here reiterate points made in our example of
<a href="#0  An illustrative example of using ESC/Java">section
0</a>, we also describe a number of features of ESC/Java that are not discussed
at all in <a href="#0  An illustrative example of using ESC/Java">section
0</a>.  Moreover, we address a number of points that were glossed
over in <a href="#0  An illustrative example of using ESC/Java">section
0</a>, and that possibly raised questions in the mind of the perceptive
reader.  Throughout this section we refer the reader to later parts
of this manual where various topics are discussed in more detail.
@itemize
@item
<a NAME="ESC/Java is a checker for Java programs, optionally annotated w"></a>@b{ESC/Java
is a checker for Java programs, optionally annotated with user-supplied
@emph{pragmas}.}

@itemize
@item
<a NAME="ESC/Java pragmas must occur within pragma-containing comments."></a>@b{ESC/Java
pragmas must occur within @emph{pragma-containing comments}.}


We showed some examples of pragma-containing comments in <a href="#0  An illustrative example of using ESC/Java">section
0</a>.  <a href="#2  ESC/Java pragmas">Section 2</a> includes all
the rules about where the various kinds of pragmas are allowed.
@item
<a NAME="ESC/Java pragmas can contain expressions that are similar to Ja"></a>@b{ESC/Java
pragmas can contain expressions that are similar to Java expressions.}


The ESC/Java @emph{specification language}--that is, the language of
ESC/Java pragmas--includes expressions, which we call @emph{specification
expressions}, or @emph{SpecExpr}'s.  While the syntax, name-resolution,
and type-checking rules for specification expressions are similar to those
for
ordinary Java expressions, there are inevitably some differences. 
The rules for specification expressions are described in <a href="#3  Specification expressions">section
3</a> of this manual.
@item
<a NAME="ESC/Java pragmas record programmer design decisions."></a>@b{ESC/Java
pragmas record programmer design decisions.}


In addition to giving the user control over ESC/Java, pragmas serve
to record formally some of the programmer's intentions about the function
and use of methods, constructors, and variables (for example, that the
@t{Bag}
constructor of our example in <a href="#0  An illustrative example of using ESC/Java">section
0</a> was meant never to be called with a @t{null} argument). These
are the same sorts of intentions that good programmers may already record
informally in natural language comments.
@item
<a NAME="ESC/Java pragmas support modular checking."></a>@b{ESC/Java's
pragmas support @emph{modular} checking.}


The checking done by ESC/Java is @emph{modular.}  When checking
the body of a @emph{routine} (that is, a method or constructor) @t{r},
ESC/Java does not examine bodies of routines called by @t{r}. 
Rather, it relies on the @emph{specifications} of those routines, as expressed
by @t{requires} pragmas, by other pragmas described below, and by
Java constructs such as signatures, return types, and @t{throws} clauses.
Conversely, to check the body of @t{r}, ESC/Java does not examine
callers of @t{r}.  It does, however, assume that @t{r} is
called only in accordance with its own specification.
@item
<a NAME="When Java sources are unavailable, users can supply pragmas in"></a>@b{When
Java sources are unavailable, users can supply pragmas in @t{.spec }files.}


When the file declaring a class @t{T} uses a type @t{U},
ESC/Java may need data invariants of @t{U} and/or specifications of
@t{U}'s
routines in order to check the routines of @t{T}.  If ESC/Java
can find only a binary (@t{.class}) file and no source file declaring
@t{U},
then it will assume simple default specifications for the routines of @t{U}
based on their signatures.  The user can supply additional specifications
for the routines of @t{U}, and also invariants for
@t{U}, by
putting them in pragmas in a file @t{U.spec}.  A @t{.spec}
file is like a @t{.java} file except that it is allowed to omit method
bodies.  <a href="#5.1  Specification (.spec) files and the ESC/Java's class path">Section
5.1</a> tells more about @t{.spec}  files.@end itemize
<a href="#2  ESC/Java pragmas">Section 2</a> includes descriptions of all
ESC/Java pragmas.

 
@item
<a NAME="ESC/Java is checker for almost all of Java 1.4."></a>@b{ESC/Java
is checker for (almost all of) Java 1.4.}


ESC/Java is targeted for Java 1.4, as described in
@uref{http://java.sun.com/docs/books/jls/, The Java
Language Specification, Third Edition}, by James Gosling, Bill Joy, Guy Steele and Gilad Bracha, supplemented by
the ``@xref{[ICS], Inner Classes Specification},'' except for some
limitations described in <a href="#6 Java language support and
limitations">section 6</a> of this manual.

 
@item
<a NAME="ESC/Java has a command-line interface like the Java compiler's."></a>@b{ESC/Java
has a command-line interface like the Java compiler's.}


An invocation of ESC/Java has the form:

         @t{escjava} [
@emph{options}
] @emph{sourcefiles}

The @t{escjava(1)} man page in the ESC/Java release (see <a href="#Appendix B:  Installing and using ESC/Java at your site">appendix
B</a>) includes descriptions of ESC/Java's command-line options and of
environment variables that affect ESC/Java's operation.  For now we
mention only the @t{CLASSPATH} environment variable, whose effect
on ESC/Java is similar to its effect on @t{javac(5)} and the @t{-suggest}
command-line option, which causes ESC/Java to offer suggestions of pragmas
that might eliminate certain kinds of warnings.   <a href="#5.x  Specification (.spec) files, and the ESC/Java classpath.">Section
5</a> contains further description of these features (but not all command-line
options and environment variables).

 
@item
<a NAME="ESC/Java issues warning messages for potential runtime errors."></a>@b{ESC/Java
issues @emph{warning} messages for potential runtime errors.}

@itemize
@item
<a NAME="The current ESC/Java checks only method and constructor bodies."></a>@b{The
current ESC/Java checks only method and constructor bodies.}


The current ESC/Java provides no warnings for potential runtime errors
in static initializers [@emph{JLS}, 8.5] or in initializers for @t{static}
fields or in anonymous classes.
@item
<a NAME="ESC/Java treats exceptions thrown by the Java runtime system a"></a>@b{ESC/Java
treats exceptions thrown by the Java runtime system as runtime errors.}


Some of the potential ``error'' conditions detected by ESC/Java are
conditions that would be detected by the Java runtime system and give
rise to exceptions (specifically, @t{NullPointerException},@t{ IndexOutOfBoundsException},
@t{ClassCastException},@t{
ArrayStoreException},@t{ ArithmeticException}, and @t{NegativeArraySizeException}
[@emph{JLS}, 11.5.1.1]).  The current ESC/Java treats these conditions
as errors, and generates warnings for them even if the program actually
catches the resulting exceptions.  Accordingly, our use of the word
``error'' in this manual includes such conditions.  Future versions
of ESC/Java may provide support for checking programs that catch exceptions
thrown by the Java runtime system.   The current ESC/Java version
does support checking of programs that catch explicitly-thrown exceptions
(including those just listed).
@item
<a NAME="ESC/Java does not warn of potential errors in the evaluation of"></a>@b{ESC/Java
does not warn of potential errors in the evaluation of specification expressions.}


Specification expressions are never actually evaluated, and (with one
exception described in <a href="#2.6.1  set pragma">section 2.6.1</a>)
ESC/Java will not produce specific warnings about specifications expressions
whose evaluation might dereference @t{null}, access arrays out of
bounds, etc.  Rather, the meanings of such expressions (for example,
@t{@emph{O}.f}
where @emph{@t{O}} , if it were actually evaluated, might evaluate
to @t{null}) are an unspecified function of (the meanings of) their
subexpressions.  In most cases, attempts to prove things about such
unspecified values will fail, thus giving rise to warnings of some sort
(though alas not the clearest warnings that one could hope for).
@item
<a NAME="ESC/Java warning messages may include execution traces."></a>@b{ESC/Java
warning messages may include @emph{execution traces}.}


Associated with each ESC/Java warning message is some execution path
that--so far as ESC/Java can determine--may plausibly lead to the runtime
error mentioned in the warning.  If certain kinds of ``interesting''
events occur on this execution path, the message will contain an @emph{execution
trace} listing those events.  See
<a href="#4.0  Parts of ESC/Java warning messages">section
4.0</a> for details about which events are considered ``interesting''.@end itemize
<a href="#4  Warnings">Section 4</a> of this manual includes descriptions
of all ESC/Java warning messages.

 
@item
<a NAME="ESC/Java issues error messages for badly formed programs."></a>@b{ESC/Java
issues @emph{error} messages for badly formed programs}.


Before ESC/Java can analyze a program for potential runtime errors,
it must first perform operations such as parsing, name resolution, and
type-checking both of the Java code and of any pragmas.  When ESC/Java
detects an illegal construct (such as the syntactically incorrect pragma
shown in <a href="#0.8  Scene 8:  We supply an invariant pragma relating n to a.le">section
0.8</a> above) during this preliminary processing, it issues an @emph{error}
message.  Error messages are distinguished from warning messages by
the occurrence of the word  @t{Error}  instead of @t{Warning} 
near the beginning of the message.  Only when its input is free of
such errors can ESC/Java go on to look for potential runtime errors and
generate warnings (just as a compiler generates object code only when the
source code is free of compile-time errors).
@itemize
@item
<a NAME="ESC/Java error messages are like compiler error messages."></a>@b{ESC/Java
error messages are like compiler error messages.}


ESC/Java error messages are similar to compiler error messages, and
we hope they will be self-explanatory.  Thus, they are not fully enumerated
or described in this manual.  We believe that all ESC/Java error messages
arise either (1) from circumstances that would cause the Java compilers
to report compile-time errors or (2) from violations of the rules for writing
pragmas as given in <a href="#2  ESC/Java pragmas">section 2</a> and <a href="#3  Specification expressions">section
3</a>.
@item
<a NAME="ESC/Java doesn't detect all compile-time errors that Java compi"></a>@b{ESC/Java
doesn't detect all compile-time errors that Java compilers detect.}


A number of conditions that give rise to Java compile-time errors are
not detected by ESC/Java.  For example, the current ESC/Java does
not enforce Java's definite assignment rules [@emph{JLS}, 16] or all of
Java's restrictions on access to @t{protected} variables [@emph{JLS},
6.6.2].  Thus it is wise to run your code through a Java compiler
at least once before trying to run it through ESC/Java.  (@b{Tip:} 
Sometimes the nature of a syntax error in your program may not be immediately
clear from an ESC/Java error message.  In such cases, a compiler may
detect the same error and offer a better--or at least different--description
of the problem.)@end itemize

@item
<a NAME="ESC/Java's extended static checking isn't perfect."></a>@b{ESC/Java's
extended static checking isn't perfect.}

@itemize
@item
<a NAME="ESC/Java can miss errors."></a>@b{ESC/Java can miss errors.}


When ESC/Java processes a program and produces no warnings, it is not
necessarily true that the program is free of all errors.  For example,
ESC/Java never checks for some kinds of errors, such as arithmetic overflow,
or infinite looping. Also ESC/Java doesn't check programs for functional
correctness properties other than those given by the user in pragmas. 
Finally, even when ESC/Java checks for a particular kind of errors, there
may be situations in which it erroneously concludes that the error cannot
occur, and therefore fails to issue a legitimate warnings.  In the
jargon of proof theory, we say that ESC/Java--viewed as a system for proving
program correctness--is @emph{unsound}.  <a href="#C.0  Known sources of unsoundness">Section
C.0</a> describes the known sources of unsoundness in ESC/Java.
@item
<a NAME="ESC/Java can give spurious warnings."></a>@b{ESC/Java can give
spurious warnings.}


Conversely, when ESC/Java issues a warning, it doesn't necessarily
indicate the presence of an error; it merely means that ESC/Java is unable
to conclude that the indicated error will never occur, given the annotations
that the user has supplied.  In the jargon, ESC/Java--viewed as a
system for proving program correctness--is @emph{incomplete}.  <a href="#C.1  Some sources of incompleteness">Section
C.1</a> describes the main sources of incompleteness in ESC/Java.
@item
<a NAME="Pragmas give the user some control over ESC/Java's unsoundness"></a>@b{Pragmas
give the user some control over ESC/Java's unsoundness and incompleteness.}


ESC/Java provides pragmas that let the user eliminate spurious warnings--that
is, reduce ESC/Java's incompleteness--either without loss of soundness
(as, for example, the
@t{requires} pragma we wrote in <a href="#0.2  Scene 2:  We write a requires (precondition) pragma for">section
0.2</a> eliminated the warning about a potential dereference of @t{null}
in the @t{Bag} constructor by imposing a precondition on calls) or,
if need be, at some risk of lost soundness (as in the case of the @t{nowarn},
@t{assume},
and @t{axiom} pragmas respectively described in sections
<a href="#2.1.0  nowarn pragma">2.1.0</a>,
<a href="#2.1.2  assume pragma">2.1.2</a>,
and <a href="#2.4.2  axiom pragma">2.4.2</a> below).
@item
<a NAME="ESC/Java issues caution messages in some (but not all) cases wh"></a>@b{ESC/Java
issues @emph{caution} messages in some (but not all) cases where unsound
checking may occur.}
@end itemize
@end itemize

@c =============================================================================
@node ESC/Java2 Pragmas, Specification Expressions, An Overview of ESC/Java2 and of this Manual, Top
@section ESC/Java2 Pragmas

In this section we describe all the kinds of ESC/Java pragmas, the places
where they can occur, and (informally) what they mean.  We begin by
giving some general information about where pragmas can occur, and then
go on to describe the individual pragmas.

Many pragmas can contain expressions--called specification expressions--which
are similar to Java expressions, but with a few constructs legal in Java
expressions being forbidden and a number of added constructs being permitted. 
We mention some of the added constructs in connection with pragmas where
they are of use, but defer a detailed description of specification expressions
to <a href="#3  Specification expressions">section 3</a>.

Most pragmas are ways of asking ESC/Java to produce warnings if certain
user expectations about the behavior of the annotated program may be wrong. 
We will often say that ESC/Java ``checks'' that some condition @emph{x}
holds at a particular control point when it would be more precise to say
that ESC/Java issues a warning message if it cannot prove that @emph{x}
holds at that point.  Keep in mind that in addition to the possibility
that @emph{x} might fail, the warning may also be issued because the annotations
are inadequate to imply that @emph{x} holds, because the theorem-prover's
deductive power is inadequate to complete the proof, or because ESC/Java's
model of Java semantics is incomplete.

@menu
* Rules about where pragmas may occur::  
* The most basic pragmas::      
* Some remarks concerning assert and assume::  
* Pragmas for specifying routines::  
* Pragmas for specifying data invariants::  
* Pragmas affecting conditions under which variables may be referenced::  
* Pragmas concerning ghost variables::  
* Pragmas for specifying synchronization::  
@end menu

@node Rules about where pragmas may occur, The most basic pragmas, ESC/Java2 Pragmas, ESC/Java2 Pragmas
@subsection Rules about where pragmas may occur

@menu
* ESC/Java pragmas must occur within pragma-containing comments::  
* There are four syntactic categories of pragmas::  
* ESC/Java sometimes allows pragmas to contain nested pragmas or comments::  
@end menu

@node ESC/Java pragmas must occur within pragma-containing comments, , Rules about where pragmas may occur, Rules about where pragmas may occur
@subsubsection ESC/Java pragmas must occur within @emph{pragma-containing comments}.

ESC/Java looks for pragmas within certain specially formatted comments. 
Specifically:
@itemize
@item
When the character @t{@@} is the first character after the initial
@t{//}
or @t{/*} of a Java comment, ESC/Java expects the rest of the comment's
body to consist entirely of a sequence of (zero or more) ESC/Java pragmas.

@item
Inside a documentation comment [@emph{JLS}, 18], a sequence ESC/Java pragmas
can be bracketed by


@t{<esc>} and @t{</esc>}.@end itemize
Many pragmas end with an optional semi-colon ( @t{;}@emph{<sub>opt</sub>}
).  If such a pragma is followed by another pragma in the same pragma-containing
comment, then this semi-colon is required.

@node  There are four syntactic categories of pragmas, ESC/Java sometimes allows pragmas to contain nested pragmas or comments, ESC/Java pragmas must occur within pragma-containing comments, Rules about where pragmas may occur
@subsubsection There are four @emph{syntactic categories} of pragmas

Pragmas are divided into four @emph{syntactic categories} according to
the places in a program where they can sensibly be used.  All pragmas
in any single pragma-containing comment must be of the same syntactic category.
@itemize
@item
@emph{Lexical pragmas} may occur anywhere that ordinary Java comments may
occur.

@itemize[It would be more accurate to say that ESC/Java allows
the occurrence of a pragma-containing comment whose body is a sequence
of zero or more lexical pragmas at any point where Java allows a comment;
we henceforth take the liberty to eschew this degree of pedantry.]@end itemize
The current ESC/Java includes only one kind of lexical pragma:
@itemize
@item
@t{nowarn} pragma (<a href="#2.1.0  nowarn pragma">section 2.1.0</a>).
@end itemize

@item
@emph{Declaration pragmas}--such as, for example, the @t{invariant}
pragma in <a href="#0.8  Scene 8:  We supply an invariant pragma relating n to a.le">section
0.8</a> in our introductory example--are analogous to Java declarations,
and may occur only where declarations of class members or interface members
may occur.  The current ESC/Java includes the following kinds of declaration
pragmas:

@itemize
@item
@t{invariant} pragma (<a href="#2.4.1  invariant pragma">section 2.4.1</a>)

@item
@t{axiom} pragma (<a href="#2.4.2  axiom pragma">2.4.2</a>)

@item
@t{ghost} pragma (<a href="#2.6.0  ghost pragma">2.6.0</a>)
@end itemize

@item
@emph{Statement pragmas} are analogous to Java statements.  They may
occur only where Java statements may occur.  The current ESC/Java
includes the following statement pragmas:

@itemize
@item
@t{assert} pragma (<a href="#2.1.1  assert pragma">2.1.1</a>)

@item
@t{assume} pragma (<a href="#2.1.2  assume pragma">2.1.2</a>)

@item
@t{unreachable} pragma (<a href="#2.1.3  unreachable pragma">2.1.3</a>)

@item
@t{loop_invariant} pragma (<a href="#2.4.3  loop_invariant pragma">2.4.3</a>)

@item
@t{set} pragma (<a href="#2.6.1  set pragma">2.6.1</a>)
@end itemize

@item
@emph{Modifier pragmas} are analogous to Java modifiers such as @t{private}
and @t{final}.  Generally, modifier pragmas are allowed in the
same positions as Java modifiers, but they are also allowed in a few other
places, as described in the fine points below.  Some modifier pragmas
(for example, the
@t{non_null} pragma in <a href="#0.3  Scene 3:  We add a non_null pragma for the field a.">section
0.3</a> in the introductory example) modify variable declarations; other
modifier pragmas (for example, the@t{ requires} pragmas in sections
<a href="#0.2  Scene 2:  We write a requires (precondition) pragma for">0.2</a>
and <a href="#0.6  Scene 6:  We supply a precondition for Bag.extractMin.">0.6</a>
in the introductory example) modify declarations of @emph{routines} (methods
or constructors).  The current ESC/Java includes the following modifier
pragmas for variable declarations:

@itemize
@item
@t{non_null} pragma (<a href="#2.4.0  non_null pragma">2.4.0</a>)

@item
@t{spec_public} pragma (<a href="#2.5.0  spec_public pragma">2.5.0</a>)

@item
@t{readable_if} pragma (<a href="#2.5.1  readable_if pragma">2.5.1</a>)

@item
@t{uninitialized} pragma (<a href="#2.5.2  uninitialized pragma">2.5.2</a>)

@item
@t{monitored_by} pragma (<a href="#2.7.0  monitored_by pragma">2.7.0</a>)

@item
@t{monitored} pragma (<a href="#2.7.1  monitored pragma">2.7.1</a>)
@end itemize
The current ESC/Java includes the following modifier pragmas for routine
declarations:
@itemize
@item
@t{requires} pragma (<a href="#2.3.0  requires pragma">2.3.0</a>)

@item
@t{modifies} pragma (<a href="#2.3.1  modifies pragma">2.3.1</a>)

@item
@t{ensures} pragma (<a href="#2.3.2  ensures pragma">2.3.2</a>)

@item
@t{exsures} pragma (<a href="#2.3.4  exsures pragma">2.3.4</a>)

@item
@t{also_ensures} pragma (<a href="#2.3.5  also_ensures pragma">2.3.5</a>)

@item
@t{also_exsures} pragma (<a href="#2.3.6  also_exsures pragma">2.3.6</a>)

@item
@t{also_modifies} pragma (<a href="#2.3.8  also_modifies pragma">2.3.8</a>)
@end itemize
In the current ESC/Java there are no pragmas that can modify both variable
and routine declarations.@end itemize
@b{Fine points}

A modifier pragma that modifies a routine (method or constructor) declaration
may appear either in any of the following places:
@itemize
@item
near the beginning of the declaration, in the usual place where Java modifiers
such as  @t{private}  or
@t{final} may occur,

@item
just before the opening left brace of the routine's body, or

@item
just before the final semicolon of a routine declaration if there is no
body (as in an interface, in an @t{abstract} class, or sometimes in
a @t{.spec} file (see <a href="#5.1.2  Specification (.spec) files">section
5.1.2</a>)
@end itemize
The semantics of a routine modifier pragma is independent of whether the
pragma appears lexically before or after the signature of the routine. 
Routine modifier pragmas are described further in <a href="#2.3  Pragmas for specifying routines">section
2.3</a>.

A modifier pragma that modifies a variable declaration may appear either
in the usual place for modifiers near the beginning of the declaration
or just before the final semicolon.  The pragma applies to all variables
declared in the declaration, and its semantics is independent of its position
within the declaration.  For convenient reference, here is a table
listing ESC/Java pragmas that can modify variable declarations, the sections
of this manual where they are described, and the kinds of declarations
they are allowed to modify:
@itemize<a NAME="variable modifier table"></a>@t{                  
instance  static  local     formal}

@t{                  
variable  field   variable  parameter}

@t{non_null }(<a href="#2.4.0  non_null pragma">2.4.0</a>)@t{      
yes     yes       yes      
yes}

@t{spec_public }(<a href="#2.5.0  spec_public pragma">2.5.0</a>)@t{   
yes     yes       no       
no}

@t{readable_if }(<a href="#2.5.1  readable_if pragma">2.5.1</a>)@t{   
yes     yes       yes      
no}

@t{uninitialized }(<a href="#2.5.2  uninitialized pragma">2.5.2</a>)@t{ 
no      no       
yes       no}

@t{monitored_by }(<a href="#2.7.0  monitored_by pragma">2.7.0</a>)@t{  
yes     yes       no       
no}

@t{monitored }(<a href="#2.7.1  monitored pragma">2.7.1</a>)@t{     
yes     no       
no        no}

 @end itemize
Note that ESC/Java sometimes allows modifier pragmas in declarations of
local variables (including those declared in the @emph{ForInit} of a
@t{for}
statement [@emph{JLS}, 14.12]) and formal parameters.

Particular pragmas may have further restrictions on where they may occur
beyond those given above.  These restrictions are described in the
sections describing the respective pragmas.

@node ESC/Java sometimes allows pragmas to contain nested pragmas or comments,  , There are four syntactic categories of pragmas, Rules about where pragmas may occur
@subsubsection ESC/Java sometimes allows pragmas to contain nested pragmas or comments

Situations sometimes arise where it is convenient to nest a comment inside
a pragma, or where it is convenient--or even necessary--to nest a pragma
inside another pragma.  In particular, this is the only way to annotate
a ghost field (see section
<a href="#2.6.0  ghost pragma">2.6.0</a>) with
a modifier pragma.  We describe here the rules governing such nesting. 
[@emph{Readers may wish to skip the remainder of this section on first reading
of the manual, or until occasion for using such nesting presents itself.}]

In the current ESC/Java, a pragma-containing comment (call it @emph{@t{inner}})
may be nested inside pragma-containing comment (@emph{@t{outer}})
only in the following cases:
<blockquote>(1)  each pragma in @emph{@t{inner}} is a lexical
(@t{nowarn}) pragma (see section <a href="#2.1.0  nowarn pragma">2.1,0</a>),
or

(2)  each pragma in @emph{@t{inner}} is a modifier pragma
for a ghost variable declared in @emph{@t{outer}} (see section
<a href="#2.6.0  ghost pragma">2.6.0</a>
for further details).</blockquote>
Furthermore, @emph{@t{outer}} must not itself be nested inside another
pragma-containing comment. (However, @emph{@t{outer}} may be of the
form @t{<esc>}...@t{</esc>}, which must of necessity occur
inside a Java documentation comment).

Any pragma-containing comment
@emph{@t{outer}}--even a nested one--may
have an ordinary (i.e., non-pragma-containing) comment
@emph{@t{inner}}
nested inside it.

Also, there are some restrictions concerning the syntactic forms of
a nested (ordinary or pragma-containing) comment @emph{@t{inner}}
and the enclosing pragma-containing comment @emph{@t{outer}}, as given
in the following table and the associated notes.  These restrictions
ensure that the portions of the input file that ESC/Java regards as comments
or pragmas will be precisely those regarded as comments by Java compilers. 
Each row of the table corresponds to a syntactic form of @emph{@t{outer}}
and each column corresponds to a syntactic form of @emph{@t{inner}}. 
Entries tell whether each specific form of nesting is allowed and reference
notes giving any additional restrictions on allowed forms of nesting and
explanations of why forbidden forms of nesting are forbidden.
<blockquote><table>
<tr><td></td>
    <td align="right">@t{@emph{inner} }</td>
    <td>@t{ //... }</td>
    <td>@t{ //@... }</td>
    <td>@t{ /*...*/ }</td>
    <td>@t{ /*@...*/ }</td>
    <td>@t{ /**...*/ }</td>
</tr>
<tr><td align ="center">@t{@emph{outer}}</td><tr>
<tr><td> </td></tr>
<tr><td align="right"><font size=-1>@t{//@...@emph{inner}...}</td>
    <td></td>
    <td align="center">@t{ok(1)}</td>
    <td align="center">@t{ok(1)}</td>
    <td align="center">@t{ok(2)}</td>
    <td align="center">@t{ok(2)}</td>
    <td align="center">@t{no(3)}</td>
</tr>
<tr><td align="right">@t{/*@...@emph{inner}...*/}</td>
    <td></td>
    <td align="center">@t{ok(4)}</td>
    <td align="center">@t{ok(4)}</td>
    <td align="center">@t{no(5)}</td>
    <td align="center">@t{no(5)}</td>
    <td align="center">@t{no(5)}</td>
</tr>
<tr><td align="right">@t{<esc>...@emph{inner}...</esc>}</td>
    <td></td>
    <td align="center">@t{ok(6)}</td>
    <td align="center">@t{ok(6)}</td>
    <td align="center">@t{no(5)}</td>
    <td align="center">@t{no(5)}</td>
    <td align="center">@t{no(5)}</td>
</tr>
</table></blockquote>
Notes:
<blockquote>(1)  ESC/Java considers @emph{@t{inner}} to extend
to the end of the line on which it begins.

(2)  @emph{@t{inner}} must be entirely on one line (because
Java defines @emph{@t{outer}} to end at the end of the line).

(3)  The current ESC/Java might accept this form of nesting, but
it is strongly deprecated.  There is no good reason to use it, and
@t{javadoc(5)}
will not recognize @emph{@t{inner}} as a documentation comment.

(4)  ESC/Java considers @t{inner} to extend either to the
end of the line or up to the closing @t{*/} of @emph{@t{outer}},
whichever is earlier.

(5)  These forms of nesting are forbidden because Java does not
allow comments of the form @t{/*}...@t{*/} to be nested inside
each other.  Thus Java compilers would interpret the closing @t{*/}
of @emph{@t{inner}} as ending @emph{@t{outer}}.

(6)   ESC/Java considers @t{inner} to extend either
to the end of the line or up to the closing @t{</esc>} of @emph{@t{outer}},
whichever is earlier.</blockquote>
@b{Examples}

Here are some examples of legal nesting of comments and pragmas inside
pragmas:
<blockquote>
@itemize
@item
@t{//@ ghost public /*@ non_null // comment */ Object o;}


 
@item
@t{/*@ requires a > 0;                
// comment 1}


@t{    requires b > 0;  //@ nowarn Pre // comment
2}

@t{    requires c > 0;                
// comment 3 */}

@t{  void m(int a, int b, int c) @{ }...@end itemize
</blockquote>
Here are some examples of illegal nesting:
<blockquote>
@itemize
@item
@t{/*@ ghost public /*@ non_null */ Object o; */}

@item
@t{//@@ requires a > 0;  /* multi-line "nested"}


@t{                       
comment */}@end itemize
</blockquote>
@b{Tip:  }ESC/Java's warning messages for these two examples of
illegal nesting fail to give the line number on which the error occurs
(but do indicate that the problem is an "unterminated comment"). 
You can localize the error by running a Java compiler on your program (which
is generally a good thing to do before running ESC/Java, anyway).

@node The most basic pragmas, Some remarks concerning assert and assume, Rules about where pragmas may occur, ESC/Java2 Pragmas
@subsection The most basic pragmas

In this section we describe the simplest ESC/Java pragmas: @t{nowarn},
@t{assume},
@t{assert},
and @t{unreachable}.  The @t{nowarn} pragma is essentially
a blunt instrument for getting ESC/Java to shut up about uninteresting
warnings, thus helping to prevent ESC/Java's known imperfections and limitations
from becoming major sources of user annoyance.  The
@t{assert}
and
@t{assume} pragmas are the fundamental pragmas of which most others
are simply more elaborate forms (see <a href="#2.2.1  Most ESC/Java pragmas are just fancy forms of assert and">section
2.2.1</a>).  They may also be useful in their own right (see particularly
<a href="#2.2.3  A helpful tip:  Experiments with assert and assume pragm">section
2.2.3</a>).

@menu
* nowarn pragma::               
* assert pragma::           
* assume pragma::               
* unreachable pragma::          
@end menu

@node nowarn pragma, assert pragma, The most basic pragmas, The most basic pragmas
@subsubsection @t{nowarn} pragma

A @t{nowarn} pragma is a lexical pragma.  It has the form:
<blockquote>@t{nowarn @emph{L} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{L}} is a (possibly empty) comma-separated list of warning
types from the following list:
<blockquote>@t{ArrayStore      Invariant      
Post}

@t{Assert          LoopInv        
Pre}

@t{Cast           
NegSize         Race}

@t{Deadlock        NonNull        
Reachable}

@t{Exception       NonNullInit    
Unreadable}

@t{IndexNegative   Null           
Uninit}

@t{IndexTooBig     OwnerNull      
ZeroDiv}</blockquote>
The pragma suppresses any warning messages of the types in @emph{@t{L}}
that are associated with the line on which the pragma appears.  If
@emph{@t{L}}
is empty, all warning types are suppressed.   See <a href="#4  Warnings">section
4</a> for descriptions of the different types of warnings.

@b{Fine points}

Some ESC/Java warning messages refer to two source code locations, namely
(1) a location indicating the control point where an error could potentially
occur at runtime, and (2) the location of a pragma (or, occasionally,
a Java declaration) associated with the warning.  In such cases the
warning can be suppressed by a @t{nowarn} pragma on either of the
indicated source lines.

The @t{nowarn} pragma is potentially unsound, and should be used
only in cases where the programmer is willing to take responsibility that
the suppressed warnings are really false alarms.  The primary intended
use of @t{nowarn} pragmas is where the suppressed warnings concern
situations that are impossible in practice, but for reasons beyond ESC/Java's
ability to discover.  Another use would be to suppress warnings for
circumstances that are actually harmless (and where the programmer is willing
to take responsibility that they are harmless).  For example, a @t{nowarn}
pragma might be used to suppress a warning for a null dereference if the
resulting exception would be caught by a handler (but in such a case the
current ESC/Java will not check that there actually is a handler, nor will
it check for any errors that might occur during or after execution of the
handler).

The @t{nowarn} pragma suppresses warnings on a line-by-line basis. 
ESC/Java also provide command-line options that enable and disable checking
at a much coarser grain (see the descriptions of the @t{-nowarn},
@t{-warn},
@t{-start},
@t{-routine},
and @t{-routineIndirect} options on the @t{escjava(1)} man page).

Unlike warning messages, ESC/Java error messages cannot be suppressed
by @t{nowarn} pragmas.  Error messages report conditions that
prevent ESC/Java from making enough sense of the program to do further
checking.

@b{Bug:}  The current ESC/Java does not allow another pragma
to follow a @t{nowarn} pragma in the same pragma-containing comment. 
Since the only lexical pragma in the current ESC/Java is @t{nowarn},
and since you can say with one @t{nowarn} pragma anything that you
can say with two, this should not cause problems in practice.

@node assert pragma, assume pragma, nowarn pragma, The most basic pragmas
@subsubsection assert pragma

An @t{assert} pragma is a statement pragma.  It has the form
<blockquote>@t{assert @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{E}} is boolean specification expression.  The
pragma causes ESC/Java to issue a warning if it cannot establish that @emph{@t{E}}
is true whenever control reaches the pragma.

@node assume pragma, unreachable pragma, assert pragma, The most basic pragmas
@subsubsection assume pragma
 
An @t{assume} pragma is a statement pragma.  It has the form
<blockquote>@t{assume @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{E}} is boolean specification expression.  The
pragma causes ESC/Java to assume that @emph{@t{E}} is true whenever
control reaches the pragma.  In other words, for any execution path
in which @emph{@t{E}} is false when control reaches the pragma, ESC/Java
ignores the path from that point on.

@b{Example}

The usual purpose of an @t{assume} pragma is to supply ESC/Java
with some piece of information that is incapable of deducing on its own,
thereby preventing ESC/Java from generating spurious warnings.  In
the code fragment
<blockquote>@t{22:       
// start complicated computation guaranteed to leave i != 0}

@t{...       }...

@t{146:       //
end of complicated computation}

@t{147:       //@
assume i != 0;}

@t{148:       if
(b) @{}

@t{149:        
g = h/i;}

@t{150:       }
else {}

@t{151:        
h = g/i + g/j;}

@t{152:       @}}</blockquote>
the @t{assume} pragma at line 147 prevents ESC/Java from warning that
the division by @t{i} in lines 149 and 151 may give rise to an @t{ArithmeticException},
but ESC/Java will still generate a warning about the division by @t{j}
in line 151 unless it can deduce that @t{j} will never be zero when
control reaches that point.

@b{Fine points}

Like the @t{nowarn} pragma, the @t{assume} pragma is potentially
unsound, and should be used only if the programmer is willing to take responsibility
that @emph{@t{E}} holds whenever control reaches the pragma (or at
least is willing to give up further checking for any execution paths on
which @emph{@t{E}} is false).  When faced with the choice of
using either an@t{ assume} pragma or a @t{nowarn} pragma to suppress
a spurious warning, it is preferable to use an @t{assume} pragma (if
it is practical to do so), since the @t{assume} pragma more explicitly
documents your assumptions about the behavior of the program.

The sentence ``In other words, for any execution path ... from that
point on.'' may have seemed unclear to some readers.  For some more
examples of its meaning, consider the following code fragment:
<blockquote>@t{31:     
if (u != null | v != null) e = 10;}

@t{32:      if (v ==
null) @{}

@t{33:       
w = a.f;}

@t{34:       
//@ assert b != null;}

@t{35:       
//@ assume a != null & b != null & c != null & d != null &
e > 0;}

@t{36:       
x = c.f;}

@t{37:       
//@ assert d != null;}

@t{38:      } else {}

@t{39:       
c = new }...@t{;}

@t{40:       
d = v;}

@t{41:      @}}

@t{42:      y = a.g;}

@t{43:      //@ assert
b != null;}

@t{44:      z = c.g;}

@t{45:      //@ assert
d != null;}

@t{46:      //@ assert
e > 0;}</blockquote>
When ESC/Java checks this code:
<blockquote>
@itemize
@item
ESC/Java will not warn of a possible dereference of @t{null} at line
36 or of a possible assertion failure at line 37, because the only way
control can reach those lines is by first reaching the @t{assume}
pragma at line 35.

@item
The @t{assume} pragma at line 35 will not prevent ESC/Java from issuing
warnings about line 33  and/or 34, because control can reach those
lines before reaching line 35.

@item
ESC/Java might issue warnings about line 42 and/or 43, because control
might reach those lines by some path that does not first reach line 35. 
This can happen if control can reach line 32 with @t{a} or @t{b}
being @t{null} and @t{x} being non-null.

@item
ESC/Java will not warn of a possible dereference of @t{null} at line 44
or of a possible assertion failure at line 45 or 46.  Every execution
path that reaches line 44 first either reaches line 35 (in which case
ESC/Java considers further execution of that path only for cases where
the expression in the @t{assume} pragma would evaluate to @t{true}) or
reaches lines 39 and 40 (in which case the @t{c} and @t{d} are assigned
non-null values, and @t{e} must already have been assigned a nonnegative
value at line 31).  </blockquote> For a concise formal description of
the semantics of @t{assume}, @xref{[LSS99], [LSS99]}.
@end itemize

@node unreachable pragma,  , assume pragma, The most basic pragmas
@subsubsection @t{unreachable} pragma

An @t{unreachable} pragma is a statement pragma.  It has the
form
<blockquote>@t{unreachable ;}@emph{<sub>opt</sub>}</blockquote>
The pragma is semantically equivalent to
<blockquote>@t{assert false;}</blockquote>
except for giving rise to a different warning message.

@node Some remarks concerning assert and assume, Pragmas for specifying routines, The most basic pragmas, ESC/Java2 Pragmas
@subsection Some remarks concerning assert and assume

[@emph{Readers anxious to ``cut to the chase'' may skip this section on first
reading.  Others, however, may find that this material aids their
intuition about how ESC/Java works.}]

The @t{assert} and @t{assume} pragmas introduced in <a href="#2.1  The most basic pragmas">section
2.1</a> are in some sense the most basic ESC/Java pragmas.  We make
some remarks about them here before going on to describe the rest.

@menu
* The assume pragma should be used with judgment::  
* Most ESC/Java pragmas are just fancy forms of assert and assume::  
* A nowarn pragma suppresses warnings by turning assertions into assumptions::  
* A helpful tip::               
@end menu

@node The assume pragma should be used with judgment, Most ESC/Java pragmas are just fancy forms of assert and assume, Some remarks concerning assert and assume, Some remarks concerning assert and assume
@subsubsection The @t{assume} pragma should be used with judgment

An @t{assume} pragma resembles an @t{assert} pragma in that each
states a condition that the programmer believes to hold whenever control
reaches a certain point in the program.  The difference is that ESC/Java
checks--that is, issues a warning if it cannot establish--the condition
(called an @emph{asserted condition} or @emph{assertion}) in an @t{assert}
pragma, but ESC/Java takes the @emph{assumed condition} (or @emph{assumption})
in an @t{assume} pragma for granted.  That is, the programmer
takes responsibility that assumed conditions will hold.

Put another way, the @t{assume} pragma allows the programmer to
trade spurious warnings (incompleteness) for possible missed warnings (unsoundness). 
Thus, you should use @t{assume} pragmas with care, lest by supplying
an incorrect assumption you suppress warnings of genuine errors. 
For example, ESC/Java will not warn of any error that might occur downstream
in the execution path from the line:
<blockquote>@t{    x = null; //@ assume x != null;}</blockquote>
since there can be no execution path where the assumption holds after the
assignment is performed.

On the other hand, there will be cases where @t{assume} pragmas
(or @t{nowarn} pragmas, which call for similar caution in their use)
will be the only practical means to eliminate spurious warnings. 
Also, while it is sometimes possible to eliminate spurious warnings by
means that don't carry the same risks of missed warnings, some judgment
must be exercised as to whether the improved assurance of correctness will
be worth the increased effort in any particular case.

@node Most ESC/Java pragmas are just fancy forms of assert and assume, A nowarn pragma suppresses warnings by turning assertions into assumptions, The assume pragma should be used with judgment, Some remarks concerning assert and assume
@subsubsection Most ESC/Java pragmas are just fancy forms of @t{assert} and @t{assume}

The ESC/Java annotation language includes over twenty different kinds of
pragmas, but to a first approximation they are mainly more or less elaborate
ways of adding assertions (i.e., claims about the program state that are
checked by the ESC/Java) and/or assumptions (i.e., claims that are taken
for granted by ESC/Java) at different points in the program.  Indeed
one can also think of the checking that ESC/Java does in the absence of
any user annotations as simply checking implicit assertions before each
pointer dereference, array access, etc., so that, for example, the program
fragment
<blockquote>@t{x = a[i];}</blockquote>
is treated as if it were
<blockquote>@t{//@ assert a != null; assert 0 <= i; assert i < a.length;}

@t{x = a[i];}</blockquote>
There are several valuable differences between the explicit introduction
of assertions through the use of @t{assert} pragmas and their implicit
introduction through other ESC/Java pragmas and through built-in checking
rules:
<blockquote>
@itemize
@item
Warnings arising from @t{assert} pragmas all produce the same kind
of warning message:

<blockquote>...@t{: Warning: Possible assertion failure (Assert)}</blockquote>
Implicitly introduced assertions, on the other hand, give rise to a wide
variety of more specific messages.
@item
An @t{assert} pragma can occur only where a Java statement can occur,
but implicitly introduced assertions are not limited to statement boundaries. 
For example, given the statement

<blockquote>@t{p = m(q) + q[++i]}</blockquote>
ESC/Java makes sure that the implicit assertion that array @t{q} is
non-null is introduced at a control point after the call to method
@t{m},
and that the implicit assertion that index @t{i} is in bounds is introduced
at a control point after @t{i} is incremented.  For the user
to introduce explicit assertions at these points, it would be necessary
to modify the Java source code, breaking the statement into several parts
and introducing a temporary variable for the result of the call to @t{m}.
@item
An @t{assert} pragma introduces a single assertion at the control
point where it occurs.  In contrast, a single other pragma (or built-in
checking rule) can introduce many assertions throughout the program--for
example, at every call of a given method, or at every access to a given
variable.

@item
The systematic introduction of assertions at certain points in a program
sometimes makes it possible for ESC/Java safely to introduce assumption
at other points.
</blockquote>
In short, the various pragmas (and built-in checking rules) provided by
ESC/Java enable the introduction of collections of assertions and assumptions
in a manner that would be quite tedious, awkward, and error-prone to accomplish
with explicit @t{assert} and @t{assume} pragmas alone.
@end itemize

@node A nowarn pragma suppresses warnings by turning assertions into assumptions, A helpful tip, Most ESC/Java pragmas are just fancy forms of assert and assume, Some remarks concerning assert and assume
@subsubsection A @t{nowarn} pragma suppresses warnings by turning assertions into assumptions

Recall from the previous section (<a href="#2.2.1  Most ESC/Java pragmas are just fancy forms of assert and">2.2.1</a>)
that ESC/Java's built-in checking for null dereferences works, in effect,
by implicitly putting an assertion before each pointer dereference in the
program, so that the line

@t{    209:     
z = x.f;}

gets treated as if it were
<blockquote>@t{209:     
/*@ assert x != null; */ z = x.f;}</blockquote>
except that the precise text of the warning message, if any, is different. 
The way that a @t{nowarn} pragma suppresses warnings is by turning
the (implicit or explicit) assertions that would generate the warnings
into assumptions.  Thus, for example, the code fragment
<blockquote>@t{209:     
z = x.f; //@ nowarn Null;}

@t{210:      w = x.g;}</blockquote>
is treated by ESC/Java like
<blockquote>@t{209:     
/*@ assume x != null; */ z = x.f;}

@t{210:      /*@ assert
x != null; */ w = x.g;}</blockquote>
By changing the implicit assertion that @t{x} is non-null on line
209 into an assumption, the @t{nowarn} pragma not only prevents ESC/Java
from warning of a possible dereference of @t{null} on line 209, but
also satisfies the implicit assertion on line 210, thus preventing ESC/Java
from warning that the evaluation of the expression @t{x.g} might dereference
@t{null}.

It should be clear from the above that the comments in <a href="#2.2.0  The assume pragma should be used with judgment.">section
2.2.0</a> about the need for judgment regarding the use of @t{assume}
pragmas are (at least) equally applicable to @t{nowarn} pragmas.

@node A helpful tip,  , A nowarn pragma suppresses warnings by turning assertions into assumptions, Some remarks concerning assert and assume
@subsubsection A helpful tip: Experiments with @t{assert} and @t{assume} pragmas can help you understand ESC/Java's behavior and debug your annotated code

As illustrated in the example of <a href="#0  An illustrative example of using ESC/Java">section
0</a>, using ESC/Java will often be an iterative process:  You run
ESC/Java on your program; it reports some warnings; you address the warnings
by changing either the Java code itself or the annotations; you run ESC/Java
again; and so on until ESC/Java reports no warnings.  At some point
in this process, you may find that you can't figure out why ESC/Java is
issuing some warning, or why the change you made to address some warning
isn't making the warning go away.  In such cases experiments with
@t{assert} 
and  @t{assume}  pragmas can be useful in the same way that
displaying intermediate results is useful in ordinary debugging.

Suppose, for example, that the problem seems to be that ESC/Java is
missing some critical fact that ``should be obvious.''  You might
try adding an @t{assert} pragma for the (supposedly obvious) fact
and see whether ESC/Java really warns that the @t{assert} could fail. 
Or you might try adding an @t{assume} pragma to see whether supplying
the (supposedly critical) missing fact really eliminates the warning.

Such experiments can also clarify your own understanding of your program. 
Consider, for example, the situation described in <a href="#0.7  Scene 7:  We run ESC/Java again and it still issues a warn">section
0.7</a>, where ESC/Java continued to complain of a possible array bounds
error even after we fixed the bug in the surrounding @t{for} loop:
<blockquote>@b{ESC/Java input from file Bag.java:}

@t{       }...

@t{16:      for (int
i = 0; i < n; i++) @{}

@t{17:       
if (a[i] < m) @{}

@t{       }...

@b{ESC/Java output:}

@t{Bag.java:17: Warning: Possible array index too large (IndexTooBig)}

@t{      if (a[i] < m) @{}

@t{           ^}

@t{1 warning}</blockquote>
If we found this behavior puzzling we might consider the experiment of
adding an  @t{assert}  pragma between lines 16 and 17. 
The outcome of the experiment would depend on which of the two ``obvious''
assertions we chose:
<blockquote>@t{//@ assert i < n;}</blockquote>
or
<blockquote>@t{//@ assert i < a.length;}</blockquote>
In either case, observing the outcome might take us a step closer to understanding
the situation.

@b{Note:}  Some earlier versions of ESC/Java had a bug that
sometimes resulted in highly counterintuitive failure to warn of the first
potential error on an execution path.  For example, if a program contained
the lines
<blockquote>@t{23:     
//@ assert x < 10 & y < 10;}

@t{...      }...@t{  
// statements not modifying x}

@t{33:      //@ assert
x < 10;}</blockquote>
then ESC/Java might have produced an @t{Assert} warning for line 33,
but not for line 23 (even though the assertion at line 33 could be false
after execution of lines 24-32 only if the assertion at lines 23 had been
false beforehand, and even though ESC/Java would have warned about line
23 if the assertion in line 33 were not present).  This behavior could
be quite confusing for a user attempting to use @t{assert} pragmas
as a debugging aid, as suggested in this section.  We have since made
changes to ESC/Java to prevent such behavior, or at least greatly reduce
its likelihood.  If you observe a case where addition of an assertion
inhibits ESC/Java from warning about a potential error earlier in the execution
path, we would like to know about it. See the instructions on reporting
bugs in <a href="#Appendix B:  Installing and using ESC/Java at your site">appendix
B</a>.

@node Pragmas for specifying routines, Pragmas for specifying data invariants, Some remarks concerning assert and assume, ESC/Java2 Pragmas
@subsection Pragmas for specifying routines

In this section, we describe those pragmas, called @emph{routine modifier
pragmas},  that explicitly supply specifications for individual
routines.

@b{Fine points}

The reader should be aware that these pragmas are not the only ones
that give rise to routine specifications.  In this regard, we direct
the reader's attention particularly to the descriptions of the @t{non_null}
and @t{invariant} pragmas in sections <a href="#2.4.0  non_null pragma">2.4.0</a>
and <a href="#2.4.1  invariant pragma">2.4.1</a>, as well as to the description
of the @t{axiom} pragma in section <a href="#2.4.2  axiom pragma">2.4.2</a>.

All routine modifier pragmas have a number of properties in common:
@itemize 
@item ESC/Java allows modifiers for a routine declaration to appear not only
in the usual place for modifiers near the beginning of the declaration,
but also just before the opening left brace of the routine's body, or before
the final semicolon if there is no body (as in an interface, @t{abstract}
class, or sometimes in a @t{.spec} file (see <a href="#5.1.2  Specification (.spec) files">section
5.1.2</a>)).  For example, the @t{requires} pragma that we introduced
for the @t{Bag} constructor in <a href="#0.2  Scene 2:  We write a requires (precondition) pragma for">section
0.2</a>

@t{       //@ requires
input != null;}

@t{       Bag(int[]
input) @{}

@t{       }...

might equally well have been written after the signature of the constructor

@t{       Bag(int[]
input)}

@t{        
/*@ requires input != null; */ @{}

@t{       }...

with identical semantics (except, of course, that warning messages
referring to the pragma would indicate a different source file location).
@item
Regardless of where a routine modifier pragma appears, the parameters of
the routine are in scope in any specification expression in the pragma.

@item
In an @t{ensures} (<a href="#2.3.2  ensures pragma">section 2.3.2</a>)
pragma modifying a constructor and in any pragma modifying an instance
method, specification expressions may mention @t{this}, denoting the
constructed object or the object whose method is being invoked.  As
usual in contexts where @t{this} may occur, it may occur implicitly,
a field access @t{this.@emph{f}} being written simply as @emph{@t{f}}
(unless the name @emph{@t{f}} is hidden, for example by a parameter
name).

@item
The pragmas in this section specify preconditions, modification targets,
and normal and exceptional postconditions of routines.  When a method
of a class or interface @emph{@t{S}} inherits or overrides [@emph{JLS},
8.4.6] a method @emph{@t{m}} from a class or interface @emph{@t{T}},
the method @emph{@t{S.m}} inherits all the preconditions, modification
targets, and postconditions of @emph{@t{T.m}}, with the formal parameter
names of @emph{@t{S.m}} being substituted for those of @emph{@t{T.m}}. 
(ESC/Java desugars implicit references to @t{this}, as described in
the previous bullet, before doing the formal parameter substitution, so
nothing funny happens if only one of the two formal parameter lists includes
a name conflicting with a field of @t{this}.)  This treatment
of inheritance sometimes leads to unsound checking in the presence of multiple
inheritance (see section <a href="#C.0.5  Multiple inheritance">C.0.5</a>).

@item
When checking code that contains a call to a routine, ESC/Java interprets
the routine's preconditions, modification targets, and postconditions with
the actual parameters values substituted for the formal parameter names,
and in the case of an instance method call @t{@emph{E}.@emph{m}(}...@t{)}@emph{,}
with the value of @emph{@t{E}} substituted for @t{this} (including,
of course, implicit occurrences of @t{this}).  In cases where
evaluation of the actual parameters may have side-effects or may raise
exceptions, ESC/Java does the right thing:  It checks the preconditions
of the routine for the program state after the side-effects, and only for
cases in which evaluation of all parameters would terminate normally.

@item
When checking code that contains a method call @t{@emph{E}.@emph{m}(}...@t{)},
ESC/Java determines the specification (preconditions, modification targets,
and postconditions) of @emph{@t{m}} based on the static type @emph{@t{T}}
of @emph{@t{E}}, even if @emph{@t{E}} can be proven always to
be of some subtype @emph{@t{S}} of @emph{@t{T}}.  (To get
ESC/Java to use additional specifications of @t{@emph{S}.@emph{m}}
beyond those inherited from @t{@emph{T}.@emph{m}}, you could rewrite
the Java code to cast @emph{@t{E}} to type @emph{@t{S}} before
invoking @emph{@t{m}}.)
@end itemize

@menu
* requires pragma::             
* modifies pragma::             
* target fields::               
* ensures pragma::              
* A note on the interaction of modifies and old::  
* exsures pragma::              
* also_ensures pragma::         
* also_exsures pragma::         
* also_requires pragma::        
* also_modifies pragma::        
@end menu

@node requires pragma, modifies pragma, Pragmas for specifying routines, Pragmas for specifying routines
@subsubsection @t{requires} pragma

A @t{requires} pragma is a routine modifier pragma.  It has the
form
<blockquote>@t{requires @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{E}} is a boolean specification expression.  The
pragma makes @emph{@t{E}} a precondition of the routine the pragma
modifies.  When checking the body of the routine, ESC/Java assumes
that @emph{@t{E}} holds initially.   When checking a call
to the routine, ESC/Java issues a warning if it cannot establish that @emph{@t{E}}
holds at the call site.

@b{Fine points}

If the routine is @t{synchronized}, then @emph{@t{E}} is assumed
to hold before acquisition of the lock.  If the routine is a constructor,
then @emph{@t{E}} is assumed to hold before the implicit superclass
constructor call, if any, and thus also before execution of instance variable
initializers.

Except for the formal parameters of the routine, the variables mentioned
in @emph{@t{E}} must be spec-accessible (see <a href="#3.3  Scoping, name resolution, and access control in specificat">section
3.3</a>) anywhere the routine itself is accessible.  For example,
a precondition of a @t{public} method may not mention a @t{private}
variable (unless the variable is declared @t{spec_public}, see <a href="#2.5.0  spec_public pragma">section
2.5.0</a>).

A method declaration that overrides another method declaration cannot
be modified with a @t{requires} pragma, but inherits the overridden
method's preconditions as described above.  Multiple inheritance can
lead to unsoundness in some cases, as discussed in <a href="#C.0.5  Multiple inheritance">section
C.0.5</a>.

A single routine declaration may be modified with any number of @t{requires}
pragmas.  The effective precondition is the conjunction of all the
preconditions given, but any resulting warning message indicates the specific
@t{requires}
pragma giving rise to the warning, and warnings arising from each pragma
can be suppressed individually.

@node modifies pragma, target fields, requires pragma, Pragmas for specifying routines
@subsubsection @t{modifies} pragma

A @t{modifies} pragma is a routine modifier pragma.  It has the
form
<blockquote>@t{modifies @emph{L} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{L}} is a nonempty, comma-separated list of specification
designators.  A specification designator designates a mutable component
of the state.  It is very much like a Java @emph{LeftHandSide} [@emph{JLS},
19.12], but generalized as described below.  The pragma specifies
that the routine is allowed (but not required) to modify any of the state
components listed in @emph{@t{L}}.

The state components named in modifies pragmas of a routine are called
@emph{modification
targets} of the routine.  When checking code that calls a routine,
ESC/Java assumes that the call modifies only the routine's modification
targets (with the usual substitutions) and possibly also any freshly allocated
state, regardless of whether the call terminates normally or abruptly.
However, the current ESC/Java does not enforce @t{modifies} pragmas
when checking a routine's implementation.

@b{Fine points}

Permissible forms of specification designators are:
<blockquote>
@itemize
@item
@emph{a simple name} @emph{@t{n}}.  The name must denote a non-@t{final}
field (possibly a ghost field, see <a href="#2.6.0  ghost pragma">section
2.6.0</a>).  This form allows modification of @t{this.@emph{n}}
if the routine is an instance method, or of @t{@emph{T}.@emph{n}}
if the routine is a static method of class @emph{@t{T}}.

@item
@emph{a field access} of the form @t{@emph{O}.@emph{f}}, where @emph{@t{O}}
is a specification expression of a reference type @t{T} and @emph{@t{f}}
denotes one of the fields (possibly a ghost field) of @t{T}. 
This form allows modification of @t{@emph{O}.@emph{f}}.  If @emph{@t{f}}
is a static field, @emph{@t{O}} is used only in that its static type
disambiguates @emph{@t{f}}.

@item
@emph{an array access} of the form @t{@emph{A}[@emph{I}]}, where @emph{@t{A}}
is a specification expression of an array type, and @emph{@t{I}} is
a specification expression of an integral type other than @t{long}. 
This form allows modification of @t{@emph{A}[@emph{I}]}.

@item
@emph{an array range} of the form @t{@emph{A}[*]}, where @emph{@t{A}}
is a specification expression of an array type.  This form allows
modification of all elements of @emph{@t{A}} (but not of @emph{@t{A}}
itself).
@end itemize
</blockquote>
A routine may be annotated with multiple @t{modifies} pragmas, in
which case a call is assumed possibly to modify any state component listed
in any of the @t{modifies} pragmas.  If no modification targets
are specified for a routine, then ESC/Java will assume that calls to the
routine modify only freshly allocated state, if any.

A method declaration that overrides another method declaration cannot
be annotated with a @t{modifies} pragma, but inherits the modification
targets of the overridden method.  Note that this forbids the overriding
method from modifying additional state, but see the description of @t{also_modifies}
below (<a href="#2.3.8  also_modifies pragma">section 2.3.8</a>).

@node target fields, ensures pragma, modifies pragma, Pragmas for specifying routines
@subsubsection target fields

When a modification target of a routine has the form @t{@emph{E}.@emph{f}}
(or simply @emph{@t{f}}, meaning @t{this.@emph{f}}), the field
@emph{@t{f}}
is said to be a @emph{target field} of the routine.  (Note that a
modification target of the form @t{@emph{E}.@emph{g}.@emph{f}} makes
@emph{@t{f}}
but not @emph{@t{g}} be a target field).

@node ensures pragma, A note on the interaction of modifies and old, target fields, Pragmas for specifying routines
@subsubsection @t{ensures} pragma

An @t{ensures} pragma is a routine modifier pragma.  It has the
form
<blockquote>@t{ensures @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{E}} is a boolean specification expression.  The
pragma makes @emph{@t{E}} a normal (that is, non-exceptional) postcondition
of the routine the pragma modifies.  When checking the body of the
routine, ESC/Java issues a warning if it cannot establish that @emph{@t{E}}
holds whenever the routine terminates normally. When checking code that
calls the routine, ESC/Java assumes that @emph{@t{E}} holds just after
the call if the call terminates normally.

In a postcondition of a non-@t{void} method, the special ESC/Java
identifier @t{\result} denotes the result of the method.  (For
constructors, the constructed object may be denoted only by @t{this},
not by @t{\result}.) The static type of @t{\result} is the result
type of the method.

Within @emph{@t{E}}, an expression of the form @t{\fresh(@emph{R})}
where @emph{@t{R}} is a specification expression of a reference type
is true if the object denoted by @emph{@t{R}} in the post-state is
allocated in the post-state (implying that @t{@emph{R }!= null} in
the post-state) and was not allocated in the pre-state.  The static
type of @t{\fresh(@emph{R})} is boolean.

A postcondition @emph{@t{E}} may contain expressions of the form
@t{\old(@emph{X})}. 
Roughly speaking, @t{\old(@emph{X})} means the value of @emph{@t{X}}
in the pre-state.  The static type of @t{\old(@emph{X})} is the
same as the static type of @emph{@t{X}}.  An expression @emph{@t{X}}
used as an argument of @t{\old} may not itself contain applications
of @t{\old} or @t{\fresh}.  More precise details are given
below.

@b{Fine points}

Postconditions of a @t{synchronized} method apply to the state
after the release of the lock.

Except for formal parameters, identifiers used in postconditions of
a routine (and not within @t{\old}) denote their values in the post-state. 
While Java allows a routine body to include assignment to the routine's
formal parameters (thus using the parameters as local variables), such
assignments have no effect as seen by the caller, since parameters are
passed by value.  Therefore ESC/Java interprets occurrences of formal
parameters in postconditions as denoting the original (pre-state) actual
parameter values.

A single routine declaration may be modified with any number of @t{ensures}
pragmas.  The effective postcondition is the conjunction of all the
postconditions given, but any resulting warning message indicates the specific
@t{ensures}
pragma giving rise to the warning, and warnings arising from each pragma
can be suppressed individually.

In a postcondition, an expression of the form @t{\old(@emph{X})},
where @emph{@t{X}} is a specification expression, denotes the value
denoted by @emph{@t{X}}, except that (1) any occurrence in @emph{@t{X}}
of a target field (see <a href="#2.3.1.0  target fields">section 2.3.1.0</a>)
of the routine is interpreted according to the pre-state value of the field,
and (2) if any modification target of the routine has the form @t{@emph{A}[@emph{i}]}
or @t{@emph{A}[*]}, then @emph{all} array accesses within @emph{@t{X}}
are interpreted according to the pre-state contents of arrays.  Note
that in the normal postcondition of a non-@t{void} method, @t{\result}
always refers to the method's result, even when @t{\result} occurs
in an argument to @t{\old}.  Similarly occurrences of @t{this}
in a normal postcondition of a constructor always refer to the constructed
object.  See sections <a href="#2.3.3  A note on the interaction of modifies and \old">2.3.3</a>and
<a href="#3.2.15  \old">3.2.15</a>
for further discussion of the semantics of @t{\old}.

It is a source of potential unsoundness for a postcondition to mention
a variable that might not be spec-accessible (<a href="#3.3  Scoping, name resolution, and access control in specificat">section
3.3</a>) to an override of that method, and ESC/Java may forbid such postconditions. 
In particular ESC/Java forbids postconditions of a method that mention
@t{private}
variables except when the routine is @t{static}, is @t{final},
is @t{private}, or is declared in a @t{final} class, or when
the @t{private} variables mentioned are declared @t{spec_public}
(<a href="#2.5.0  spec_public pragma">section 2.5.0</a>).  The current
ESC/Java doesn't forbid, for example, postconditions of @t{public}
methods from mentioning @t{package} variables, but future versions
of ESC/Java may not be so lenient.

A method declaration that overrides another method declaration cannot
be modified with an @t{ensures} pragma, but inherits the postconditions
of the overridden method.  (See also the @t{also_ensures} pragma
described in <a href="#2.3.5  also_ensures pragma">section 2.3.5</a>.)

Since Java guarantees that a constructor call returns a newly allocated
object, ESC/Java automatically supplies the postcondition @t{\fresh(this)}for
every constructor.

@node A note on the interaction of modifies and old, exsures pragma, ensures pragma, Pragmas for specifying routines
@subsubsection A note on the interaction of @t{modifies} and @t{\old}

[@emph{This section may be skipped on first reading.}]

The current ESC/Java does not check that the body of a routine actually
obeys the constraint expressed by the routine's @t{modifies} pragmas. 
This lack of checking is one of several potential sources of missed warnings
(unsoundness).  The potential for missed warnings is mitigated somewhat
by a fact that may have seemed surprising when we mentioned it in the previous
section (<a href="#2.3.2  ensures pragma">2.3.2</a>):  If a particular
field (either a static field or an instance variable) is not specified
as a target field (<a href="#2.3.1.0  target fields">section 2.3.1.0</a>)
of a routine, then occurrences of that field within arguments to @t{\old}
in the routine's postconditions are taken to refer to post-state values.

Consider, for example a class with an integer field @t{f} and a
method @t{incf} declared as follows, with no @t{modifies} pragma:
<blockquote>@t{//@ ensures f == \old(f) + 1;}

@t{void incf() @{}

@t{  this.f++;}

@t{@}}</blockquote>
Since @t{f} is not specified as a modification target of @t{incf},
ESC/Java will interpret both occurrences of @t{f} in the ensures pragma
as referring to the post-state value of @t{this.f}.  Consequently
ESC/Java will be unable to show that the method establishes the specified
postcondition, and will issue a warning to that effect.

While this warning may seem surprising, the result of interpreting the
second occurrence of @t{f} as the pre-state value of @t{this.f}
would be even worse.  Under the latter interpretation ESC/Java would
issue no warnings about the body of @t{incf}, but would assume after
a call
@t{x.incf()} both (1)  that @t{x.f} had been incremented
in accordance the postcondition), and (2) that @t{x.f} was left unchanged
in accordance with the (unchecked) empty set of modification targets. 
Since these assumptions are mutually contradictory, the result would be
equivalent to assuming @t{false}, and ESC/Java would silently omit
all checking after the call.

As an additional guard against omission of @t{modifies} pragmas,
ESC/Java issues a caution message for any occurrence of @t{\old(@emph{X})}
in a postcondition of a method @emph{@t{m}} unless (1) the expression
@emph{@t{X}}
mentions some target field of @emph{@t{m}}, or (2) the expression
@emph{@t{X}}
includes an array access and @emph{@t{m}} has some modification target
of the form @t{@emph{A}[@emph{I}]} or
@t{@emph{A}[*]}.

Of course,  the interactions
of @t{modifies} and @t{\old}
described above do not entirely make up for the fact that the current ESC/Java
does no checking of @t{modifies}
pragmas.  A method declaration like
<blockquote>@t{//@ modifies
someOtherObject.f; //instead of this.f}

@t{//@ ensures f == \old(f) + 1;}

@t{void incf() @{}

@t{  this.f++;}

@t{@}}</blockquote>
can still effectively disable checking
of code following calls to @t{incf}.

@node exsures pragma, also_ensures pragma, A note on the interaction of modifies and old, Pragmas for specifying routines
@subsubsection @t{exsures} pragma

An @t{exsures} pragma is a routine modifier pragma.  It has the
form
<blockquote>@t{exsures (@emph{T} @emph{t}) @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
or
<blockquote>@t{exsures (@emph{T}) @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{T}} is a subtype of @t{java.lang.Throwable}, @emph{@t{t}}
(if included) is a an identifier, and @emph{@t{E}} is a boolean specification
expression.  The identifier @emph{@t{t}} (if included) is in
scope in @emph{@t{E}}, where it has type @emph{@t{T}}. 
The pragma makes @emph{@t{E}} an exceptional postcondition of the
routine the pragma modifies.  That is, it specifies that @emph{@t{E}}
holds whenever the routine completes abruptly by throwing an exception
@emph{@t{t}}
whose type is a subtype of @emph{@t{T}}.

When checking the body of the routine, ESC/Java checks that @emph{@t{E}}
holds whenever the routine completes abruptly by throwing an exception
@emph{@t{t}}
whose type is a subtype of @emph{@t{T}}.  When checking code
that calls the routine, ESC/Java assumes that the @emph{@t{E}} holds
just after the call if the call completes abruptly with an exception whose
type is a subtype of @emph{@t{T}}.

@b{Fine points}

Like normal postconditions, exceptional postconditions of @t{synchronized}
methods apply to the state after the release of the lock.

The identifier @emph{@t{t}} may not be the same as any formal parameter
of the routine, and quantified expressions (see sections <a href="#3.2.10  \forall">3.2.10</a>
and <a href="#3.2.11  \exists">3.2.11</a>) within @emph{@t{E}} may
not use @emph{@t{t}} as a bound variable name.

The expression @emph{@t{E}} can include uses of @t{\fresh}
and @t{\old}, which have the same semantics as in an @t{ensures}
pragma.  However, @emph{@t{E}} cannot mention @t{\result},
since an abruptly-terminating routine invocation returns no result. 
Similarly
@emph{@t{E}} cannot mention @t{this} if the @t{exsures}
pragma modifies a constructor, since we take the view that the object being
constructed should be discarded.  (This view is potentially unsound;
see <a href="#C.0.8  Constructor leaking">section C.0.8</a>.)

A single routine declaration may be modified with any number of @t{exsures}
pragmas.  ESC/Java checks that the body obeys each @t{exsures}
pragma and assumes that calls obey each @t{exsures} pragma. 
For example, if a routine is modified by the pragmas
<blockquote>@t{exsures (@emph{T1} @emph{t}) @emph{E1}; exsures (@emph{T2
t})
@emph{E2};}</blockquote>
where @emph{@t{T2}} is a subtype of @emph{@t{T1}}, then ESC/Java
checks (if checking the body of the routine) or assumes (if checking a
caller) that @emph{@t{E1}} holds whenever the routine completes abruptly
by throwing an exception that is an instance of @emph{@t{T1}}, 
and that both @emph{@t{E1}} and @emph{@t{E2}} hold whenever the
routine completes abruptly by throwing an exception that is an instance
of @emph{@t{T2}}.

A method declaration that overrides another method declaration cannot
be modified with an @t{exsures} pragma, but inherits the exceptional
postconditions of the overridden method.  (See also the @t{also_exsures}
pragma described in <a href="#2.3.6  also_exsures pragma">section 2.3.6</a>.)

@node also_ensures pragma, also_exsures pragma, exsures pragma, Pragmas for specifying routines
@subsubsection @t{also_ensures} pragma

An @t{also_ensures} pragma is a routine modifier pragma.  It
has the form
<blockquote>@t{also_ensures @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{E}} is a boolean specification expression.  An
@t{also_ensures} pragma
has the same semantics as an @t{ensures} pragma, but may appear as
a modifier only of a method declaration that overrides another method declaration
(while overriding method declarations are forbidden to have
@t{ensures}
pragmas).

@node also_exsures pragma, also_requires pragma, also_ensures pragma, Pragmas for specifying routines
@subsubsection @t{also_exsures} pragma

An @t{also_exsures} pragma is a routine modifier pragma.  It
has the form
<blockquote>@t{also_exsures (@emph{T} @emph{t}) @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
or
<blockquote>@t{also_exsures (@emph{T} @emph{t}) @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{T}} is a subtype of @t{java.lang.Throwable}, @emph{@t{t}}
(if included) is a an identifier, and @emph{@t{E}} is a boolean specification
expression.  An @t{also_exsures} pragma has the same semantics,
and must obey the same syntactic restrictions, as an @t{exsures} pragma,
but may appear as a modifier only of a method declaration that overrides
another method declaration (while overriding method declarations are forbidden
to have
@t{exsures} pragmas).

The relationship between @t{also_exsures} and @t{exsures}
is exactly analogous to that between @t{also_ensures} and @t{ensures}.

@node also_requires pragma, also_modifies pragma, also_exsures pragma, Pragmas for specifying routines
@subsubsection @t{also_requires} pragma

An @t{also_requires} pragma is a routine modifier pragma.  It
has the form
<blockquote>@t{also_requires @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{E}} is a boolean specification expression.  An
@t{also_requires}
pragma has the same semantics as a @t{requires} pragma, but the declaration
of a method @emph{@t{C.m}} may be modified by an @t{also_requires}
pragma only if all three of the following conditions hold:
@itemize
@item
@emph{@t{C}} is a class (not an interface),

@item
the declaration of @emph{@t{C.m}} overrides some method declaration
in a superinterfaces of @emph{@t{C}}, and

@item
the declaration of @emph{@t{C.m}} does @emph{not} override any method
declaration in a superclass of @emph{@t{C}}.
@end itemize
(By contrast, a @t{requires} pragma may only modify a method [or constructor]
declarations that does not override any other method declaration, and neither
a @t{requires} pragma nor an @t{also_requires} pragma may modify
a method declarations in classes that overridden declaration in a superclasses,
or a method declaration in an interface that overrides a method declaration
in a superinterface.)

@b{Fine points}

The @t{also_require} pragma is a potential source of unsoundness. 
Suppose method @t{C.m} of class @t{C} overrides method @t{I.m}
of interface @t{I}.  When checking a call of the form @t{@emph{E}.m(}...@t{)},
where @emph{@t{E}} is an expression of type @t{I}, ESC/Java only
enforces the preconditions of @t{I.m} and not any preconditions given
by @t{also_requires} pragmas modifying the declaration of @t{C.m}. 
However, the expression @emph{@t{E}} might evaluate to a value of
type @t{C}, causing the call to invoke @t{C.m}, and the correctness
of @t{C.m}'s implementation may depend on preconditions given in such
@t{also_requires}
pragmas.  The reason that ESC/Java includes an @t{also_requires}
pragma, despite its unsoundness, is that it is often essential for preconditions
of a method @t{C.m} to mention instance variables of class @emph{@t{C}},
and Java does not allow instance variables to be declared in interfaces. 
[Note, however, that ESC/Java does allow declarations of ghost variables
(<a href="#2.6.0  ghost pragma">section 2.6.0</a>) in interfaces.]

In addition to the potential unsoundness just described, the @t{also_requires}
pragma shares the potential unsoundness of the @t{require} pragma
in the presence of multiple inheritance (see <a href="#C.0.5  Multiple inheritance">section
C.0.5</a>).

@node also_modifies pragma,  , also_requires pragma, Pragmas for specifying routines
@subsubsection @t{also_modifies} pragma

An @t{also_modifies} pragma is a routine modifier pragma.  It
has the form
<blockquote>@t{also_modifies @emph{L} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{L}} is a nonempty, comma-separated list of specification
designators (see <a href="#2.3.1  modifies pragma">section 2.3.1</a>). 
An @t{also_modifies} pragma has the same semantics as a @t{modifies}
pragma (<a href="#2.3.1  modifies pragma">section 2.3.1</a>), but may appear
only as a modifier of a method declaration that overrides another method
declaration (while overriding method declarations are forbidden to have
@t{modifies}
pragmas).

An overriding method declaration may modify both the targets named in
its own @t{also_modifies} pragmas and any modification targets it
inherits from the overridden method.

@b{Fine points}

Like the @t{also_require} pragma (<a href="#2.3.7  also_requires pragma">section
2.3.7</a>), the @t{also_modifies} pragma is a potential source of
unsoundness.  When writing code that follows a call @t{@emph{E}.m(}...@t{)}
where @emph{@t{E}} has static type @t{T}, a programmer may reasonably
be expected to cope with the possibility that the call has modified parts
of the state named in @t{modifies} pragmas that annotate the declaration
of @t{T.m}, but it seems unreasonable to expect the programmer to
deal with the possibility that the call might modify other parts of the
state (perhaps parts mentioned in @t{also_modifies} pragmas of yet-to-be-written
overrides) as well.

The reason that ESC/Java includes an @t{also_modifies} pragma is
that an overriding method may need to modify fields that are not in scope
at the point where the overridden method is declared, such as @t{private}
variables of the class declaring the overriding method.

To reduce the likelihood of unsoundness, @t{also_modifies} pragmas
ought not to name modification targets that are accessible [@emph{JLS},
6.6] from the scope of the overridden method.  However, the current
ESC/Java does not enforce any such restriction.  For more discussion
of the problem of specifying modification targets in the presence of subclassing,
and for a sound solution thereof, see @xref{[Leino98]}.

@node Pragmas for specifying data invariants, Pragmas affecting conditions under which variables may be referenced, Pragmas for specifying routines, ESC/Java2 Pragmas
@subsection Pragmas for specifying data invariants

This section describes several pragmas that ESC/Java provides for specifying
properties of variables and data structures.

@menu
* non_null pragma::             
* invariant pragma::            
* axiom pragma::                
* loop_invariant pragma::       
@end menu

@node non_null pragma, invariant pragma, Pragmas for specifying data invariants, Pragmas for specifying data invariants
@subsubsection @t{non_null} pragma

A @t{non_null} pragma is a modifier pragma.  It may modify the
declaration of a variable of a reference type.  The variable may be
a static field, instance variable, local variable, or parameter. 
It has the form
<blockquote>@t{non_null}</blockquote>
The pragma causes ESC/Java to check, at each assignment to the variable,
that the value assigned is not @t{null}, and to assume at each use
(except in one case, described below) that the value is not @t{null}. 
When a formal parameter declaration is annotated with a @t{non_null}
pragma, ESC/Java checks at each call site that the corresponding actual
is not @t{null}.

@b{Fine points}

In the case that a @t{non_null} instance variable @emph{@t{x}}
is declared in a class @emph{@t{C}} and a read access of @emph{@t{x}}
occurs in a constructor of @emph{@t{C}} that does not call a sibling
constructor, then ESC/Java does not automatically assume that the value
read will be non-null.

ESC/Java allows a @t{non_null} pragma to modify a formal parameter,
even though Java 1.0 syntax does not allow modifiers on parameter declarations.

A @t{non_null} pragma may not modify a parameter declaration of
a method that overrides another method.

Sometimes the same design decision might be expressed either by a @t{non_null} pragma
or by some other kind of pragma, such as a @t{requires} pragma or
an @t{invariant} pragma.  For example, instead of using a
@t{requires}
pragma in <a href="#0.2  Scene 2:  We write a requires (precondition) pragma for">section
0.2</a>
<blockquote>@t{      
//@ requires input != null;}

@t{       Bag(int[]
input) @{}

@t{       }...

@t{       @}}</blockquote>
we might have written
<blockquote>@t{      
Bag(/*@ non_null */ int[] input) }...</blockquote>
and instead of using a @t{non_null} pragma in <a href="#0.3  Scene 3:  We add a non_null pragma for the field a.">section
0.3</a>
<blockquote>@t{     class Bag
@{}

@t{       /*@ non_null
*/ int[] a;}

@t{       }...</blockquote>
we might have written
<blockquote>@t{     class Bag
@{}

@t{       int[]
a;}

@t{       //@ invariant
a != null;}

@t{       }...</blockquote>
In each of these cases, the alternative annotations have slightly different
semantics, but either alternative would be adequate to enable checking
of our example program.  (The differences are that the @t{non_null}
pragmas are checked at every assignment to @t{input} or @t{a},
whereas the @t{requires} pragma would allow assignments of @t{null}
to @t{input} within the body of the @t{Bag} constructor, and
the @t{invariant} pragma would be checked only at routine calls, as
explained in <a href="#2.4.1  invariant pragma">section 2.4.1</a>.)

We recommend that @t{non_null} pragmas be used in preference to
semantically similar @t{requires} and@t{ invariant} pragmas except
in cases where the somewhat stricter semantics of @t{non_null} makes
its use untenable.

@b{Limitation:}  Since the current ESC/Java does not check static
bodies and static initializers, it is entirely the user's responsibility
to ensure that static fields declared as @t{non_null} are in fact
initialized to have non-null values.

@node invariant pragma, axiom pragma, non_null pragma, Pragmas for specifying data invariants
@subsubsection @t{invariant} pragma

An @t{invariant} pragma is a declaration pragma.  It has the
form
<blockquote>@t{invariant @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{E}} is a boolean specification expression.  The
pragma declares @emph{E} to be an @emph{object invariant} of the class
within whose declaration the pragma occurs.  If @emph{@t{E}}
mentions @t{this}, either explicitly or implicitly, then @emph{@t{E}}
is said to be an @emph{instance invariant}; otherwise @emph{@t{E}}
is a @emph{static invariant}. Roughly speaking, all object invariants are
supposed to hold at all routine call boundaries.  That is (1) if @emph{@t{E}}
an instance invariant of class @emph{@t{T}}, then
<blockquote>@t{(\forall @emph{T} @emph{t}; @emph{E}<sub>this=@emph{t}</sub>)}</blockquote>
should be true at all routine calls and returns, where @emph{@t{t}}
is a variable not occurring in @emph{@t{E}}, the universal quantification
ranges over all allocated instances @emph{@t{T}}, and @t{@emph{E}<sub>this=@emph{t}</sub>}
is the result of substituting @emph{@t{t}} for all (explicit and implicit)
occurrences of @t{this} in @emph{@t{E}}, and (2) if @emph{@t{E}}
is a static invariant of class @emph{@t{T}}, then @emph{@t{E}}
should be true at all routine call boundaries, regardless of whether or
not any allocated objects of class @emph{@t{T}} exist.

@b{Fine points}

ESC/Java does not fully enforce the discipline just described, partly
because it would be too strict for many programs (which may have legitimate
reasons for temporarily breaking object invariants) and partly because
such checking would be very expensive.  Instead, it performs less
expensive (and potentially unsound) checking.  Essentially, ESC/Java
assumes object invariants for all objects on entry to a routine body, and
checks objects invariants for all objects at the end of the body; however,
at call sites, ESC/Java checks object invariants only for parameters and
static fields, and assumes of the call only that it doesn't break any object
invariants and that it establishes object invariants for freshly allocated
objects.  More precisely, when checking the body of a routine @emph{@t{R}}:
<blockquote>ESC/Java chooses, from all available object invariants, a set
of invariants to be considered relevant to the checking of @emph{@t{R}}. 
[The heuristic used to choose the ``relevant'' object invariants is fairly
complicated and subject to change, so we don't explain it in this manual.]

ESC/Java assumes that at the start of @emph{@t{R}}'s body, all
relevant static invariants hold, and all relevant instance invariants hold
for all allocated objects.</blockquote>

<blockquote>For every routine call in the body of @emph{@t{R}}:
<blockquote>ESC/Java checks that all relevant (to @emph{@t{R}}) static
invariants hold before the call.

ESC/Java checks that the value of each actual parameter of the call,
including the implicit @t{this} parameter of an instance method call,
satisfies every relevant (to @emph{@t{R}}) instance invariant of every
supertype of the static type of the corresponding formal parameter.

ESC/Java checks that the value of each static field @emph{@t{f}}
(actually each of a heuristically selected set of ``relevant'' static fields)
satisfies every relevant (to @emph{@t{R}}) instance invariant of every
supertype of the static type of @emph{@t{f}}.

ESC/Java assumes that all relevant (to @emph{@t{R}}) static invariants
hold after the call.

ESC/Java assumes that, after the call, each relevant (to @emph{@t{R}})
object invariant @emph{@t{E}} of type @emph{@t{T}} holds for
all instances of @emph{@t{T}} for which @emph{@t{E}} held before
the call, and for all instances of @emph{@t{T}} allocated by the call
(except that when a constructor calls a superclass constructor, ESC/Java
assumes that the constructed object satisfies the instance invariants of
the supertype but not necessarily any additional invariants of the subtype).</blockquote>
ESC/Java checks that at the end of @emph{@t{R}}'s body all relevant
static invariants hold, and all relevant instance invariants hold for all
allocated objects (except that if @emph{@t{R}} is a constructor, ESC/Java
assumes that the constructed object satisfies all relevant object invariants
of @emph{@t{R}}'s type, including those inherited from supertypes,
but not necessarily those of any subtypes of @emph{@t{R}} whose constructors
may call @emph{@t{R}} as a superclass constructor, and furthermore,
when considering abnormally-terminating executions of the constructor @emph{@t{R}},
ESC/Java makes no assumptions about the constructed object).</blockquote>
It is a potential source of unsoundness for an object invariant to mention
fields other than those declared in the class declaring the invariant. 
For example, suppose that @t{S} is a subclass of @t{T} and that
an instance invariant of @t{S} mentions a field @t{f} declared
in @t{T}, and consider a routine @t{R} containing an assignment
@t{x.f
= }... where @t{x} has static type @t{T}.  If
@t{x}
has allocated type @t{S}, the assignment might break the instance
invariant declared in @t{S}.  But neither the programmer of @t{R}
nor ESC/Java can reasonably be expected to enforce the invariants of @t{S},
since @t{S} might not be in scope in @t{R}, and indeed might
be written after @t{R}.  The current ESC/Java does not attempt
to detect declarations of such unenforceable invariants, but future versions
may bring some such declarations to the programmer's attention.  (For
a more detailed examination of the unenforceable invariant problem, see
@xref{[LS97], LS97}.)

When a @t{final} field @emph{@t{f} }is declared with a @emph{VaribleInitializer
}[@emph{JLS},
19.8.2], ESC/Java may infer some simple invariants automatically. 
For instance, if the initializer is a constant expression [@emph{JLS},
15.27] @emph{@t{C}} not of type @t{String}, then ESC/Java infers
the invariant @t{@emph{f} == @emph{C}}; and if the initializer is
a string literal, an array constructor, or an invocation of @t{new},
then ESC/Java infers the invariant @t{@emph{f} != null}.

@b{Limitation:}  The static bodies and static initializers of
a class are supposed to establish the static invariants declared in the
class, but the current ESC/Java does not check this.  Thus the responsibility
for initial establishment of static invariants lies entirely with the user.

@node axiom pragma, loop_invariant pragma, invariant pragma, Pragmas for specifying data invariants
@subsubsection @t{axiom} pragma

An @t{axiom} pragma is a declaration pragma.  It has the form
<blockquote>@t{axiom @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{E}} is a boolean specification expression.  The
pragma causes ESC/Java to assume that @emph{@t{E}} (which we call
an @emph{axiom}) is true at the start of every routine body that it checks.

@b{Fine points}

Since the @t{axiom} pragma introduces assumptions without introducing
reciprocal checks, it is potentially unsound and programmers should use
it carefully.

An obvious use of an @t{axiom} pragma would be to state some universally
true fact.  For example, the built-in capabilities of Simplify (@t{Simplify(1)}),
the theorem prover used by ESC/Java, include a decision procedure for linear
arithmetic but no rules about multiplication other than by constants. 
Thus there may be cases where ESC/Java would be helped by an annotation
like
<blockquote>@t{//@ axiom (\forall int x, y; x >= 0 & y >= 0 ==> x*y
>= 0);}</blockquote>
(recall that ESC/Java doesn't claim to check for arithmetic overflow, so
an axiom like this is consistent with the view that Java @t{int}'s
behave like the mathematical integers, although this view is not true). 
Beware that profligate introduction of axioms (in the hope that they may
occasionally be useful) can have a serious impact on performance.

Less obviously, axioms mentioning Java variables are sometimes useful,
and ESC/Java allows such axioms despite the unsoundness inherent in assuming
them when checking method bodies without also checking them at call sites. 
For further discussion of this point, see the example in <a href="#2.7.2  Examples illustrating race and deadlock checking">section
2.7.2</a> involving an axiom about the lock order.  Axioms may not
mention @t{this} or @t{\lockset}.

When checking a constructor body, ESC/Java assumes that axioms hold
before the implicit superclass constructor call, if any, and thus also
before execution of instance variable initializers.

When it is clear that the correctness of the program depends on a particular
property holding for a particular expression @emph{@t{E}} of type
@emph{@t{T}}
at a particular point in the program, it may be better to write an @t{assume}
pragma
<blockquote>@t{//@ assume }...@emph{@t{E}}...@t{;}</blockquote>
at that point in the program, in preference to introducing an axiom pragma
<blockquote>@t{//@ axiom (\forall t @emph{T}; }...@t{t}...@t{);}</blockquote>
stating that the property holds for all values of the type (even if it
does).  For one thing, the Simplify theorem prover used by ESC/Java
is incomplete, and may not discover the relevant instance of the axiom
to apply.  On the other hand, regardless of whether Simplify discovers
the relevant instance of the axiom, it may spend a lot of time considering
many irrelevant instances.

@b{Limitation:  }Just as for invariants (<a href="#2.4.1  invariant pragma">section
2.4.1</a>), ESC/Java limits its use of axioms to a restricted set of axioms
considered ``relevant'' to the checking of any particular routine @emph{@t{R}}. 
In the current version of ESC/Java, the only axioms considered relevant
are those declared in the same class as the implementation being checked.
Consequently, there is no way for the user to declare ``libraries'' of
potentially useful axioms.

@node loop_invariant pragma,  , axiom pragma, Pragmas for specifying data invariants
@subsubsection @t{loop_invariant} pragma

A @t{loop_invariant} pragma is a statement pragma.  It has the
form
<blockquote>@t{loop_invariant @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{E}} is a boolean specification expression.  
A @t{loop_invariant} pragma must appear before a Java loop statement--that
is, a Java @t{for}, @t{while}, or @t{do} statement [@emph{JLS},
14.10, 14.11. 14.12], or a Java labeled statement [@emph{JLS}, 14.6] @t{@emph{L}:@emph{
S}} such that @emph{@t{S}} is a Java labeled statement. Between
the @t{loop_invariant} pragma and the associated loop statement, there
may be no intervening Java code and no intervening pragmas, except for
@t{nowarn}
pragmas and other @t{loop_invariant} pragmas.  The pragma causes
ESC/Java to check that @emph{@t{E}} holds at the start of each iteration
of the loop.

@b{Fine points}

For the purposes of name-scoping, a loop invariant is treated as if
it occurred just inside the associated loop statement.  That is, if
the associated loop statement is a @t{for} statement (or a @t{for}
statement wrapped within one or more labeled statements), then the variables
declared by the @emph{ForInit} [@emph{JLS}, 19.11] are in scope in the
loop invariant.

An ``iteration of a loop'' includes the termination test, and also includes
the update code in a @t{for} loop.  Thus
<blockquote>@t{//@ loop_invariant @emph{E};}

@t{while (@emph{B}) @{}

@t{  @emph{S}}

@t{@}}</blockquote>
intuitively means
<blockquote>@t{while (true) @{}

@t{  //@ assert @emph{E};    // but giving a LoopInv
warning}

@t{  if (!(@emph{B})) break;}

@t{  S}

@t{@}}</blockquote>
(however, see the comments below about loop unrolling).  Note that
the checking of the loop invariant @emph{@t{E}} applies to the state
before the test of @emph{@t{B}} (and before any side effects in the
evaluation of @emph{@t{B}}).  Likewise,
<blockquote>@t{//@ loop_invariant }@emph{E}@t{;}

@t{do @{}

@t{  @emph{S}}

@t{@} while (B);}</blockquote>
intuitively means
<blockquote>@t{while (true) @{}

@t{ //@ assert @emph{E};    // but giving a LoopInv
warning}

@t{ @emph{S}}

@t{ if (!(@emph{B})) break;}

@t{@}}</blockquote>
and
<blockquote>@t{//@ loop_invariant @emph{E;}}

@t{@emph{L}: for(@emph{I1}, }...@t{, @emph{Im}; @emph{B};
@emph{U1,
}}...@t{@emph{,
Un}) @{}

@t{     @emph{S}}

@t{   @}}</blockquote>
intuitively means
<blockquote>@t{@{ @emph{I1}, }...@t{, @emph{Im};}

@t{  @emph{L}: while (true) @{}

@t{    //@ assert @emph{E};    // but
giving a LoopInv warning}

@t{    if (!(@emph{B})) break;}

@t{    @emph{S}}

@t{    @emph{U1}, }...@t{, @emph{Un};}

@t{   @}}

@t{@}}</blockquote>
but with any occurrence within @emph{@t{S}} of
<blockquote>@t{continue @emph{L};}</blockquote>
(or simply of @t{continue;} appearing outside of any nested loop and
thus meaning @t{continue @emph{L};}) transferring control only to
the end of @emph{@t{S}} rather than to the end of @emph{@t{Un}}.

In ESC/Java, loop invariants are optional.  The checker considers
only execution paths in which the loop body is executed at most once (and
the test for being finished is executed most twice), rather than the potentially
infinite number of paths that are really possible.  Because of this
simplification the checker doesn't need an invariant to analyze the loop.

If you do include a loop invariant, ESC/Java will check that it holds
both initially and after the single loop iteration that the current checker
considers.  Consequently, the checking performed on
<blockquote>@t{//@ loop_invariant @emph{E};}

@t{while (@emph{B}) @{}

@t{  @emph{S}}

@t{@}}</blockquote>
is actually the same as would be done for
<blockquote>@t{//@ assert @emph{E};    // but giving a
LoopInv warning}

@t{if (@emph{B}) @{}

@t{  S}

@t{  //@ assert @emph{E};  // but giving a LoopInv warning}

@t{  //@ assume !B; // (don't check later code for case @emph{B}
== true)}

@t{@}}</blockquote>
(where execution of a @t{continue} in @emph{@t{S}} results in
normal termination of @emph{@t{S}} and execution of a @t{break}
in @emph{@t{S}} results in normal termination of the entire code fragment
above).  You can make ESC/Java check more (or fewer) iterations of
loops by using the @t{-loop} command-line option (see <a href="#C.0.1  Loops">section
C.0.1</a>).

@node Pragmas affecting conditions under which variables may be referenced, Pragmas concerning ghost variables, Pragmas for specifying data invariants, ESC/Java2 Pragmas
@subsection Pragmas affecting conditions under which variables may be referenced

@menu
* spec_public pragma::          
* readable_if pragma::          
* uninitialized pragma::        
@end menu

@node spec_public pragma, readable_if pragma, Pragmas affecting conditions under which variables may be referenced, Pragmas affecting conditions under which variables may be referenced
@subsubsection @t{spec_public} pragma

A @t{spec_public} pragma is a modifier pragma.   It may
occur as a modifier only of a non-@t{public} field declaration. 
It has the form
<blockquote>@t{spec_public}</blockquote>
The effect of the pragma is to make the fields declared in the declaration
be as spec-accessible (that is accessible in pragmas, see <a href="#3.3  Scoping, name resolution, and access control in specificat">section
3.3</a>) as they would have been if the declaration had been @t{public}.

For example, if a @t{private} field of a class is declared with
a @t{spec_public} pragma, then the field can be mentioned in pre-
and postconditions of a @t{public} method, but clients of the class
cannot modify the field directly.

@b{Example}

Consider the @t{Bag} example form section 0.  In presenting
this example, we glossed over the issue of accessibility.  To allow
clients of the @t{Bag} class to make use of the routines of the class
(@t{Bag},@t{extractMin}, and others that we might add), these
routines should be declared @t{public}.   On the other hand,
the fields
@t{a} and @t{n} used in the implementation ought not
to be @t{public}.  For example, arbitrary clients ought not to
be able to write these fields except by calling routines of the
@t{Bag}
class.

If we simply declare the routines, but not the fields of@t{ Bag}
to be @t{public}, ESC/Java will complain:
<blockquote>@b{ESC/Java input from Bag.java}

@t{ 1:  class Bag @{}

@t{ 2:    /*@ non_null */
int[] a;}

@t{ 3:    int n;}

 ...@t{   }@t{ }...

@t{13:    //@ requires n >= 1;}

@t{14:    public int extractMin()
@{}

 ...@t{   }@t{ }...</blockquote>

<blockquote>@b{ESC/Java output:}

@t{Bag.java:13: Error: Fields mentioned in this modifier pragma must
be at least as accessible as the field/method being modified (perhaps try
spec_public)}

@t{  //@ requires n >= 1;}

@t{              
^}

@t{Caution: Turning off extended static checking due to type error(s)}

@t{1 caution}

@t{1 error}</blockquote>
If programmers using the @t{Bag} class are not supposed to know that
its implementation includes the field @t{n}, then it is unreasonable
to expect them to establish a precondition involving @t{n} before
calling @t{extractMin}.  We can prevent ESC/Java from complaining
by declaring the field @t{n} to be @t{spec_public}:
<blockquote>@t{ 3:    /*@ spec_public
*/ int n;}</blockquote>
This will allow @t{n} to be mentioned in @t{requires} pragmas
of @t{public} routines, as well as in pragmas occurring in other packages
that import the @t{Bag} class.  Of course, actual Java code in
other packages will not be able to read or write the @t{n} field directly
(as would be allowed if @t{n} were declared with a Java
@t{public}
modifier).

@b{Fine point}

By declaring @t{n} with a @t{spec_public} pragma, the implementer
of the @t{Bag} class expresses a design decision that users of @t{Bag}
are supposed to know about the @t{n} field, even if their Java code
cannot access it directly.  This design decision could cause problems
if implementer later decided to change the implementation to represent
a @t{Bag} using a data structure that did not include an explicit
count--for example, a linked list.  See the first example
in <a href="#2.6.2  Examples using ghost variables">section 2.6.2</a> for
further discussion of this issue.

@node readable_if pragma, uninitialized pragma, spec_public pragma, Pragmas affecting conditions under which variables may be referenced
@subsubsection @t{readable_if} pragma

A @t{readable_if} pragma is a modifier pragma.  It can occur
only as a modifier of a field declaration or of a local variable declaration. 
It has the form
<blockquote>@t{readable_if @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{E}} is a boolean specification expression.

The pragma causes ESC/Java to check that @emph{@t{E}} is true just
before any read access of any of the variable(s) declared in the declaration. 
The pragma thus expresses the programmer's intention that the variable
modified by the pragma has a meaningful value only when @emph{@t{E}}
is true.

The specification expression @emph{@t{E}} is allowed to mention
@t{this}
if the pragma modifies an instance field declaration, or if the pragma
modifies a local variable declaration within an instance method or a constructor. 
If the pragma modifies the declaration of an instance field @emph{@t{f}},
then for purposes of checking a read access @t{@emph{O}.@emph{f}},
occurrences of @t{this} in @emph{@t{E}} are taken to denote the
value of @emph{@t{O}}.

@b{Fine points}

If the pragma modifies a local variable declaration then the variables
declared by the declaration are not in scope in @emph{@t{E}}, even
if the pragma occurs just before the final semi-colon instead of before
the type.
<blockquote>@t{class C @{}

@t{  boolean b;}

@t{  void m() @{}

@t{    boolean b /*@ readable_if b */;}

@t{    // "b" in the pragma above means this.b, not
the local b}

@t{    // "b" in the pragma below means the local b}

@t{    /* readable_if b */ int c;}

@t{    }...

@t{  @}}

@t{@}}</blockquote>
If the pragma modifies a field declaration, then all fields of the containing
class are in scope in @emph{@t{E}}, even those that are declared in
textually later declarations.
<blockquote>@t{class C extends B @{}

@t{  /*@ readable_if b */ int a;}

@t{  boolean b;}

@t{  // "b" in the pragma means this.b, not ((B)this).b}

@t{  }...

@t{@}}</blockquote>
If the pragma modifies a field declaration, then the free variables of
@emph{@t{E}}
must be spec-accessible wherever fields declared by the declaration are
accessible according to Java's access control rules [@emph{JLS}, 6.6]
<blockquote>Remark:  For the picky, a more precise name
for this pragma might be ``@t{meaningful_only_if}''.

Remark:  Perhaps unfortunately, ESC/Java does not
provide a way to say when particular array elements are readable (meaningful). 
This could be useful since one could then express, for example, ``@t{a[i]}
is meaningful only if @t{0 <= i & i < n}'', which says that
only the first @t{n} elements of array @t{a} are in use.</blockquote>

@node uninitialized pragma,  , readable_if pragma, Pragmas affecting conditions under which variables may be referenced
@subsubsection @t{uninitialized} pragma

An @t{uninitialized} pragma is a modifier pragma.  An @t{uninitialized}
pragma can occur as a modifier only of a local variable declaration that
has an initializer.  The pragma causes ESC/Java to check that no execution
path reads the variable without first performing an assignment (other than
the initializer) to the variable.

The intended use of the @t{uninitialized} pragma is for situations
in which the conservative nature of Java's ``definite assignment'' rules
[@emph{JLS}, 16] has forced the programmer to supply an irrelevant initial
value.

@node Pragmas concerning ghost variables, Pragmas for specifying synchronization, Pragmas affecting conditions under which variables may be referenced, ESC/Java2 Pragmas
@subsection Pragmas concerning ghost variables

Unlike ESC/Modula-3 (see SRC Report 159, ``@uref{http://gatekeeper.dec.com/pub/DEC/SRC/research-reports/abstracts/src-rr-159.html, Extended
static checking}'') ESC/Java does not support data abstraction. 
But ESC/Java does provide a poor man's version of abstract variables, called
@emph{ghost}
variables.  We describe here the @t{ghost} pragma, which declares
ghost variables, and the @t{set} pragma, which modifies them, and
then give an example of their use.

@menu
* ghost pragma::                
* set pragma::                  
* Examples using ghost variables::  
@end menu

@node ghost pragma, set pragma, Pragmas concerning ghost variables, Pragmas concerning ghost variables
@subsubsection @t{ghost} pragma

A @t{ghost} pragma is a declaration pragma.  It is allowed where
the declaration of a class or interface member is allowed.  It has
the syntax
<blockquote>@t{ghost @emph{M} @emph{T} @emph{VD} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{T}} is a specification type (see <a href="#3.0  Specification types">section
3.0</a>), @emph{@t{VD}} is a Java @emph{VariableDeclarators} [@emph{JLS}19.8.2],
and @emph{@t{M}} is a sequence of modifiers.  (In other words,
the pragma is like an ordinary Java variable declaration preceded by the
word @t{ghost}.)  In the current ESC/Java, @emph{@t{M}}
must include the modifier @t{public}, and @emph{@t{VD}} can declare
only one identifier.  The only other modifier allowed in @emph{@t{M}}
is @t{static}.  No initializers are allowed in @emph{@t{VD}}.

The pragma is like the Java declaration
<blockquote>@t{@emph{M} @emph{T} @emph{VD} ;}@emph{<sub>opt</sub>}</blockquote>
except that it is visible only to ESC/Java, not to the compiler. 
The variables declared by a @t{ghost} pragma are called ghost variables.

@b{Fine points}

No field declared in @emph{@t{VD}} may have the same name as a
field (including a ghost field or a field declared in a supertype) already
declared for the type in whose declaration the pragma occurs.

The current ESC/Java does not implement local ghost variables.

A ghost field declared in an interface @emph{@t{I}} is multiply
inherited by classes that implement @emph{@t{I}} and interfaces that
extend @emph{@t{I}}.  (If a ghost variable @emph{@t{f}}
is declared in an interface @emph{@t{I}}, and @emph{@t{I}} is
extended by interfaces @emph{@t{J}} and @emph{@t{K}}, and a class
@emph{@t{C}}
implements @emph{@t{I}}, @emph{@t{J}}, and
@emph{@t{K}},
and if @emph{@t{x}} is a variable of type @emph{@t{C}}, then
the expressions @t{((@emph{I})@emph{x}).@emph{f}}, @t{((@emph{J})@emph{x}).@emph{f}},
@t{((@emph{K})@emph{x}).@emph{f}},
and @t{@emph{x}.@emph{f}} all denote the same ghost field.  That
is, @emph{@t{C}} gets only one copy of @emph{@t{f}}.)

For information about resolution of name conflicts involving ghost variables,
see <a href="#3.3  Scoping, name resolution, and access control in specificat">section
3.3</a>.

In some cases, it is useful to declare a ghost variable with a modifier
pragma, such as @t{non_null}.  In this case, the modifier pragma
must occur within a nested pragma-containing comment, for example:
<blockquote>@t{//@ ghost public /*@ non_null */ T t;}</blockquote>
More precisely, within a @t{ghost} pragma
<blockquote>@t{@emph{M} @emph{T} @emph{VD} ;}@emph{<sub>opt</sub>}</blockquote>
an inner pragma-containing comment containing modifier pragmas is allowed
either as part of @emph{@t{M}} or just after @emph{@t{VD}}. 
The only modifier pragmas that can usefully modify a ghost variable are
@t{non_null},
@t{monitored},
and @t{monitored_by} (the current ESC/Java may accept others, but
if it does they will have no effect on the checking performed).  In
addition, these pragmas are allowed only in the case where they would be
allowed for a normal variable according to the table in <a href="#2.0.1  There are four syntactic categories of pragmas.">section
2.0.1</a>.  For example, a @t{static} ghost variable cannot be
declared with the pragma @t{monitored}, or with the pragma @t{monitored_by
@emph{E}}
where the expression @emph{@t{E}} mentions @t{this}.  ESC/Java
checks @t{monitored} (<a href="#2.7.1  monitored pragma">section 2.7.1)</a>
and @t{monitored_by} (<a href="#2.7.0  monitored_by pragma">section
2.7.0)</a> pragmas for a ghost variable @emph{@t{g}} only where @emph{@t{g}}
is assigned to by a @t{set} pragma (<a href="#2.6.1  set pragma">section
2.6.1</a>), not at other places where @emph{@t{g}} is used in pragmas.

@node set pragma, Examples using ghost variables, ghost pragma, Pragmas concerning ghost variables
@subsubsection @t{set} pragma

A @t{set} pragma is a statement pragma.  It has the form
<blockquote>@t{set @emph{D} = @emph{E} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{D}} is a ghost designator and @emph{@t{E}} is
a specification expression containing no quantifiers or labels.  The
pragma has the same semantics as the Java assignment statement @t{@emph{D}=
@emph{E}}
would have if @emph{@t{D}} and @emph{@t{E}} were in Java.

A ghost designator can have one of the following forms:
<blockquote>@t{@emph{O}.@emph{f}} , where @emph{@t{O}} is specification
expression of an object type @emph{@t{T}} and @emph{@t{f}} is
a ghost field of @emph{@t{T}}.

@emph{@t{f}} , where @emph{@t{f}} is a static ghost field
or @t{this.@emph{f}} is a legal ghost designator of the preceding
form.</blockquote>
@b{Fine point}

If the field @emph{@t{f}} assigned to by a @t{set} pragma
is declared with a @t{non_null}, @t{monitored}, or @t{monitored_by}
pragma, then ESC/Java will perform the usual checking implied by the modifier
pragma, generating warnings in case the value being assigned may be @t{null},
or in case the specified lock may not be held.  This is the only circumstance
in which the current ESC/Java generates warning of possible runtime errors
in the evaluation of pragmas.

@node Examples using ghost variables,  , set pragma, Pragmas concerning ghost variables
@subsubsection Examples using ghost variables

@b{Example:  specifying @t{Bag} without revealing its implementation}

As pointed out in <a href="#2.5.0  spec_public pragma">section 2.5.0</a>,
there is a scoping problem with the @t{Bag} example from <a href="#0  An illustrative example of using ESC/Java">section
0</a>:  In a realistic situation, the implementer of the @t{Bag}
class may want to make @t{public} the routines of the class, but not
the fields.  How then are clients of the @t{public} method @t{extractMin}
to discharge the precondition @t{requires n >= 1}, which mentions
the non-@t{public} field @t{n}?

In section 2.5.0, we showed how to address the problem by declaring
@t{n}
with a @t{spec_public} pragma.  But what if the implementer of
the @t{Bag} class wanted to leave open the possibility of switching
to a different implementation (say, a linked list) in which the representation
of a @t{Bag} did not include an explicit count of the elements?

To resolve this annotation question, we must first make a design decision
about the actual Java code:  How, in fact, @emph{are} the clients
of the @t{Bag} class supposed to avoid ever calling the @t{extractMin}
method of an empty @t{Bag}?

One approach--the one that we will illustrate here--would be for the
implementer of the @t{Bag} class to provide a method @t{isEmpty}
that clients could use to test a @t{Bag} for emptiness before calling
its @t{extractMin} method.  To specify the semantics of the @t{Bag}
class, we would use a boolean ghost field @t{empty}, that would be
@t{true}
precisely for those @t{Bag}'s that contain no elements.  Here's
how that annotated implementation of @t{Bag} might look like under
this approach:
<blockquote>@t{ 1:  class Bag @{}

@t{ 2:     /*@ non_null
*/ int[] a;}

@t{ 3:     int n;}

@t{ 4:     //@ invariant
0 <= n && n <= a.length;}

@t{ 5:     //@ ghost
public boolean empty;}

@t{ 6:     //@ invariant
empty == (n == 0);}

@t{ 7:}

@t{ 8:     //@ requires
input != null;}

@t{ 9:     //@ ensures
this.empty == (input.length == 0);}

@t{10:     public Bag(int[]
input) @{}

@t{11:       n
= input.length;}

@t{12:       a
= new int[n];}

@t{13:       System.arraycopy(input,
0, a, 0, n);}

@t{14:       //@
set empty = n == 0;}

@t{15:     @}}

@t{16:}

@t{17:     //@ ensures \result
== empty;}

@t{18:     public boolean
isEmpty() @{}

@t{19:       return
n == 0;}

@t{20:     @}}

@t{21:}

@t{22:     //@ requires !empty;}

@t{23:     //@ modifies empty;}

@t{24:     //@ modifies n,
a[*];}

@t{25:     public int extractMin()
@{}

@t{26:       int
m = Integer.MAX_VALUE;}

@t{27:       int
mindex = 0;}

@t{28:       for
(int i = 0; i < n; i++) @{}

@t{29:        
if (a[i] < m) @{}

@t{30:          
mindex = i;}

@t{31:          
m = a[i];}

@t{32:        
@}}

@t{33:       @}}

@t{34:       n--;}

@t{35:       //@
set empty = n == 0;}

@t{36:       //@
assert empty == (n == 0);}

@t{37:       a[mindex]
= a[n];}

@t{38:       return
m;}

@t{39:     @}}

@t{40:   @}}</blockquote>
The precondition for @t{extractMin} on line 22 specifies that it is
incorrect to invoke the @t{extractMin} method of an empty @t{Bag}. 
The postcondition for @t{isEmpty} on line 17 allows clients (and ESC/Java)
to determine that a code fragment like
<blockquote>@t{if (!x.isEmpty()) i = x.extractMin();}</blockquote>
will never violate the precondition for @t{extractMin}.  The
invariant on line 6 relates the ghost field @t{empty} to the actual
field @t{n} in the implementation of a @t{Bag} and is of interest
only to the implementer of the @t{Bag} class and not to clients. 
ESC/Java uses this invariant to verify that the implementation of @t{isEmpty}
satisfies its postcondition, and to verify that the implementation of @t{extractMin},
when called in accordance with its precondition, will not attempt to access
@t{a[-1]}
in line 37.  The @t{set} pragmas on lines 14 and 35 guarantee
that the invariant on line 6 is established by the @t{Bag} constructor
and preserved by the @t{extractMin} method.

@b{Example:  specifying a generic queue}

Consider a class that implements queues of @t{Object}'s. 
There is a constructor that creates an empty queue, and there are instance
methods for enqueueing and dequeueing elements and for testing whether
a queue is empty:
<blockquote>@t{public class Queue @{}

@t{  }...

@t{  public class Queue() @{}...@t{@}}

@t{  public enqueue(Object e) @{}...@t{@}}

@t{  public boolean isEmpty() @{}...@t{@}}

@t{  public Object dequeue() throws @{}...@t{@}}

@t{@}}</blockquote>
In the absence of any annotations, a number of problems come up when checking
clients of the @t{Queue} class.

First, there is no check against calling @t{dequeue} on an empty
queue.

Second, a user may wish to have a queue whose elements are all of some
type @emph{@t{T}} (a proper subtype of @t{Object}).  Since
the result type of @t{dequeue} is @t{Object}, the user will frequently
have to cast the result of dequeue to a @t{T}.
<blockquote>@t{  T t = }...@t{, u;}

@t{  Queue q = new Queue();}

@t{  }...

@t{  q.enqueue(t);}

@t{  }...

@t{  u = (T)q.dequeue();}</blockquote>
Given the code fragment above, ESC/Java has no way to know that the cast
will succeed.

Finally, it is common for queues (and other such ``container'' objects)
to contain only non-null elements.  When a queue is intended to contain
only non-null elements it would be nice to have ESC/Java check that only
non-null elements are enqueued, and on the other hand not issue spurious
warnings about potential null dereferences on dequeued objects.

Here is a @t{.spec} file (see <a href="#5.1.2  Specification (.spec) files">section
5.1.2</a>) for the @t{Queue} class with annotations addressing the
issues described above.
<blockquote>@t{public class Queue @{}

@t{  //@ ghost public int size;}

@t{  //@ invariant size >= 0;}

@t{  //@ ghost public \TYPE elementType;}

@t{  //@ ghost public boolean canHoldNull;}

@t{  //@ ensures elementType == \type(Object);}

@t{  //@ ensures canHoldNull;}

@t{  //@ ensures size == 0;}

@t{  public Queue();}

@t{  /*@ requires \typeof(e) <: elementType |}

@t{              
(e == null & canHoldNull); */}

@t{  //@ modifies size;}

@t{  //@ ensures size == \old(size) + 1;}

@t{  public void enqueue(Object e);}

@t{  //@ ensures \result == (size == 0);}

@t{  public boolean isEmpty();}

@t{  //@ requires size >= 1;}

@t{  //@ modifies size;}

@t{  /*@ ensures \typeof(\result) <: elementType |}

@t{             
(\result == null & canHoldNull);}

@t{  */}

@t{  //@ ensures size == \old(size) - 1;}

@t{  public Object dequeue();}

@t{@}}</blockquote>
(The specification expression constructs @t{\TYPE}, @t{\type},
@t{\typeof},
and @t{<: }are explained in sections <a href="#3.0  Specification types">3.0</a>,
<a href="#3.2.0  \type">3.2.0</a>,
<a href="#3.2.1  \typeof">3.2.1</a>,
and
<a href="#3.2.3   Subtype:  <:">3.2.3</a>, respectively.)  Given
the specification above, the user can express the intention to use a queue
@t{q}
to hold only non-null elements of type @t{T} by writing
<blockquote>@t{Queue q = new Queue();}

@t{//@ set q.elementType = \type(T);}

@t{//@ set q.canHoldNull = false;}</blockquote>
ESC/Java will then warn of a possible precondition violation on any call
@t{q.enqueue(@emph{E})}
where @emph{@t{E}} may not be an instance of @t{T}.  On
the other hand it will not issue a (spurious) warning of possible cast
failure on @t{(T)q.dequeue()}.  Also ESC/Java will warn of a
possible precondition failure on @t{q.dequeue()} if it cannot establish,
based on the number of elements enqueued and dequeued done since the allocation
of @t{q} or the most recent call to @t{q.isEmpty}, that @t{q}
is nonempty (@t{q.size >= 1}) at the point of the call.

For more examples of the use ghost variables in specifying container
classes, read the files @t{Dictionary.spec}, @t{Enumerator.spec}
and @t{Vector.spec} in @file{<ESCJava2Root>/lib/specs/java/util}
(see <a href="#Appendix B:  Installing and using ESC/Java at your site">appendix
B</a>).

@node Pragmas for specifying synchronization,  , Pragmas concerning ghost variables, ESC/Java2 Pragmas
@subsection Pragmas for specifying synchronization

ESC/Java provides support for checking that multi-threaded programs respect
a locking discipline that prevents race conditions and simple deadlocks.

A race condition is a situation in which two threads access a variable
simultaneously and the accesses are not both read accesses.  To prevent
race conditions, the locking discipline requires that every shared variable
is @emph{monitored} by one or more locks.  If a variable is monitored
by a lock, a thread is not allowed to access the variable unless it holds
the lock (and this discipline is enforced by ESC/Java).

A deadlock occurs if there is a cycle of threads, each holding a lock
that some other thread in the cycle is waiting to acquire.  To prevent
deadlocks, the locking discipline requires that the programmer declare
a partial order in which locks are to be acquired.  ESC/Java will
then check that each thread does in fact acquire locks in the given order. 
But the checker trusts the programmer that the declared locking order is
actually a partial order.

@menu
* monitored_by pragma::         
* monitored pragma::            
* Examples illustrating race and deadlock checking::  
@end menu

@node monitored_by pragma, monitored pragma, Pragmas for specifying synchronization, Pragmas for specifying synchronization
@subsubsection @t{monitored_by} pragma

A @t{monitored_by} pragma is a modifier pragma.  It can occur
only as a modifier of a field declaration.  It has the form
<blockquote>@t{monitored_by @emph{L} ;}@emph{<sub>opt</sub>}</blockquote>
where @emph{@t{L}} is a nonempty, comma-separated list of specification
expressions.

The pragma declares that the modified field is a shared variable monitored
by the locks in @emph{@t{L}}.  That is, it causes ESC/Java to
check that (1) the field is never read except by a thread holding at least
one non-null lock in @emph{@t{L}} and (2) that the field is never
written except when at least one lock in @emph{@t{L}} is non-null
and the writing thread holds all non-null locks in @emph{@t{L}}. 
(See the first fine points below for an exception the preceding statement.)

If the field declaration modified by the pragma declares an instance
field @emph{@t{f}}, then the expressions in @emph{@t{L}} may
mention @t{this} (explicitly or implicitly).  When ESC/Java checks
an access to @emph{@t{O.f}}, occurrences of @t{this} within @emph{@t{L}}
are considered to denote the value of @emph{@t{O}}.

@b{Fine points}

When checking a constructor body ESC/Java does not require that any
lock be held in order to accesses a field of @t{this}, even if the
field is declared with at @t{monitored_by} or @t{monitored} (<a href="#2.7.1  monitored pragma">section
2.7.1</a>) pragma.  (In some cases, this can result in unsoundness;
see <a href="#C.0.8  Constructor leaking">section C.0.8</a>.)

All fields of the class containing the pragma are in scope in @emph{@t{E}},
even those that are declared in textually later declarations.
<blockquote>@t{class C extends B @{}

@t{  /*@ monitored_by g */ S f;}

@t{  T g;}

@t{  // "g" in the pragma means this.g, not ((B)this).g}

@t{  }...

@t{@}}</blockquote>
The variables mentioned in @emph{@t{L}} must be spec-accessible (<a href="#3.3  Scoping, name resolution, and access control in specificat">section
3.3</a>) anywhere the field itself is accessible [@emph{JLS}, 6.6]. 
For example, a @t{public} field may not be monitored by a @t{private}
lock (unless the lock is declared @t{spec_public}, see <a href="#2.5.0  spec_public pragma">section
2.5.0</a>).

A field declaration may be modified by multiple @t{monitored_by}
pragmas, in which case the effect is as if there were a single @t{monitored_by}
pragma listing all the locks mentioned in any of the actual @t{monitored_by}
pragmas.  (@b{Bug/limitation:}  When ESC/Java issues a @t{Race}
warning for such a field, it will mention only one of the @t{monitored_by}
pragmas, and possibly not the right one, as the annotation associated with
the warning.)

@node monitored pragma, Examples illustrating race and deadlock checking, monitored_by pragma, Pragmas for specifying synchronization
@subsubsection @t{monitored} pragma

A @t{monitored} pragma is a modifier pragma.  It can occur only
as a modifier of an instance variable declaration.  It has the form
<blockquote>@t{monitored}</blockquote>
and is semantically equivalent to
<blockquote>@t{monitored_by this;}</blockquote>

@node Examples illustrating race and deadlock checking,  , monitored pragma, Pragmas for specifying synchronization
@subsubsection Examples illustrating race and deadlock checking

Annotation of programs for race and deadlock checking typically requires
use not only of @t{monitored} and/or @t{monitored_by} pragmas
but of other pragmas as well, most commonly @t{requires} pragmas (<a href="#2.3.0  requires pragma">section
2.3.0</a>) and @t{axiom} pragmas (<a href="#2.4.2  axiom pragma">section
2.4.2</a>) involving the locking order @t{<} (<a href="#3.2.7  Lock order:  < and <=">section
3.2.7</a>) and the lock set @t{\lockset} (<a href="#3.2.5  \lockset">section
3.2.5</a>).  Rather than leave it to the reader to assemble the big
picture from fragments of information scattered over many sections of this
manual, we present here a few examples to show how the pieces fit together.

In specification expressions the special ESC/Java identifier @t{\lockset}
refers to a special variable, called the lock set, denoting the set of
all objects held as locks by the current thread.  For testing membership
of locks in the lock set, we overload the array subscripting notation,
so that @t{\lockset[X]} is true when object @t{X} is in the lock
set
@t{\lockset}.

Thus, given the instance field declarations
<blockquote>@t{T f;}

@t{U g;}

@t{/*@ monitored_by f, g; */ V h;}</blockquote>
the code fragment
<blockquote>@t{x.h = y.h}</blockquote>
is treated roughly like
<blockquote>@t{/*@ assert y != null; */   // Check for null
dereference}

@t{/*@ assert (y.f != null && \lockset[y.f]) |}

@t{           (y.g
!= null && \lockset[y.g]); */}

@t{           //
Check for race (<a href="#4.17  Race warning">section 4.17</a>) on read}

@t{/*@ assert x != null; */   // Check for null dereference}

@t{/*@ assert (x.f != null | x.g != null) &}

@t{           (x.f
!= null ==> \lockset[x.f]) &}

@t{           (x.g
!= null ==> \lockset[x.g]); */}

@t{           //
Check for race on write}

@t{x.h = y.h;}</blockquote>
The necessary conditions to establish such locking assertions can be established
explicitly, for example by a @t{requires} pragma as in
<blockquote>@t{//@ requires f != null && \lockset[f];}

@t{void m() @{}

@t{  }...@t{ h }...      @t{//
read access produces no Race warning}

@t{@}}</blockquote>
Also, a @t{synchronized} routine body and a @t{synchronized}
statement always begin by adding a lock to the lock set.
<blockquote>@t{class C @{}

@t{  monitored T t;}

@t{  synchronized void m() @{}

@t{    T x = t; /* no race because starting a synchronized}

@t{               
method establishes \lockset[this] */}

@t{    }...

@t{  @}}

@t{  void n() @{}

@t{    synchronized (this) @{}

@t{      T x = t;  // no race}

@t{      }...

@t{    @}}

@t{  @}}

@t{@}}</blockquote>
The preceding examples deal only with race detection.  We now turn
to the issue of deadlock detection.

ESC/Java supports a synchronization discipline in which deadlocks are
avoided by imposing a partial ordering on locks and acquiring locks only
in increasing order.  The arithmetic ordering relations @t{<}
and @t{<=} are overloaded to compare objects in the locking order. 
The special function @t{\max} yields the maximum lock in a lock set.

Without some help in the form of user-supplied pragmas, it is never
possible for ESC/Java to prove the absence of deadlock in a program that
ever acquires a lock.  Deadlock checking is therefore disabled by
default.  When deadlock checking is enabled (by use of the command-line
option
@t{-warn Deadlock}), ESC/Java checks @t{synchronized}
statements and @t{synchronized} methods and issues warnings if they
might acquire locks out of order.

A @t{synchronized} statement
<blockquote>@t{synchronized (E) @{}...@t{@}}</blockquote>
is treated roughly like
<blockquote>@t{Object e = E; // where e is a variable name not already
used}

@t{//@ assert e != null;  // but with Null warning on failure}

@t{//@ assert \lockset[e] | \max[\lockset] < e;  // but with
Deadlock warning}

@emph{Insert }@t{e}@emph{ into }@t{\lockset;}

@t{try}

@t{  @{}...@t{@}}

@t{finally}

@t{  }@emph{Restore former value of} @t{\lockset;}</blockquote>
The disjunct @t{\lockset[e]} in the test for potential deadlocks reflects
the fact that Java locks are ``reentrant'',  that is, that a thread
that already holds a lock may acquire the lock again without deadlocking
[@emph{JLS}, 17.5].

When checking a @t{synchronized} method declaration, ESC/Java acts
as if the body of the method were wrapped in @t{synchronized} statement,
as described in [@emph{JLS}, 8.4.3.5].  That is, ESC/Java checks an
instance method
<blockquote>@t{synchronized T m(@emph{parameters}) {@emph{body}}}</blockquote>
as if it had been written
<blockquote>@t{T m(@emph{parameters}) {synchronized (this) {@emph{body}}}}</blockquote>
and ESC/Java checks a @t{static} method
<blockquote>@t{static synchronized T m(@emph{parameters}) {@emph{body}}}</blockquote>
in a class @t{C} as if it had been written
<blockquote>@t{static T m(@emph{parameters}) {synchronized (C.class) {@emph{body}}}}</blockquote>
When a routine that already holds a lock acquires another one, ESC/Java
needs some way of knowing that the first lock precedes the second in the
lock order.  One way to give ESC the needed information is by supplying
an @t{axiom} pragma (see <a href="#2.4.2  axiom pragma">section 2.4.2</a>)
about the lock order, as in the following example:
<blockquote>@t{public class Tree @{}

@t{  public /*@ monitored */ Tree left, right;}

@t{  public /*@ monitored non_null */ Thing contents;}

@t{  //@ axiom (\forall Tree t; t.left != null ==> t < t.left);}

@t{  //@ axiom (\forall Tree t; t.right != null ==> t < t.right);}

@t{  Tree(/*@ non_null */ Thing c) @{}

@t{    contents = c;}

@t{  @}}

@t{  //@ requires \max(\lockset) <= this;}

@t{  public synchronized void visit() @{}

@t{     contents.mungle();}

@t{     if (left != null) left.visit();}

@t{     if (right != null) right.visit();}

@t{  @}}

@t{@}}</blockquote>
@b{Fine points}

Note that the axioms above are inconsistent if a (so-called) @t{Tree}
can in fact be cyclic.  Note also that inconsistency or incompleteness
can arise from the possible mutation of variables mentioned in the axioms,
namely the fields @t{left} and
@t{right}.  For example,
given the axioms above, ESC/Java will generate a spurious
@t{Deadlock}
warning for the following method:
<blockquote>@t{  //@ requires \max(\lockset) <= this;}

@t{  public synchronized void wiggleWoggle() @{}

@t{    // Perform a rotation on this.right (but give
up and just}

@t{    // return if this.right or this.right.left is
null):}

@t{    //}

@t{    //   this             
this}

@t{    //   /  \             
/  \}

@t{    // ...   x          
...   v}

@t{    //      / \   
-->        / \}

@t{    //     v   y            
u   x}

@t{    //    / \                  
/ \}

@t{    //   u   w                
w   y}

@t{    //}

@t{    @{ Tree x = this.right;}

@t{      if (x == null) return;}

@t{      synchronized (x) @{}

@t{        Tree v = x.left;}

@t{        if (v == null) return;}

@t{        synchronized (v) @{}

@t{          x.left =
v.right;}

@t{          v.right
= x;}

@t{          this.right
= v;}

@t{        @}                      
// line (a)}

@t{      @}}

@t{    @}}

@t{    // Undo the rotation:}

@t{    @{ Tree v = this.right;}

@t{      synchronized (v) @{           
// line (b)}

@t{        Tree x = v.right;}

@t{        if (x != null) @{           
// line (c)}

@t{          synchronized
(x) @{        // line (d)}

@t{           
v.right = x.left;}

@t{           
x.left = v;}

@t{           
this.right = x;}

@t{          @}}

@t{        @}                          
// line (e)}

@t{      @}}

@t{    @}}

@t{  @}}</blockquote>
The problem is that the axiom is assumed to apply at the start of the routine,
and thus to apply to the values of @t{.left} and @t{.right} at
the start of the routine.  According to the lock order thus defined,
the lock acquired at the line @t{(d)} would precede that acquired
at @t{(b)}.  [Despite these caveats, our experience with ESC
for Modula 3 suggests that axioms like the ones above will do the right
thing surprisingly often and rarely cause problems.]

The preceding example also illustrates a possible source of unsoundness
in ESC/Java's treatment of race detection.  If the lines marked @t{(c)}
and @t{(e)} are deleted, and if deadlock checking is left disabled,
then ESC/Java will accept line @t{(d)} without complaint, ignoring
the possibility that some other thread might have taken advantage of the
window between lines @t{(a)} and @t{(b)} to synchronize on ``@t{v}''
and set its @t{.right} field to @t{null}.

@c =============================================================================
@node Specification Expressions, Warnings, ESC/Java2 Pragmas, Top
@section Specification Expressions

While specification expressions are generally similar to Java expressions,
there are a number of differences, described below.  <a href="#3.0  Specification types">Section
3.0</a> describes a slight extension to the Java type system.  <a href="#3.1  Restrictions">Section
3.1</a> describes notations allowed in Java expressions but forbidden in
specification expressions.  <a href="#3.2  Additions">Section 3.2</a>
describes additional notations allowed only in specification expressions.
<a href="#3.3  Scoping, name resolution, and access control in specificat">Section
3.3</a> describes how the rules for scoping, name resolution and access
control in specification expressions differ from those in Java.

Specification expressions are never actually evaluated when a Java program
is run, and ESC/Java will not produce specific warnings about specification
expressions whose evaluation (if they were evaluated) might dereference
@t{null},
access arrays out of bounds, etc.  Rather, the meanings of such expressions
(for example, @t{@emph{E}.f} where @emph{@t{E}} , if it were
actually evaluated, would evaluate to @t{null}) are unspecified functions
of (the meanings of) their subexpressions.  In most cases, attempts
to prove things about such unspecified values will fail, thus giving rise
to warnings of some sort, though alas not the clearest warnings that one
could hope for.  For example, given the program fragment
<blockquote>@t{//@ assume \nonnullelements(a);}

@t{//@ assert a[j] != null;}</blockquote>
in a place where @t{j} might be negative, ESC/Java will produce an
@t{Assert}
warning (<a href="#4.2  Assert warning">section 4.2</a>) rather than an
@t{IndexNegative}
warning (<a href="#4.6  IndexNegative warning">section 4.6</a>).

@menu
* Specification types::         
* Restrictions::                
* Additions::                   
* Scoping::                     
@end menu

@node Specification types, Restrictions, Specification Expressions, Specification Expressions
@subsection Specification types

Like Java expressions, specification expressions have types (which we call
@emph{specification
types}).  A specification type is either a Java type, or one of
the special types @t{\TYPE} or @t{\LockSet} (or an array of special
types, for example @t{\TYPE[][]}). (In the current ESC/Java, the programmer
cannot mention @t{\LockSet} explicitly.)

@node Restrictions, Additions, Specification types, Specification Expressions
@subsection Restrictions

Specification expressions must be free of subexpressions that, in general,
may have side effects.  In particular, specification expressions may
not contain any:
@itemize
@item
assignment (@t{=}, @t{+=}, etc.),

@item
pre-increment, pre-decrement, post-increment, post-decrement (@t{++}
or @t{--}),

@item
array or object creation (@t{new}), or

@item
method invocation.
@end itemize
Method invocations are forbidden in specification expressions even when
the method is known to have no side effects.

The next section describes additional constructs that are allowed in
specification expressions beyond those allowed in Java expressions. 
Some of these constructs have restrictions on their use.  We describe
these restrictions together with the descriptions of the constructs to
which they apply.

@node Additions, Scoping, Restrictions, Specification Expressions
@subsection Additions

@menu
* type::                        
* typeof::                      
* elemtype::                    
* subtype::                     
* Examples involving types and subtyping::  
* lockset::                     
* Membership in lock sets::     
* Lock order::                  
* max::                         
* Implication::                 
* forall::                      
* exists::                      
* nonnullelements::             
* fresh::                       
* result::                      
* old::                         
* lblneg and lblpos::           
* owner::                       
@end menu

@node type, typeof, Additions, Additions
@subsubsection @t{\type}

An expression of the form @t{\type(@emph{T})} where @emph{@t{T}}
is a specification type (see <a href="#3.0  Specification types">section
3.0</a>), is a specification expression of type @t{\TYPE}.  It
denotes the type @emph{@t{T}}.

@node typeof, elemtype, type, Additions
@subsubsection @t{\typeof}

A specification expression of the form @t{\typeof(@emph{E})} where
@emph{@t{E}}
is a specification expression whose type is  a reference type is a
specification expression of type @t{\TYPE}.  It denotes the dynamic
type of the value of @emph{@t{E}}.  The value of
@t{\typeof(@emph{E})}
is unspecified when @emph{@t{E}} evaluates to @t{null}.

@node elemtype, subtype, typeof, Additions
@subsubsection @t{\elemtype}

An expression of the form @t{\elemtype(@emph{E})} where @emph{@t{E}}
is a specification expression of type @t{\TYPE} is a specification
expression of type @t{\TYPE}.  If @emph{@t{E}} denotes an
array type @t{@emph{T}[]}, then @t{\elemtype(@emph{E})} denotes
@emph{@t{T}}. 
Otherwise the value of @t{\elemtype(@emph{E})} is unspecified.

@node subtype, Examples involving types and subtyping, elemtype, Additions
@subsubsection Subtype: @t{<:}

An expression of the form @t{@emph{S} <: @emph{T}} where @emph{@t{S}}
and @emph{@t{T}} are specification expressions of type @t{\TYPE}
is a specification expression of type @t{boolean}.  It denotes
that @emph{@t{S}} is a subtype of @emph{@t{T}} (including the
case where @emph{@t{S}} is equal to @emph{@t{T}}).  The
operator @t{<:} has the same binding power as the relational operators
@t{<},
@t{>},
@t{<=},
and
@t{>=}.

@node Examples involving types and subtyping, lockset, subtype, Additions
@subsubsection Examples involving @t{\TYPE}, @t{\type}, @t{\typeof}, @t{\elemtype}, and @t{<:}

Suppose file @t{T.java} contains the following declaration
<blockquote>@t{class T @{}

@t{  //@ requires a != null && 0 <= i & i <
a.length;}

@t{  static void storeObject(T[] a, int i, T x) @{}

@t{    a[i] = x;}

@t{  @}}

@t{  }...</blockquote>
When checking the body of the @t{storeObject }method, ESC/Java will
produce an @t{ArrayStore} warning (<a href="#4.1  ArrayStore warning">section
4.1</a>) for the assignment
<blockquote>@t{    a[i] = x;}</blockquote>
The problem is that, so far as ESC/Java can tell, the actual type of @t{a}
at the time of the call might be @t{S[]}, where @t{S} is some
proper subtype of @t{T}, and @t{x} might not be of type @t{S}. 
Consequently, the attempt to store @t{x} into @t{a[i]} might
give rise to an @t{ArrayStoreException} [@emph{JLS}, 10.10, 15.25.1],
which ESC/Java treats as an error.

The @t{ArrayStoreException} cannot arise in the method if the parameter
@t{a}
always has actual type exactly @t{T[]}.  The programmer can express
this intention with the pragma
<blockquote>@t{  //@ requires \elemtype(\typeof(a)) == \type(T);}</blockquote>
or, equivalently, with the pragma
<blockquote>@t{  //@ requires \typeof(a) == \type(T[]);}</blockquote>
Note that
<blockquote>@t{  //@ requires \typeof(a) == \type(T)[];}</blockquote>
would not be legal, since the form @t{@emph{N}[]} makes sense only
when @emph{@t{N}} is a specification type, not a specification expression
of type @t{\TYPE}.

A weaker, but still sufficient, precondition for avoiding the @t{ArrayStoreException}
would be to require that the array @t{a} merely have an actual element
type adequate to hold the value of @t{x}.  This precondition
is expressed by the pragmas
<blockquote>@t{  //@ requires x == null || \typeof(x) <: \elemtype(\typeof(a));}</blockquote>
Note that the pragma
<blockquote>@t{  //@ requires x == null || x instanceof \elemtype(\typeof(a));}</blockquote>
is not legal, since the right hand argument of @t{instanceof} must
be a type, not a specification expression of type @t{\TYPE}.

@node lockset, Membership in lock sets, Examples involving types and subtyping, Additions
@subsubsection @t{\lockset}

The special identifier @t{\lockset} is a specification expression
of type
@t{\LockSet}.  It denotes the set of locks held by the
current thread.

@node Membership in lock sets, Lock order, lockset, Additions
@subsubsection Membership in lock sets: @t{[ ]}

An expression of the form @t{@emph{S}[@emph{L}]} where @emph{@t{S}}
is a specification expression of type @t{\LockSet} and @emph{@t{L}}
is a specification expression of a reference type is a specification expression
of type @t{boolean}.  It denotes that @emph{@t{L}} is a
member of @emph{@t{S}}.

@node Lock order, max, Membership in lock sets, Additions
@subsubsection Lock order: @t{<} and @t{<=}

Within specification expressions, the relations @t{<} and <@t{=}
are extended to apply to locks as well as numbers.  The order they
refer to is called the lock order.  For some examples of use of the
lock order, see <a href="#2.7.2  Examples illustrating race and deadlock checking">section
2.7.2</a>.

@node max, Implication, Lock order, Additions
@subsubsection @t{\max}

An expression of the form @t{\max(@emph{S})} where @emph{@t{S}}
is a specification expression of type @t{\LockSet} is a specification
expression of type @t{Object}.  It denotes the maximum element
of @emph{@t{S}} in the lock order.

To insure that @t{\max} is always well defined, ESC/Java assumes
that lock sets are always nonempty and that their elements are always totally
ordered by the lock order @t{<}.  Since locks must be acquired
in increasing order, and since there is no way to write a program that
releases the fictitious maximum element of the lock set of a thread that
really holds no locks, the preceding assumptions are invariantly true if
they are true initially.

@node Implication, forall, max, Additions
@subsubsection Implication: @t{==>}

An expression of the form @t{@emph{E} ==> @emph{F}} where @emph{@t{E}}
and @emph{@t{F}} are specification expressions of type @t{boolean}
is a specification expression of type @t{boolean}.  It denotes
the condition that @emph{@t{E}} implies @emph{@t{F}}, that is,
@t{(!(@emph{E}))
| @emph{F}}.  The operator @t{==>} has less binding power
than @t{&&} and @t{||}, but binds more strongly than
the ternary conditional operator @t{? :t}.  (The binding precedence
of operators in Java is implicit in the grammar for expressions [@emph{JLS},
19.12].)

@node forall, exists, Implication, Additions
@subsubsection @t{\forall}

An expression of the form @t{(\forall @emph{T} @emph{V}; @emph{E})}
where @emph{@t{T}} is a specification type (see <a href="#3.0  Specification types">section
3.0</a>), @emph{@t{V}} is a nonempty comma-separated list of identifiers
(called @emph{bound variables}), and @emph{@t{E}} is a specification
expression of type @t{boolean} is a specification expression of type
@t{boolean}. 
It denotes that @emph{@t{E}} is true for all substitutions of values
of type @emph{@t{T}} for the bound variables.  If @emph{@t{T}}
is a reference type, the quantification ranges only over allocated objects
that are instances of @emph{@t{T}}.  Note that this excludes
@t{null}. 
If @emph{@t{T}} is either of the types @t{int} or @t{long},
then  the quantification ranges over all mathematical integers, regardless
of whether they are in the ranges of possible values for Java variable
of those types.

@b{Fine points}

Just as Java forbids declaration of an identifier as a local variable
within the scope of a parameter or local variable of the same name [@emph{JLS},
14.3.2], so ESC/Java forbids declaration of an identifier as a bound variable
within the scope of a parameter, local variable, or bound variable of the
same name.  ESC/Java also forbids declaration of @t{\lockset}
or @t{\result} as a bound variable.  The same restriction applies
to variables bound by @t{\exists} (<a href="#3.2.11  \exists">section
3.2.11</a>).

If a specification expression @emph{@t{E} }has an application of
@t{\forall}
as a (not necessarily proper) subexpression, then @emph{@t{E}} may
occur only in one of the following contexts:
@itemize
@item
as an (entire) argument to one of the following operators:

@itemize
@item
the ESC/Java implication operator @t{==>} (see <a href="#3.2.9  Implication:  ==>">section
3.2.9</a>)

@item
the Java conditional operators @t{&&} and @t{|| }[@emph{JLS},
15.22, 15.23]

@item
the Java logical operators @t{&}, @t{^}, and @t{|} [@emph{JLS},
15.21.2]

@item
the Java boolean equality operators @t{==} and @t{!=} [@emph{JLS},
15.20.2]

@item
the Java logical complement operator @t{!} [@emph{JLS}, 15.14.6]
@end itemize

@item
as the (entire) body of

@itemize
@item
a parenthesized expression @t{(@emph{E})},

@item
a quantified expression @t{(\forall }...@t{; @emph{E})} or @t{(\exists
}...@t{;@emph{E})}
(see section <a href="#3.2.11  \exists">3.2.11</a>), or

@item
a labeled expression @t{(\lblpos n @emph{E})} or @t{(\lblneg n @emph{E})}
(see <a href="#3.2.16  \lblneg and \lblpos">section 3.2.16</a>)
@end itemize

@item
as a top-level boolean specification expression (that is, not properly
contained by another specification expression) in a pragma.
@end itemize
The same restriction applies to specification expressions containing applications
of @t{\exists} (<a href="#3.2.11  \exists">section 3.2.11</a>) or
of
@t{\lblneg} or @t{\lblpos} (<a href="#3.2.16  \lblneg and \lblpos">section
3.2.16</a>).  In particular, a quantified or labeled expression may
not occur in an argument to the ternary conditional operator @t{? :}
and this restriction cannot be evaded by use of the @t{(boolean)}
cast operator.  For example, specification expressions of the form
<blockquote>@t{((boolean)(\exists} ...@t{)) ? }...@t{ : }...</blockquote>
are not allowed.  A consequence of these restrictions is that all
legal specification expressions containing quantified or labeled subexpressions
are of type @t{boolean}.

Note that the preceding rule forbids quantified expressions (and labeled
expressions) within arguments to @t{\old}.  [Future versions
of ESC/Java may liberalize this restriction, with quantifications on reference
types inside @t{\old} ranging over objects allocated in the pre-state.]

@node exists, nonnullelements, forall, Additions
@subsubsection @t{\exists}

An expression of the form @t{(\exists @emph{T} @emph{V}; @emph{E})}
where @emph{@t{T}} is a specification type (see <a href="#3.0  Specification types">section
3.0</a>), @emph{@t{V}} is a nonempty comma-separated list of identifiers
(called @emph{bound variables}), and @emph{@t{E}} is a specification
expression of type @t{boolean} is a specification expression of type
@t{boolean}. 
It denotes that @emph{@t{E}} is true for some substitution of values
of type @emph{@t{T}} for the bound variables.  If @emph{@t{T}}
is a reference type, the quantification ranges only over allocated objects
that are instances of @emph{@t{T}}.

@b{Fine points}

See <a href="#3.2.10  \forall">section 3.2.10</a> for restrictions on
bound variable names and restrictions on places where quantified formulas
may appear.

@node nonnullelements, fresh, exists, Additions
@subsubsection @t{\nonnullelements}

An expression of the form @t{\nonnullelements(@emph{A})} where @emph{@t{A}}
is a specification expression of an array type is a specification expression
of type @t{boolean}.  It is equivalent to
<blockquote>@t{@emph{A} != null && (\forall int i; 0 <= i &
i < A.length ==> @emph{A}[i] != null)}</blockquote>
Expressions of the form above came up fairly frequently in our early experiments
with ESC/Java, and we found writing them sufficiently tedious to justify
the introduction of a special notation.

@b{Example}

Consider the @t{main} method of a program:
<blockquote>@t{static public void main (String[] args) @{}...@t{@}}</blockquote>
The usual way for @t{main} to be invoked is with the value of @t{args
}derived
from the command line by the Java interpreter, in which case
@t{args}
will be non-null, and all its elements will be non-null.  However,
it is legal for a Java program to contain explicit calls to @t{main},
and the value of @t{args} supplied by such a call might in some cases
be either @t{null} or an array containing
@t{null} as an element.

It is often helpful to annotate @t{main} as follows:
<blockquote>@t{//@ requires \nonnullelements(args);}

@t{static public void main (String[] args) @{}...@t{@}}</blockquote>
Given this annotation, (1) ESC/Java will assume, when checking the body
of @t{main}, that @t{args} and all its elements are non-null,
and (2)  ESC/Java will check that any explicit calls to @t{main}
supply a non-null argument with only non-null elements.

@b{Fine points}

Since an application of  @t{\nonnullelements}  does not
explicitly include a quantifier, it may be used as an argument to @t{?
:}  and may occur inside an argument of @t{\old}.

Note that if @emph{@t{A}} is of type @t{@emph{T}[][]}, then
@t{\nonnullelements(@emph{A})}
implies that @t{@emph{A}[@emph{i}]} is non-null (if @emph{@t{i}}
is in bounds), but not necessarily that any @t{@emph{A}[@emph{i}][@emph{j}]}
is non-null.

@node fresh, result, nonnullelements, Additions
@subsubsection @t{\fresh}

An expression of the form @t{\fresh(@emph{E})} where @emph{@t{E}}
is a specification expression of a reference type is a specification expression
of type @t{boolean}.  In a postcondition, it denotes that @emph{@t{E}}
is non-null and was not allocated in the pre-state of the routine call.

(See also <a href="#2.3.2  ensures pragma">section 2.3.2.</a>)

@node result, old, fresh, Additions
@subsubsection @t{\result}

Within a normal postcondition or a modification target of a non-@t{void}
method, the special identifier @t{\result} is a specification expression
whose type is the return type of the method.  It denotes the value
returned by the method.  @t{\result} is allowed only within an
@t{ensures},
@t{also_ensures},
@t{modifies},
or @t{also_modifies} pragma that modifies the declaration of a non-@t{void}
method.

@b{Fine points}

Note that although @t{\result} may occur within a modifies pragma,
it is not itself a specification designator (see <a href="#2.3.1  modifies pragma">section
2.3.1</a>).  Thus
<blockquote>@t{modifies \result}</blockquote>
is never a legal pragma.  However pragmas such as, for example,
<blockquote>@t{modifies \result.f}</blockquote>
or
<blockquote>@t{modifies \result[i]}</blockquote>
may be legal, depending on the type of @t{\result}.

@node old, lblneg and lblpos, result, Additions
@subsubsection @t{\old}

In a postcondition, an expression of the form @t{\old(@emph{E})} where
@emph{@t{E}}
is a specification expression is a specification expression of the same
type as @emph{@t{E}}.  It denotes the same thing as @emph{@t{E}}
except that (1) any occurrences in @emph{@t{X}} of a target field
(see <a href="#2.3.1.0  target fields">section 2.3.1.0</a>) of the routine
is interpreted according to the pre-state value of the field, and (2) if
any modification target of the routine has the form @t{@emph{X}[@emph{i}]}
or @t{@emph{X}[*]}, then @emph{all} array accesses within @emph{@t{E}}
are interpreted according to the pre-state contents of arrays.  An
expression of the form @t{\old(@emph{E})} may occur only in an @t{ensures},
@t{exsures},
@t{also_ensures},
or @t{also_exsures} pragma.  The argument
@emph{@t{E}} may
not itself include any uses of @t{\old} or @t{\fresh}.

@b{Fine points}

In a normal postcondition of a non-@t{void} method, the special
identifier @t{\result} (<a href="#3.2.14  \result">section 3.2.14</a>)
may occur within an argument to @t{\old}. In this context, @t{\result}
denotes, as usual, the value returned by the method, despite the fact that
the returned value may not even be allocated in the pre-state (in which
case the meaning of a field access @t{\result.@emph{f}} or an array
access @t{\result[@emph{i}]} is unspecified).  Similarly any
occurrence of @t{this} (explicit or implicit) in a normal postcondition
of a constructor denotes the constructed object, even within an argument
of @t{\old}.

The following (correctly annotated) code example illustrates the semantics
of @t{\old}.
<blockquote>@t{class C @{}

@t{  static C x, oldx, y;}

@t{  int f;}

@t{  static int oldxf;}

@t{  static int[] a, olda, b;}

@t{  static int oldai;}

@t{  static int i;}

@t{  //@ requires x != null & y != null;}

@t{  //@ requires a != null && 0 <= i & i <
a.length;}

@t{  //@ modifies oldx, oldxf, x, x.f, olda, oldai, a, a[i],
i;}

@t{  //@ ensures oldx == \old(x)}

@t{  //@ ensures oldxf == \old(x.f);}

@t{  //@ ensures \old(x).f == \old(x.f) + 1;}

@t{  //@ ensures (\exists C z; z == x & \old(z.f) == \old(y.f));}

@t{  //@ ensures olda == \old(a) & oldai == \old(a[i]);}

@t{  //@ ensures \old(a)[\old(i)] == \old(a[i]) + 1;}

@t{  static void m() @{}

@t{    oldx = x;}

@t{    oldxf = x.f;}

@t{    x = y;}

@t{    oldx.f++;}

@t{    olda = a;}

@t{    oldai = a[i];}

@t{    a = b;}

@t{    olda[i]++;}

@t{    i++;}

@t{  @}}

@t{@}}</blockquote>
Note the distinctions between @t{\old(x.f)} and @t{\old(x).f}
and between @t{\old(a)[\old(i)]} and @t{\old(a[i])}.  Note
also that while ESC/Java does not allow the notation @t{x.\old(f)}
to mean ``the original @t{f} field of the current value of @t{x}''
in the pragma, the same effect is achieved by the expression @t{\old(z.f)}
within the pragma
<blockquote>@t{//@ ensures (\exists C z; z == x & \old(z.f) == \old(y.f))}</blockquote>
For further discussion of @t{\old}, including the interaction of @t{\old}
and @t{modifies}, see sections <a href="#2.3.2  ensures pragma">2.3.2</a>
and <a href="#2.3.3  A note on the interaction of modifies and \old">2.3.3</a>.

@node lblneg and lblpos, owner, old, Additions
@subsubsection @t{\lblneg} and @t{\lblpos}

[@emph{This section may be skipped on first (and second) reading.  It
describes, incompletely, a feature of included mainly for use by the implementers.}]

An expression of the form @t{(\lblneg @emph{n} @emph{E})} or @t{(\lblpos
@emph{n
E})} where @emph{@t{E}} is a specification expression of type
@t{boolean}
and @emph{@t{n}} is an identifier (called an expression label) is
a specification expression of type @t{boolean}.  Logically, the
@emph{labeled
expression} @t{(\lblneg @emph{n} @emph{E})} [or@t{(\lblpos
@emph{n
E})}] denotes the same thing as
@emph{@t{E}}, but when ESC/Java
issues a warning, the warning message will mention the label
@emph{@t{n}}
if, in the execution path associated with the warning, the expression
@emph{@t{E}}
would evaluate to @t{false} [resp., @t{true}] at a point where
the containing pragma is ``relevant'' and in circumstances where the value
of the expression @emph{@t{E}} is ``relevant'' to the pragma as a
whole.  The details of the (heuristic) definition of ``relevant''
are beyond the scope of this manual and are subject to change.

@b{Example}

Suppose file @t{C.java} contains the following code:
<blockquote>@t{class C @{}

@t{  //@ requires (\lblpos fee i < 5) || (\lblpos fie i > 10);}

@t{  //@ ensures (\lblneg foe \result != 5) && (\lblneg
fum \result > 0);}

@t{  int m(int i) @{}

@t{      return i+1;}

@t{  @}}

@t{@}}</blockquote>
Then output from the command @t{escjava C.java} includes the following
warning:
<blockquote>@t{C.java:7: Warning: Postcondition possibly not established
(Post)}

@t{  @}}

@t{  ^}

@t{Associated declaration is "C.java", line 4, col 6:}

@t{  //@ ensures (\lblneg foe \result != 5) && (\lblneg
fum \result > 0 ...}

@t{      ^}

@t{Execution trace information:}

@t{    Executed return in "C.java", line 6, col 6.}

@t{Counterexample labels:}

@t{    fum    fee}</blockquote>
The label @t{fee} comes from the positively labeled expression @t{(\lblpos
fee i < 5)} in the @t{requires} pragma for method @t{m},
and tells us that in the execution path associated with the warning,
@t{m}
is called with an argument @t{i} such that @t{(i < 5) == true}. 
The label @t{fum} comes from the negatively labeled expression @t{(\lblneg
fum \result > 0)} in the @t{ensures} pragma for @t{m}, and
tells us that in the execution path associated with the warning, @t{m}
returns a result @t{\result} such that
@t{(\result > 0) == false}.

@b{Fine points}

Expression labels are in their own name space, so they never conflict
with or hide any other kinds of identifiers.

Labeled expressions are allowed only in those places where quantified
expressions are allowed (see <a href="#3.2.10  \forall">section 3.2.10</a>).

@b{Limitation:}  There are many situations in which labels are
ambiguous.  For example, suppose file @t{D.java} contains the
code:
<blockquote>@t{class D @{}

@t{  int a, b;}

@t{  //@ invariant (\lblpos foo a >= 0 & b >= 0) || (\lblpos
bar a < 0 & b <0);}

@t{  //@ requires x != null && y != null;}

@t{  D(D x, D y) @{}

@t{    a = x.a;}

@t{    b = y.b;}

@t{  @}}

@t{@}}</blockquote>
Then the command @t{escjava D.java} yields the warning:
<blockquote>@t{D.java:10: Warning: Possible violation of object invariant
(Invariant)}

@t{  @}}

@t{  ^}

...

@t{Counterexample labels:}

@t{    bar    foo}</blockquote>
There is no way to tell from this message whether ESC/Java is warning about
the case where
@t{a} has nonnegative @t{x} and @t{y} fields
and @t{b} has negative
@t{x} and @t{y} fields, or about
the case where
@t{a}'s fields are negative and @t{b}'s are nonnegative. 
(However, for this particular example,  the @t{-counterexample}
switch, described in <a href="#Appendix A:  Overview of how ESC/Java works">appendix
A</a>, would resolve the ambiguity.)

@node owner,  , lblneg and lblpos, Additions
@subsubsection @t{owner}

The standard @t{.spec} file (see <a href="#5.1.2  Specification (.spec) files">section
5.1.2</a>) for the class @t{java.lang.Object} gives every object @t{O}
a ghost field @t{O.owner} of type @t{Object}:
<blockquote>@b{ESC/Java input from file .../java/lang/Object.spec:}

...

@t{//@ ghost Object owner;}

...</blockquote>
The intended use of this field is for situations is which the programmer
wishes to specify that some field @t{f} is @emph{unshared}. 
For example. if a class @t{T} with an instance field @t{f} declares
the instance invariant
<blockquote>@b{ESC/Java input from file .../T.java:}

...

@t{//@ invariant f.owner == this}

...</blockquote>
then it follows that, at any point where the invariant holds, we cannot
have @t{x.f == y.f} for two distinct objects @t{x} and @t{y}
of type @t{T} (since the conditions @t{x.f.owner == x}, @t{y.f.owner
== y}, together with @t{x.f == y.f} would imply @t{x == y}).

@b{Example}

Here is an example of a situation in which it is useful to specify that
a field is unshared.   [@b{Note:}  Understanding this
example may require more than a cursory reading.  While we usually
relegate such material to sections marked ``@b{Fine points}'', the scenario
described here is of a sort that most ESC/Java users are likely to encounter
as soon as they try to check code with invariants of any complexity, specifically
invariants involving both (1) quantification (including the quantification
implicit in all instance invariants) and (2) indirect references like @t{x.f.g}
or @t{x.a[i]} (including cases where an expression like @t{f.g}
or @t{a[i]} implicitly means @t{this.f.g} or @t{this.a[i]}). 
A few minutes working through the details with pen or pencil in hand will
lead to clear understanding, and the time will be well spent.]

Consider the following class, whose instances represent stacks of objects
(to keep the example simple, we put a fixed limit of 10 on the size of
a stack):
<blockquote>@b{Input from file ObjStack.java:}

@t{  1:  class ObjStack @{}

@t{  2:    /*@ non_null */
Object [] a;}

@t{  3:    //@ invariant
a.length == 10;}

@t{  4:    //@ invariant
\elemtype(\typeof(a)) == \type(Object);}

@t{  5:    int n;  //@
invariant 0 <= n & n <= 10;}

@t{  6:    //@ invariant
(\forall int i; n <= i & i < 10 ==> a[i] == null);}

@t{  7:}

@t{  8:    ObjStack() @{}

@t{  9:      n
= 0;}

@t{ 10:      a
= new Object[10];}

@t{ 11:    @}}

@t{ 12:}

@t{ 13:    //@ requires n
< 10;}

@t{ 14:    void Push(Object
o) @{}

@t{ 15:      a[n++]
= o;}

@t{ 16:    @}}

@t{ 17:}

@t{ 18:    //@ requires n
> 0;}

@t{ 19:    Object Pop() @{}

@t{ 20:      Object
o = a[--n];}

@t{ 21:      a[n]
= null;}

@t{ 22:      return
o;}

@t{ 23:    @}}

@t{ 24:}

@t{ 25:  @}}</blockquote>
The elements of a stack @t{x} are the first @t{x.n} elements
of the array @t{x.a}.  To avoid retaining pointers to garbage,
we insure that the  remaining elements of @t{x.a} are @t{null},
as specified by the @t{invariant} pragma on line 6.

If we run ESC/Java on the source above, it produces the following complaint:
<blockquote>@t{ObjStack: Push(java.lang.Object) ...}

@t{ObjStack.java:16: Warning: Possible violation of object invariant
(Invariant)}

@t{  @}}

@t{  ^}

@t{Associated declaration is "ObjStack.java", line 6, col 6:}

@t{  //@ invariant (\forall int i; n <= i & i < 10
==> a[i] == null)}

@t{      ^}

@t{Possibly relevant items from the counterexample context:}

@t{  }...

@t{  brokenObj<2> != this}

@t{  }...

@t{(brokenObj* refers to the object for which the invariant is broken.)}</blockquote>
(For a basic explanation of counterexample contexts, see <a href="#Appendix A:  Overview of how ESC/Java works">appendix
A</a>.)  What is going on here is that ESC/Java has found a scenario
in which the
@t{Push} method fails to maintain the instance invariant
on line 6.  The line
<blockquote>@t{brokenObj<1> != this}</blockquote>
tells us that the object for which the invariant is broken is not the object
(@t{this}) whose @t{Push} method is called.  The problem
is that, so far as ESC/Java can tell, there may be some object, call it
@t{brokenObj},
such that the following conditions hold at the start of the execution of
@t{Push}:
@itemize
@item
@t{brokenObj != this}

@item
@t{brokenObj.a == this.a}

@item
@t{brokenObj.n == this.n}
@end itemize
Now consider the effect of the line
<blockquote>@t{15:     
a[n++] = o;}</blockquote>
The evaluation of @t{n++} increases @t{this.n}, but leaves @t{brokenObj.n}
unchanged.  On the other hand, the array store does set @t{brokenObj.a[n]}
(where @t{n} denotes the value before the increment) to @t{o}. 
Thus, after line 16, we have
@itemize
@item
@t{brokenObj.a[brokenObj.n] == o}
@end itemize
so that if @t{o != null} (as may very well be the case),  the
instance invariant on line 6 is violated for @t{brokenObj}.

In fact,  as illustrated by the example above, the correctness
of the @t{Push} method of @t{ObjStack} depends on an implicit
design decision:  No two distinct @t{ObjStack}'s ever share the
same
@t{a} field.  (The correctness of @t{Pop} also depends
on this design decision, though not in a way that is checked by ESC/Java
given the annotations in the example above.)  The user can take advantage
of the @t{owner} field to communicate this design decision to ESC/Java
by adding the pragma:
<blockquote>@t{7:    //@ invariant
a.owner == this}</blockquote>
(Given this invariant, it is no longer possible to have a scenario in which
the conditions
@itemize
@item
@t{brokenObj != this}

@item
@t{brokenObj.a == this.a}
@end itemize
both hold.)  Having added this invariant, the user must also supply
a @t{set} pragma in order to guarantee that the constructor for @t{ObjStack}
establishes the invariant:
<blockquote>@t{ 9:    ObjStack()
@{}

@t{10:      n = 0;}

@t{11:      a = new
Object[10];}

@t{12:      //@ set
a.owner = this;}

@t{13:    @}}</blockquote>
Without the @t{set} pragma, ESC/Java will generate a warning that
the constructor fails to establish the invariant @t{a.owner == this}.

@b{Fine points}

Just as all constructors have the implicit postcondition @t{\fresh(\result)}
(see section 2.3.2), all constructors (including the implicit constructors
for arrays) have the implicit postcondition @t{this.owner == null}. 
In the example above, this implicit postcondition guarantees that @t{this.a.owner
== null} after line 11.  If @t{this.a.owner} could have had
some non-null value (call it @t{brokenObj}) after line 11, then the
@t{set}
pragma might cause the invariant on line 7 to be violated for @t{brokenObj}.

Another way to guarantee that no two @t{ObjStack}'s share the same
@t{a}
field would be to include in the declaration of @t{ObjStack} the static
invariant
<blockquote>@t{(\forall ObjStack x, y; x != y ==> x.a != y.a)}</blockquote>
The instance invariant @t{a.owner == this} is not only more succinct
than the static invariant above, but also stronger.  To see why, suppose
we had another class @t{Foo} which declared a field @t{b} and
the instance invariant @t{b.owner == this}.  Then the invariants
@t{a.owner
== this} (for @t{ObjStack}) and @t{b.owner == this} (for
@t{Foo})
together would imply not only
<blockquote>@t{(\forall ObjStack x, y; x != y ==> x.a != y.a)}</blockquote>
and
<blockquote>@t{(\forall Foo x, y; x != y ==> x.a != y.b)}</blockquote>
but also
<blockquote>@t{(\forall ObjStack x; (\forall Foo y: (Object)x != y ==>
x.a != y.b))}</blockquote>
If, for example, ESC/Java were checking code that modified a component
of the @t{b} field of some @t{Foo foo}, and if that code occurred
in a scope where the invariant on line 6 of @t{ObjStack.java} were
considered heuristically relevant (see the fine points in <a href="#2.4.1  invariant pragma">section
2.4.1</a>), then ESC/Java would need this last consequence in order to
eliminate from consideration scenarios in which the invariant on line 6
might become violated for some @t{ObjStack brokenObj} with @t{brokenObj.a
== foo.b}.

@xref{[LS99], LS99}, for a different approach to specifying that certain
fields are unshared.

@node Scoping,  , Additions, Specification Expressions
@subsection Scoping, name resolution, and access control in specificat

The rules for scoping, accessibility, and resolution of names in specification
expressions differ in several ways from those for Java expressions. 
We have described most of these differences elsewhere in this manual, but
repeat them here to have them collected in one place.

Applications of the ESC/Java operators @t{\typeof}, @t{\elemtype},
@t{\max},
@t{\nonnullelements},@t{\fresh},
and @t{\old} are parsed like method invocations, with the operator
taking the role of the method name.  Of course, applications of these
operators are allowed in specification expressions even though ordinary
method invocations are forbidden, as stated in <a href="#3.1  Restrictions">section
3.1</a>.

Bound variables introduced by @t{\forall} and @t{\exists}
are scoped like Java local variables, as are the variables declared to
name exceptions in @t{exsures} and @t{also_exsures} pragmas. 
For example, in a quantified expression @t{(\forall int k; a[k] == 0)},
the declaration @t{int k;} introduces the bound variable @t{k},
whose scope is the @emph{SpecExpr}@t{ a[k] == 0}.  Furthermore,
just as Java forbids declaration of an identifier as a local variable within
the scope of a parameter or local variable of the same name [@emph{JLS},
14.3.2], so ESC/Java forbids declaration of an identifier as a bound variable
within the scope of a parameter, local variable, or bound variable of the
same name.  Consequently, the quantified expression @t{(\forall int
k;  a[k] == 0)} cannot occur in a scope where there is already
a parameter, local variable, or bound variable named @t{k}.

The scoping rules of routine parameters, fields, @t{this}, and
@t{super}
are slightly different from those in Java.  In particular:
@itemize
@item
When a @emph{SpecExpr} occurs in a modifier pragma (<a href="#2.0.1  There are four syntactic categories of pragmas.">section
2.0.1</a>) applied to a field, names in the @emph{SpecExpr} are resolved
as if the @emph{SpecExpr} were part of the initializer of the field. 
Consequently, if the field is an instance variable, then @t{this}
and @t{super} can be mentioned and any unqualified field name @t{f}
is a synonym for @t{this.f}.  While Java forbids field initializers
from using other fields that are declared later in textual order (even
though they are in scope), this restriction does not apply to ESC/Java
pragmas (compare the examples in sections <a href="#2.5.1  readable_if pragma">2.5.1</a>
and <a href="#2.7.0  monitored_by pragma">2.7.0</a> to those in [@emph{JLS},
8.3.2.1, 8.3.2.2]).

@item
When a @emph{SpecExpr} occurs in a modifier pragma applied to a routine
declaration, names in the @emph{SpecExpr} are resolved as if the @emph{SpecExpr}
were placed at the beginning of the routine body.  Consequently, the
names of the routine's parameters are in scope.  Furthermore, if the
routine is an instance method, then @t{this} and @t{super} can
be mentioned, and if the routine is a constructor, then @t{this} and
@t{super}
can be mentioned in @t{ensures} pragmas.  As usual, wherever
@t{this}
can be mentioned, an unqualified field name @t{f} is a synonym for
@t{this.f}.

@item
When a @emph{SpecExpr} occurs in a modifier pragma applied to an abstract
method declaration, names in the @emph{SpecExpr} are resolved as if the
method could have a body and the @emph{SpecExpr} were placed there. 
That is, the names of the method's parameters are in scope, @t{this}
can be mentioned, any unqualified field name @t{f} is a synonym for
@t{this.f},
and if the abstract method declaration occurs in a class (rather than in
an interface) then @t{super} can be mentioned.

@item
In any other @emph{SpecExpr}, the same parameters, local variables, and
fields are in scope as in the Java context where the annotation containing
the @emph{SpecExpr} occurs; @t{this} can be mentioned (and any unqualified
field name @t{f} is a synonym for @t{this.f}) if the @emph{SpecExpr}
occurs in a Java context where @t{this} can be mentioned; and @t{super}
can be mentioned if the @emph{SpecExpr} occurs in a Java context where
@t{super}
can be mentioned.  Moreover, in a @emph{SpecExpr} that occurs in a
declaration pragma (see <a href="#2.0.1  There are four syntactic categories of pragmas.">section
2.0.1</a>) in a class, @t{this} and @t{super} can be mentioned
and any unqualified field name @t{f} is a synonym for @t{this.f}.
@end itemize
A @t{ghost} field @emph{@t{f} }(see <a href="#2.6.0  ghost pragma">section
2.6.0</a>) is in scope in pragmas wherever an actual Java member of the
class containing the @t{ghost} pragma declaring @emph{@t{f}}
would be in scope.  The rules for name resolution are different for
ghost variables than for ordinary variables.  Java variables (if in
scope) hide conflicting ghost variables of the same name regardless of
their points of declaration, and regardless of whether the Java variable
is accessible.  Ghost variables, on the other hand, hide neither Java
variables nor other ghost variables.  For example, given the declarations
<blockquote>@b{Input form file I.java:}

@t{interface I @{}

@t{  //@ ghost public int i;}

@t{  //@ ghost public int j;}

@t{  }@emph{...}

@t{@}}

@b{Input from file C.java:}

@t{class C @{}

@t{ private int i;}

@t{ //@ ghost public int j;}

@t{ }...

@t{@}}

@b{Input from file D.java:}

@t{class D extends C implements I @{}...@t{@}}</blockquote>
a reference to @t{i} in a pragma in @t{D.java} would resolve
to the real field of @t{C} rather than the ghost field of @t{I}
(and would then generate an error because that field is not accessible
in @t{D}), while a reference to @t{j} in a pragma in @t{D}
would be ambiguous (since @t{C} and @t{I} both declare ghost
fields named @t{j} and neither hides the other).

@b{Note:}  The preceding rules about ghost variables, and the
restriction against reusing a name in scope as a ghost field name (<a href="#2.6.0  ghost pragma">section
2.6.0</a>), are intended to reduce the number of situations where a name
unambiguously means one thing in Java code and unambiguously means a different
thing in an adjacent pragma.  Unfortunately, some such situations
still remain.  For example, if a ghost field and a class have the
same name @t{N}, then the expression @t{N}.@t{f} might refer
to a static field of class @t{N} in Java code, while meaning @t{this.N.f}
in a nearby annotation.

The rules that make names accessible in specification expressions (@emph{spec-accessible})
are in some cases more liberal that Java's access control rules [@emph{JLS},
6.6].  In particular:
@itemize
@item
If a variable's declaration is annotated with a @t{spec_public} (<a href="#2.5.0  spec_public pragma">section
2.5.0</a>) pragma, then the variable is spec-accessible wherever it would
have been spec-accessible if it had been declared @t{public}.

@item
A variable declared as @t{protected} is spec-accessible in the package
where it is declared and in any subclass of the class where it is declared
(without the additional restriction in [@emph{JLS}, 6.6.2]).
@end itemize
Of course there are also some cases where variables--for example, ghost
variables (<a href="#2.6.0  ghost pragma">section 2.6.0</a>)--are spec-accessible
but not Java accessible simply because they are not in scope in Java.

Finally, the label @emph{Identifier} in a @t{\lblpos} or @t{\lblneg}
expression is part of a separate name space.  The label does not become
available for use inside the @emph{SpecExpr}.  A label is permitted
to have the same name as an identifier already in scope or as a label in
an enclosing labeled expression.  If a label has the same name as
an identifier already in scope, it does not hide that identifier.

@c =============================================================================
@node Warnings, Command-line Options and Environment Variables, Specification Expressions, Top
@section Warnings

ESC/Java issues warnings for conditions that it regards as runtime errors,
and that, so far is it can tell, might actually occur at runtime.

The potential conditions that give rise to some ESC/Java warning types
(specifically @t{Null}, @t{IndexNegative}, @t{IndexTooBig},
@t{Cast},
@t{ArrayStore},
@t{ZeroDiv},
and @t{NegSize}) are conditions that would be detected by the Java
runtime system and give rise to exceptions (specifically,
@t{NullPointerException},@t{
IndexOutOfBoundsException},
@t{ClassCastException},@t{ ArrayStoreException},@t{
ArithmeticException}, and @t{NegativeArraySizeException}). 
The current ESC/Java regards these conditions as runtime errors, and generates
warnings for them even if the program actually catches the resulting exceptions.
<blockquote>@b{Fine point:  }In some cases multiple warnings may
arise from the same cause.  For example, if a variable is dereferenced
in multiple arms of a @t{switch} statement but is not dereferenced
before the @t{switch} statement, and ESC/Java cannot confirm that
the variable is non-null, then it will issue a warning for the first dereference
of the variable in each arm of the @t{switch} statement.  In
order to reduce the likelihood of flooding the user with redundant warnings,
ESC/Java will issue at most 10 warnings for any method or routine before
moving on to the next routine.  Users can change the maximum number
of warnings per routine by setting the @t{PROVER_CC_LIMIT} environment
variable (see the @t{escjava(1)} man page).</blockquote>
Section 4.0 describes the parts of ESC/Java warning messages.  The
remaining subsections of this section describe all the types of warnings
issued by the current ESC/Java.  [@emph{These descriptions may be skipped
on first reading, or until the reader is confronted with an ESC/Java warning
whose meaning or cause is unclear.}]

A recommended discipline for using ESC/Java is to annotate your program
sufficiently so that ESC/Java produces no warnings, and in this process
to resort to the use of @t{nowarn} or @t{assume} pragmas only
in cases where other alternatives are impractical.  Below we include
occasional tips about pragmas that might be added in response to particular
warnings.  The @t{-suggest} command-line option (see
<a href="#5.1.1  The ESC/Java class path (-classpath, CLASSPATH, -bootcla">section
5.1.1</a> or the @t{escjava(1)} man page) causes ESC/Java to offer
suggestions (of varying quality) for pragmas that might be added in response
to some warnings.

@menu
* Parts of ESC/Java warning messages::  
* ArrayStore warning::          
* Assert warning::              
* Cast warning::                
* Deadlock warning::            
* Exception warning::           
* IndexNegative warning::       
* IndexTooBig warning::         
* Invariant warning::           
* LoopInv warning::             
* NegSize warning::             
* NonNull warning::             
* NonNullInit warning::         
* Null warning::                
* OwnerNull warning::           
* Post warning::                
* Pre warning::                 
* Race warning::                
* Reachable warning::           
* Unreadable warning::          
* Uninit warning::              
* ZeroDiv warning::             
@end menu

@node Parts of ESC/Java warning messages, ArrayStore warning, Warnings, Warnings
@subsection Parts of ESC/Java warning messages

The @emph{primary part} of each ESC/Java warning message gives a brief
description of the kind of condition being warned of, including a parenthesized
``warning type'' name, and indicates a source code location--the ``dynamic
location'' of the warning--for the control point at which the condition
potentially occurs.

For some warning types, the message additionally indicates the source
code location of (the first character of the initial keyword of) the pragma--the
warning's @emph{associated pragma}--that causes ESC/Java to regard the
condition as a runtime error.

If the warning is an @t{Invariant} warning, the message will usually
include a @emph{partial counterexample context}, which may be of help to
the user to tell which object that might--so far has ESC/Java can determine--have
its one of its invariants violated and why.

An ESC/Java warning message may include an @emph{execution trace} listing
interesting (see the fine points below) control decisions on some execution
path that--so far as ESC/Java can determine--may plausibly lead to the
runtime error mentioned in the warning.

Finally, an ESC/Java might list some labels that occur in pragmas an
are relevant to the scenario being warned about.  (See <a href="#3.2.16  \lblneg and \lblpos">section
3.2.16</a> for some examples.)

@b{Example}

Suppose the file @t{C.java} contains the following class declaration.
<blockquote>@t{ 1:  class C @{}

@t{ 2:}

@t{ 3:   int i;}

@t{ 4:   int[] x;}

@t{ 5:    /*@ invariant i
> 0}

@t{ 6:       
==> x != null}

@t{ 7:    */}

@t{ 8:}

@t{ 9:    void m (int[] p,
int[] q) @{}

@t{10:      i = 10;}

@t{11:      int[] t;}

@t{12:      if (p !=
null) @{}

@t{13:       
t = p;}

@t{14:      @} else @{}

@t{15:       
t = q;}

@t{16:      @}}

@t{17:      x = t;}

@t{18:    @}}

@t{19:  @}}</blockquote>
Then the output from the command
<blockquote>@t{escjava C.java}</blockquote>
includes one warning message.

The primary part of the warning message indicates that the some invariant
might not hold when control reaches the end of the method @t{m}:
<blockquote>@t{CC.java:18: Warning: Possible violation of object invariant
(Invariant)}

@t{  @}}

@t{  ^}</blockquote>
The next part of the warning message gives the associated pragma, an @t{invariant}
pragma starting on line 5:
<blockquote>@t{Associated declaration is "C.java", line 5, col 6:}

@t{  /*@ invariant i > 0 ...}

@t{      ^}</blockquote>
The ellipsis indicates that the associated pragma may continue beyond the
part that is shown in the message.  (In this case it extends onto
the next line of the program.)

Since this is an @t{Invariant} warning, it includes a partial counterexample
context:
<blockquote>@t{Possibly relevant items from the counterexample context:}

@t{  brokenObj == this}

@t{(brokenObj* refers to the object for which the invariant is broken.)}</blockquote>
Here we see that the object whose invariant might be violated is @t{this},
that is, the object whose @t{m} method is being executed.

The final part of the warning message is an execution trace, indicating
a scenario in which the right hand side @t{c} of the assignment on
line 12 might in fact evaluate to @t{null}:
<blockquote>@t{Execution trace information:}

@t{    Executed else branch in "C.java", line 14, col
11.}</blockquote>
@b{Fine points}

The command-line option @t{-plainwarning} suppresses output of
partial counterexample contexts in @t{Invariant} warnings.

The command-line option @t{-counterexample} causes ESC/Java to
supply counterexample contexts with all warnings.

The execution trace in a warning mentions the following events on the
execution path associated with the warning:
@itemize
@item
execution of a @t{return} statement (provided evaluation of the expression
to be returned completes normally)

@item
execution of a @t{throw} statement (provided evaluation of the exception
to be thrown completes normally)

@item
execution of a @t{break} statement

@item
execution of a @t{continue} statement

@item
commencement of any branch of an @t{if} statement (including the implicit
empty @t{else} branch)

@item
commencement of any branch of a @t{switch} statement (including the
implicit @t{default})

@item
commencement of evaluation of either arm of a conditional ( @t{? :}
) expression

@item
short-circuit completion of evaluation of a conditional (@t{&&}
and @t{||}) expression

@item
exceptional completion of a routine call

@item
commencement of any iteration of a loop (see the fine points of <a href="#2.4.3  loop_invariant pragma">section
2.4.3</a> for information about ESC/Java's treatment of loops)

@item
entrance to a @t{finally} block, when the associated @t{try}
block terminates with a @t{throw}, @t{return}, @t{break},
or @t{continue}

@item
exit from a @t{finally} block, when the block is entered after a @t{throw},
@t{return},
@t{break},
or @t{continue} and the body of the
@t{finally} block completes
normally (so that the @t{throw},
@t{return},
@t{break},
or @t{continue} is resumed after the @t{finally} block)
@end itemize
ESC/Java actually associates some execution path with each warning, but
if the execution path associated with a warning includes no events of the
kinds listed above, then ESC/Java omits the line
<blockquote>@t{Execution trace information:}</blockquote>
from the warning message.

The command-line option @t{-notrace} suppresses output of execution
traces.

The command-line option @t{-suggest} causes ESC/Java to accompany
certain of its warning messages with suggestions for pragmas that may eliminate
those warnings.  See <a href="#5.0  -suggest">section 5.0</a> for
some examples.

@node ArrayStore warning, Assert warning, Parts of ESC/Java warning messages, Warnings
@subsection ArrayStore warning

An @t{ArrayStore} warning warns that the control may reach an assignment
@t{@emph{A}[@emph{I}]
= @emph{E}} when the value of @emph{@t{E}} is not assignment compatible
with the actual element type of @emph{@t{A}}.  (This condition
would result in an @t{ArrayStoreException} being thrown at runtime
[@emph{JLS}, 10.10, 15.25.1].)

@b{Tip:}  See <a href="#3.2.4  Examples involving \TYPE, \type, \typeof, \elemtype, and <:">section
3.2.4</a> for discussion of a common cause of spurious @t{ArrayStore}
warnings and examples of annotations to avoid them.

@node Assert warning, Cast warning, ArrayStore warning, Warnings
@subsection Assert warning

An @t{Assert} warning warns that control may reach a pragma @t{assert
@emph{E}}
when the value of @emph{@t{E}} is @emph{@t{false}}.

@node Cast warning, Deadlock warning, Assert warning, Warnings
@subsection Cast warning

A @t{Cast} warning warns that control may reach a cast @t{(@emph{T})@emph{E}}
when the value of @emph{@t{E}} cannot be cast to the type @emph{@t{E}}. 
(This condition would result in a @t{ClassCastException} being thrown
at runtime [@emph{JLS}, 5.4, 15.15].)

@b{Tip:}  @t{Cast} warnings often arise in connection with
the use ``container'' classes, when the programmer intends a particular
container to be used exclusively to hold elements of some particular type
@t{T}
(a proper subtype of @t{Object}) but the methods for extracting elements
are declared to return results of type @t{Object}.  The second
example in <a href="#2.6.2  Examples using ghost variables">section 2.6.2</a>
shows how the programmer can use a @t{ghost} variable to express the
design decision that the container will hold only instances of @t{T}
(so that objects extracted from the container can always safely be cast
to type @t{T}).

@node Deadlock warning, Exception warning, Cast warning, Warnings
@subsection Deadlock warning

A @t{Deadlock} warning warns that control may reach a @t{synchronized}
statement or a call to a @t{synchronized} method that would acquire
a lock in violation of the locking order.  That is, it warns of the
possibility that a thread might attempt to acquire a lock @emph{@t{L}}
when
<blockquote>@t{\lockset[@emph{L}] | \max(\lockset) < @emph{L}}</blockquote>
is false.

In the current ESC/Java, @t{Deadlock} warnings are disabled by
default, but can be enabled by use of the command line option @t{-warn
Deadlock}.

The only way that ESC/Java can ever show that the execution of a @t{synchronized}
statement or a @t{synchronized} method body will not result in a potential
locking order violation (and thus in a potential deadlock) is by using
information supplied in pragmas.  The usual way to supply the necessary
information is to use an axiom pragma to supply information about the locking
order, and to use a @t{requires} pragma to supply information about
the locks held on entry to any routine whose body includes a @t{synchronized}
statement or a call to a @t{synchronized} method.

A @t{Deadlock} warning has no associated pragma.  Typically
the warning results from the absence of some pragma that would supply the
information needed to show that the locking order is obeyed.  While
a user might sometimes blame a @t{Deadlock} warning on a bug in some
specific pragma, there is no general mathematical rule for uniquely ascribing
such blame.

@node Exception warning, IndexNegative warning, Deadlock warning, Warnings
@subsection Exception warning

An @t{Exception} warning warns that a routine may terminate abruptly
by throwing an exception that is not an instance of any type listed in
the routine's throws clause.

Note that ESC/Java's treatment of unchecked exception classes [JLS,
11.1] is different from Java's.  Java's compile-time checking never
requires a throws clause to mention an unchecked exception class. 
By contrast, when ESC/Java checks the body of a routine @emph{@t{R}},
it considers the possibility of exceptions being thrown by any @t{throw}
statement in the body of @emph{@t{R}} and by any call from @emph{@t{R}}
to a routine with a nonempty throws clause, and it issues a warning if
(so far as it can determine) it is possible that @emph{@t{R}} may
terminate abruptly with such an exception other than an instance of a type
mentioned in @emph{@t{R}}'s throws clause.  (However, ESC/Java
does not consider the possibility of exceptions being thrown other than
by @t{throw} statements or in accordance with the throws clauses of
called routines.)

@b{Tips:}  The control point associated with an @t{Exception}
warning is the end of the routine body, rather than the point at which
the exception is first thrown.  This is technically correct because
the potential error is not throwing the exception, but letting the exception
escape the routine body without being caught.  However, in trying
to understand why the warning is being issued and what to do about it,
you are more likely to be interested in knowing where the problematic exception
might be thrown, as indicated by the execution trace (see <a href="#4.0  Parts of ESC/Java warning messages">section
4.0</a>) in the warning message.

The Java language requires that routines declare all checked exceptions
that they might throw [@emph{JLS}, 11.2].  Consequently, ESC/Java's
@t{Exception}
warning is of interest only in connection with unchecked exceptions. 
Even if your own code makes no mention of unchecked exceptions it may call
library routines whose throws clauses mention unchecked exceptions.

It may tempting to take the view that unchecked exceptions are unchecked
precisely because it is not worthwhile to check for their presence at compile
time, and therefore always to run ESC/Java with the @t{-nowarn Exception}
command-line option (see the @t{escjava(1)} man page for descriptions
of ESC/Java command-line options).  However, the whole purpose of
ESC/Java is to do more sophisticated static checking than compilers do,
and you may make better use of its capabilities by employing a less extreme
and more fine-grained treatment of unchecked exceptions.  Suppose,
for example, that your program calls a library method with the declaration
<blockquote>@t{  /**  Returns the element-wise sum of a and
b.  Throws}

@t{       a NullPointerException if
either a or b is null.}

@t{       Throws an IndexOutOfBoundsException
if a and b are}

@t{       not of the same length.}

@t{  **/}

@t{  public static int[] add(int[] a, int[] b)}

@t{    throws NullPointerException, IndexOutOfBoundsException}

@t{  @{ }...

@t{  @}}</blockquote>
and that it is your intention never to supply arguments that give rise
to exceptions (and therefore not to bother with code to detect and handle
the exceptions at runtime).  In this case, you might get some useful
checking from ESC/Java by creating a @t{.spec} file (see <a href="#5.1.2  Specification (.spec) files">section
5.1</a>) containing a declaration for @t{add} with the @t{throws}
clause removed and a @t{requires} pragma supplied in its place:
<blockquote>@t{  /** }...

@t{  <esc> requires a != null & b != null && a.length
== b.length;}

@t{  </esc>}

@t{  **/}

@t{  public static int[] add(int[] a, int[] b);}</blockquote>
Alternatively, you might supply @t{exsures} pragmas specifying the
conditions under which the exceptions may be thrown:
<blockquote>@t{/** ...}

@t{<esc> exsures (NullPointerException)}

@t{        a == null | b == null;}

@t{      exsures (IndexOutOfBoundsException)}

@t{        a != null & b !=
null && a.length != b.length;}

@t{</esc>}

@t{**/}

@t{public static int[] add(int[] a, int[] b);}</blockquote>
With this last specification, ESC/Java will consider execution paths in
which a call to @t{add} terminates exceptionally, but only if it cannot
verify the arguments are non-null and of equal length.

@node IndexNegative warning, IndexTooBig warning, Exception warning, Warnings
@subsection IndexNegative warning

An @t{IndexNegative} warning warns that control may reach an array
access @t{@emph{A}[@emph{I}]} when the value of the index @emph{@t{I}}
is negative.  (This condition would result in an @t{IndexOutOfBoundsException}
being thrown at runtime [@emph{JLS}, 11.5.1.1, 15.12.1].)

@node IndexTooBig warning, Invariant warning, IndexNegative warning, Warnings
@subsection IndexTooBig warning

An @t{IndexTooBig} warning warns that control may reach an array access
@t{@emph{A}[@emph{I}]}
when @t{@emph{I} >= @emph{A}.length}.  (This condition would
result in an @t{IndexOutOfBoundsException} being thrown at runtime
[@emph{JLS}, 11.5.1.1, 15.12.1].)

@node Invariant warning, LoopInv warning, IndexTooBig warning, Warnings
@subsection Invariant warning

An @t{Invariant} warning warns that some object invariant may not
hold when control reaches a routine call, or that some object invariant
may not hold on exit from the current body.  The warning is associated
with the @t{invariant} pragma that gives the potentially violated
object invariant.

@b{Tip:}  An @t{invariant} warning is normally accompanied
by a partial counterexample context describing conditions under which,
so far as ESC/Java can determine, the indicated invariant might be violated,
for example:
<blockquote>@t{Possibly relevant items from the counterexample context:}

@t{  }...

@t{  \typeof(brokenObj<3>) == \typeof(this)}

@t{  brokenObj<3> != this}

@t{  brokenObj<3> != null}

@t{  }...</blockquote>
In this display, some inflected form of the identifier @t{BrokenObj}
is used to name the object for which the invariant is broken, known as
the @emph{broken object}.  If, as in the example above, the displayed
formulas tell what the broken object is @emph{not} equal to, but don't
tell what it @emph{is} equal to, then the likely cause of the warning is
that the program modifies some field (call it @t{f}) of some object
(call it @t{t}) and that ESC/Java hypothesizes that this modification
might break the invariant for some other object, for example a hypothetical
object @t{u} such that @t{u != t} but @t{u.f == t.f}. 
If the programmer's intention is that no such sharing of @t{f} fields
can occur, the programmer can communicate this intention to ESC/Java by
supplying an appropriate invariant near the declaration of the field, for
example:
<blockquote>@t{//@ invariant this.f.owner == this;}</blockquote>
For a more detailed example of the scenario outlined above, see the discussion
of the @t{owner} field and its use in <a href="#3.2.17 owner">section
3.2.17</a>.

@b{Fine points}

The command-line option @t{-plainwarning} suppresses output of
partial counterexample contexts in @t{Invariant} warnings.  This
may be useful in cases where ESC/Java's output is read by another program.

In the partial counterexample context in an @t{Invariant} warning
for a constructor, the object being constructed may be named by an inflected
form of the identifier @t{RES}.  For example, in the @t{ObjStack}
example from <a href="#3.2.17 owner">section 3.2.17</a>, we wrote:
<blockquote>Without the @t{set} pragma, ESC/Java will generate a warning
that the constructor fails to establish the invariant @t{a.owner == this}.</blockquote>
The warning might be something like:
<blockquote>@t{ObjStack.java:12: Warning: Possible violation of object
invariant (Invariant)}

@t{  @}}

@t{  ^}

@t{Associated declaration is "ObjStack.java", line 7, col 6:}

@t{  //@ invariant a.owner == this;}

@t{      ^}

@t{Possibly relevant items from the counterexample context:}

@t{  brokenObj<1> == RES:9.13}

@t{(brokenObj* refers to the object for which the invariant is broken.)}</blockquote>
Here, the equality @t{brokenObj<1> == RES:9.13} indicates that
the object whose invariant may be violated is the object being constructed.

@node LoopInv warning, NegSize warning, Invariant warning, Warnings
@subsection LoopInv warning

A @t{LoopInv} warning warns that some loop invariant may not hold
at the start of an iteration of a loop (including an iteration in which
the   The pragma is associated with the @t{loop_invariant}
pragma that gives the potentially violated loop invariant.  (For more
details of ESC/Java's treatment of loop invariants, see sections <a href="#2.4.3  loop_invariant pragma">2.4.3</a>
and
<a href="#C.0.1  Loops">C.0.1</a>.)

@node NegSize warning, NonNull warning, LoopInv warning, Warnings
@subsection NegSize warning

A @t{NegSize} warning warns of a possible attempt to allocate an array
of negative length.  (This condition would result in a @t{NegativeArraySizeException}
being thrown at runtime [@emph{JLS}, 15.9].)

@node NonNull warning, NonNullInit warning, NegSize warning, Warnings
@subsection NonNull warning

A @t{NonNull} warning warns of a possible attempt to assign the value
@t{null}
to a variable whose declaration is modified by a @t{non_null} pragma,
or to call a routine with an actual parameter value of @t{null} when
the declaration of the corresponding formal parameter is modified by (or
inherits) a @t{non_null} pragma.  The warning is associated with
the @t{non_null} pragma that is potentially violated.

@b{Tips:}  If the right hand side of the assignment indeed never
evaluates to @t{null}, you must somehow communicate the reason to
ESC/Java.  For some ideas about this, see the tips given in connection
with @t{Null} warnings in <a href="#4.13  Null warning">section 4.13</a>. 
Alternatively, it may be that the @t{non_null} pragma associated with
the warning is too strong and should be replaced by an annotation that
only requires the affected field or variable to be non-null under certain
conditions.  See also the comments in <a href="#2.4.0  non_null pragma">section
2.4.0</a> about @t{non_null} vs. @t{invariant} and @t{requires}
pragmas.

@node NonNullInit warning, Null warning, NonNull warning, Warnings
@subsection NonNullInit warning

A @t{NonNullInit} warning warns that a constructor may fail to establish
a non-null value for an instance field of the constructed object when the
declaration of that instance field is modified by a @t{non_null} pragma. 
The warning is associated with the @t{non_null} pragma that is potentially
violated.

@node Null warning, OwnerNull warning, NonNullInit warning, Warnings
@subsection Null warning

A @t{Null} warning warns of a possible attempt to dereference @t{null},
for example, by field access @t{@emph{O}.@emph{f}}, an array access
@t{@emph{O}[@emph{i}]},
a method call @t{@emph{O}.@emph{m}(}...@t{)}, a @t{synchronized}
statement @t{synchronized (O) }..., or a @t{throw} statement
@t{throw
@emph{O}},
where @emph{@t{O}} evaluates to
@t{null}.  (Any of these
would result in a @t{NullPointerException} being thrown at runtime
[@emph{JLS}, 11.5.1.1, 14.17, 15.10, 15.11, 15.12].)
<blockquote>@b{Remark:}  @emph{JLS} doesn't say that
throwing @t{null} results in a @t{NullPointerException}, but
experimentation with@t{ javac(5)} and @t{java(5)} reveals that
it does.</blockquote>
@b{Tips:}  If the expression @emph{@t{O}} is a formal parameter,
consider adding a @t{non_null} pragma to the parameter's declaration
or supplying a @t{requires} pragma stating that the parameter must
be non-null under certain conditions.  If @emph{@t{O}} is a field
access
@t{@emph{P}.@emph{g}}, consider adding a @t{non_null}
pragma to @emph{@t{g}}'s declaration, supplying an @t{invariant}
pragma stating that @emph{@t{g}} is non-null under certain conditions,
or (if @emph{@t{P}} involves parameters of the current routine) supplying
an appropriate @t{requires} pragma.  If @emph{@t{O}} is
an array access, consider supplying a
@t{requires} or @t{invariant}
pragma using @t{\nonnullelements} (see section 3.2.12).  If @emph{@t{O}}
is a method call, consider annotating the called method with @t{ensures
\result != null} or @t{ensures
@emph{Q} ==> \result != null} for
some appropriate condition @emph{@t{Q}}. See the second example in
<a href="#2.6.2  Examples using ghost variables">section
2.6.2</a> for an example of pragmas guaranteeing that an element extracted
from a container will be non-null.

@node OwnerNull warning, Post warning, Null warning, Warnings
@subsection OwnerNull warning

As described in <a href="#3.2.17 owner">section 3.2.17</a>, every constructor
has the implicit postcondition @t{this.owner == null}.  An @t{OwnerNull}
warning warns that a constructor may return an object whose @t{owner}
field is non-null.

@node Post warning, Pre warning, OwnerNull warning, Warnings
@subsection Post warning

A @t{Post} warning warns that a routine body may fail to establish
some normal postcondition (on terminating normally) or some exceptional
postcondition (when terminating by throwing an exception of a relevant
type).  The warning is associated with the @t{ensures}, @t{exsures},
@t{also_ensures},
or @t{also_exsures} pragma that gives the potentially violated postcondition.

@b{Tips:}  If a @t{Post} warning seems mysterious, the
problem might be that the programmer intended to refer to the post-state
value of some field, but forgot to include a @t{modifies} or @t{also_modifies}
pragma naming that field as a target.  See <a href="#2.3.3  A note on the interaction of modifies and \old">section
2.3.3</a> for further discussion of this point.  It can also be useful
to examine the execution trace that accompanies the warning.  For
example, you might see that the trace reported be ESC/Java involves execution
of a @t{return} statement in the middle of the method that you had
overlooked.

@node Pre warning, Race warning, Post warning, Warnings
@subsection Pre warning

A @t{Pre} warning warns that control may reach a routine call when
some precondition of the routine does not hold.  The warning is associated
with the @t{requires} pragma that gives the potentially violated precondition.

@node Race warning, Reachable warning, Pre warning, Warnings
@subsection Race warning

A @t{Race} warning warns of a possible attempt to access a monitored
field while not holding the requisite lock(s).  The warning is associated
with the @t{monitored} or @t{monitored_by} pragma giving the
lock(s) that should be held.

@b{Bug/limitation:}  If there are multiple @t{monitored}
and/or @t{monitored_by} pragmas for the same field @emph{@t{f}},
a @t{Race} warning for an access to @emph{@t{f}} will mention
only one of these pragmas, and perhaps not the most relevant one.

@node Reachable warning, Unreadable warning, Race warning, Warnings
@subsection Reachable warning

A @t{Reachable} warning warns that control may reach an @t{unreachable}
pragma.

@node Unreadable warning, Uninit warning, Reachable warning, Warnings
@subsection Unreadable warning

An @t{Unreadable} warning warns that control may reach a read access
to a variable when the expression in a @t{readable_if} pragma modifying
the variable's declaration is false.  The warning is associated with
the @t{readable_if} pragma.

@node Uninit warning, ZeroDiv warning, Unreadable warning, Warnings
@subsection Uninit warning

An @t{Uninit} warning warns that control may reach a read access to
a local variable before execution of any assignment to the variable other
than an initializer in a declaration modified by an @t{uninitialized}
pragma.  The warning is associated with the @t{uninitialized}
pragma.

@node ZeroDiv warning,  , Uninit warning, Warnings
@subsection ZeroDiv warning

A @t{ZeroDiv} warning warns of a possible attempt to apply the integer
division (@t{/}) or remainder (@t{%}) operator with zero as the
divisor.  (This condition would result in an @t{ArithmeticException}
being thrown at runtime [@emph{JLS}, 15.16.2, 15.16.3].)

@c =============================================================================
@node Command-line Options and Environment Variables, Java Language Support and Limitations, Warnings, Top
@section Command-line Options and Environment Variables

The operation of ESC/Java is controlled by a variety of command-line options
and environment variables.  The primary source of information on these
is the @t{escjava(1)} man page included with the ESC/Java release
(see <a href="#Appendix B:  Installing and using ESC/Java at your site">appendix
B</a>).  In this section, we describe a small number of options that
are of particular importance, or that seem to merit more extensive descriptions
than those on the man page.

@menu
* -suggest::                    
* Specification (.spec) files and the ESC/Java's class path::  
@end menu

@node -suggest, Specification (.spec) files and the ESC/Java's class path, Command-line Options and Environment Variables, Command-line Options and Environment Variables
@subsection -suggest

The @t{-suggest} command-line option causes ESC/Java to accompany
certain of its warning messages with suggestions for pragmas that may eliminate
those warnings.

@b{Examples}

Running ESC/Java with the command line
<blockquote>@t{escjava -suggest Bag.java}</blockquote>
on the version of @t{Bag.java} in <a href="#0.0  Scene 0:  We write a class declaration.">section
0.0</a> will produce such suggestions as
<blockquote>@t{Bag.java:6: Warning: Possible null dereference (Null)}

@t{    n = input.length;}

@t{            
^}

@t{Suggestion [6,13]: perhaps declare parameter 'input' at 5,12 in
Bag.java with 'non_null'}</blockquote>
Running ESC/Java with the @t{-suggest} option on the file @t{T.java}
from <a href="#3.2.4  Examples involving \TYPE, \type, \typeof, \elemtype, and <:">section
3.2.4</a> will produce the following warning and suggestion:
<blockquote>@t{T.java:5: Warning: Type of right-hand side possibly not
a subtype of array element type (ArrayStore)}

@t{    a[i] = x;}

@t{         ^}

@t{Suggestion [5,9]: perhaps declare method 'storeObject' at 4,14
in T.java with 'requires \elemtype(\typeof(a)) == \type(T);'}</blockquote>
Running ESC/Java with the @t{-suggest} option on the file @t{ObjStack.java}
from <a href="#3.2.17 owner">section 3.2.17</a> will produce the following
warning and suggestion:
<blockquote>@t{ObjStack.java:16: Warning: Possible violation of object
invariant (Invariant)}

@t{  @}}

@t{  ^}

@t{Associated declaration is "ObjStack.java", line 6, col 6:}

@t{  //@ invariant (\forall int i; n <= i & i < 10
==> a[i] == null);}

@t{      ^}

@t{Possibly relevant items from the counterexample context:}

@t{  (0 <= (brokenObj<2>).(n:15.6))}

@t{  }...

@t{(brokenObj* refers to the object for which the invariant is broken.)}

@t{Suggestion [16,2]: perhaps declare instance invariant 'invariant
this.a.owner == this;' in class ObjStack (near associated declaration at
"ObjStack.java", line 6, col 6)}</blockquote>
@b{Fine points}

ESC/Java does not supply suggestions for all warnings, and the suggestions
that it does supply are heuristically chosen and may be incorrect. 
For example, if the contents of file @t{C.java} are
<blockquote>@t{ 1:  class C @{}

@t{ 2:}

@t{ 3:    int n;}

@t{ 4:}

@t{ 5:    static int m(C
a, C b) @{}

@t{ 6:      if
(a != null) @{}

@t{ 7:       
return a.n;}

@t{ 8:      @} else
@{}

@t{ 9:       
return b.n;}

@t{10:      @}}

@t{11:    @}}

@t{12:  @}}</blockquote>
then the command @t{escjava -suggest C.java} will give a warning about
and possible null dereference on line 9, accompanied by the suggestion:
<blockquote>@t{Suggestion [9,14]: perhaps declare parameter 'b' at 5,22
in C.java with 'non_null'}</blockquote>
It might actually be better to declare the method @t{m} with the precondition
<blockquote>@t{//@ requires a != null | b != null;}</blockquote>
since it might be the intention of the programmer to support callers that
meet only this precondition and not necessarily the more stringent condition
that @t{b} always be non-null.

Despite its limitations, the @t{-suggest} option can be of considerable
help to users in paring down the initial batch of mostly-spurious warnings
that ESC/Java typically produces when it is first run on a body of unannotated
code.  (A project currently under way at Compaq SRC is exploring automated
techniques for inferring ESC/Java annotations (@pxref{[FL00]}).

@node Specification (.spec) files and the ESC/Java's class path,  , -suggest, Command-line Options and Environment Variables
@subsection Specification (.spec) files and the ESC/Java's class path

This section discusses the algorithm that ESC/Java uses to find declarations
of classes, and ways in which the user can control that algorithm.

In order to check the routine bodies of a class @emph{@t{C}}, ESC/Java
may need various information about some other type (class or interface)
@emph{@t{T}}. 
This information, which we call the @emph{specification} of @emph{@t{T}},
may include both information introduced by pragmas (such as @t{invariant}
and @t{requires}) and information from the Java language (such as
routine signatures and types of fields), but does not include routine bodies.

If ESC/Java needs the specification for a type @emph{@t{T}} and
can find only a binary (@t{.class}) file and no source file for @emph{@t{T}},
then it can produce a simple specification based on the signature and type
information included in the binary file.  ESC/Java can also obtain
specifications from specification (@t{.spec}) files (see <a href="#5.1.2  Specification (.spec) files">section
5.1.2</a>).

@menu
* File reading modes::          
* The ESC/Java class path::     
* Specification files::         
* How ESC/Java decides which files to read and in which modes::  
* -depend::                     
@end menu

@node File reading modes, The ESC/Java class path, Specification (.spec) files and the ESC/Java's class path, Specification (.spec) files and the ESC/Java's class path
@subsubsection File reading modes

ESC/Java has two @emph{modes} for reading files:  @emph{full mode}
and @emph{spec-only mode}.  In order for ESC/Java to check the routine
bodies in a file, it must read the file in full mode.  When ESC/Java
reads a file in spec-only mode, it only obtains specifications that can
be used to check routine bodies in other files.  ESC/Java can read
@t{.java}
files in either mode.  It can read @t{.class} files in spec-only
mode, but not in full mode.

When ESC/Java reads a source file in spec-only mode, it performs very
limited processing--in particular, very liberal syntactic error-checking--on
the bodies of routines.  We do not specify here the exact degree to
which the error-checking is liberalized, except to state that where a routine
body would normally be expected, ESC/Java will accept (at least) any of
the following when reading a source file in spec-only mode:
<blockquote>a semicolon  @t{;}  (as in the Java syntax for
an @t{abstract} method declaration).

an empty body  @t{@{ @}}  (note that no @t{return}
statement is required, even for a non-@t{void} method).

a method body consisting of legal Java code legally annotated by ESC/Java
pragmas (that is, a body that ESC/Java would accept if it were reading
the file in full mode).</blockquote>


@node The ESC/Java class path, Specification files, File reading modes, Specification (.spec) files and the ESC/Java's class path
@subsubsection The ESC/Java class path (@t{-classpath}, @t{CLASSPATH}, @t{-bootclasspath})

Like the Java compiler (@t{javac(5)}), ESC/Java uses a class path
to look for declarations of types (classes and interfaces) that are not
declared in files named on the command line.  For a description of
how ESC/Java uses the class path, see <a href="#5.1.3  How ESC/Java decides which files to read and in which mo">section
5.1.3</a> below.

The (full) class path is the concatenation of two parts: @t{classpath}
and @t{bootclasspath}, where @t{classpath} is
@itemize
@item
the argument of the @t{-classpath} command-line option, if any, on
the command line, or else

@item
the value of the @t{CLASSPATH} environment variable if one has been
set, or else

@item
a default value
@end itemize
and @t{bootclasspath} is
@itemize
@item
the argument of the @t{-bootclasspath} command-line option, if any,
on the command line, or else

@item
a default value.
@end itemize
The default values of @t{classpath} and@t{ bootclasspath} are
subject to change.  At the time of writing, the default@t{ classpath}
is "@t{.}" and the default @t{bootclasspath} includes a directory
of selected @t{.spec} files (see <a href="#5.1.2  Specification (.spec) files">section
5.1.2</a>) for selected library classes and interaces together with directories
for the normal Java system libraries (the same default versions used by
@t{srcjava(1)}).

@b{Fine point}

If a command line contains multiple occurrences of the @t{-classpath}
option, as in
<blockquote>@t{escjava} @t{-classpath @emph{P1} -classpath
@emph{P2
sourcefiles}}</blockquote>
only the last one (@emph{@t{P2}} in the example) is used.  The
same applies for multiple occurrences of
@t{-bootclasspath}.

@b{Tip:}  The @t{-v} (verbose) command-line option makes
ESC/Java output various information including the full classpath. 
Thus, you can learn the current default value of either @t{classpath}
or
@t{bootclasspath} at your site by setting the other to a known
value and looking for the other in the output produced with @t{-v}. 
For example, you can learn the value of @t{bootclasspath} by typing
<blockquote>@t{escjava -classpath xxx -v | grep classpath}</blockquote>
on Unix systems or
<blockquote>@t{escjava -classpath xxx -v | find "classpath"}</blockquote>
on Windows systems.

@node Specification files, How ESC/Java decides which files to read and in which modes, The ESC/Java class path, Specification (.spec) files and the ESC/Java's class path
@subsubsection Specification (@t{.spec}) files

There are times when the specification that ESC/Java can derive automatically
from a @t{.class} file is inadequate, but when it is inconvenient
or impossible for the user to add pragmas to the @t{.java} source
file.  (For example, the user's file system may not contain a copy
of the @t{.java} file.)   In such situations, the user can
supply the needed pragmas in ESC/Java specification (@t{.spec}) files,
which are similar to @t{.java} source files except that (1) ESC/Java
always uses spec-only mode when reading a specification file (so routine
bodies may always be omitted from specification files) and (2) a specification
file @t{@emph{T}.spec} may contain a declaration of only the single
type @emph{@t{T}}.

Since Java compilers do not look for files with extension @t{.spec},
one can use the same class path for the Java compiler as for ESC/Java with
no danger of inadvertently pointing the compiler at a crippled source file.

@b{Caveat:}  When ESC/Java reads a @t{.spec} file, it does
not check that the contents of that file are in any way consistent with
those of a @t{.java} or @t{.class} file that a compiler might
find on the same class path.

@node How ESC/Java decides which files to read and in which modes, -depend, Specification files, Specification (.spec) files and the ESC/Java's class path
@subsubsection How ESC/Java decides which files to read and in which modes

In this section we describe how ESC/Java decides which files to read and
which modes to read them in.  The short version of the story is that
ESC/Java  uses its class path about the same way that a Java compiler
does, except that ESC/Java prefers @t{.spec} files over @t{.java}
files.  See the fine points below for a more complete (but not completely
complete) story.

@b{Fine points}

@b{[Note:}  Some of the behaviors in described in the next few
paragraphs change when ESC/Java is run with the @t{-depend} command-line
option.  See <a href="#5.1.4  -depend">section 5.1.4</a> for details.]

For each filename @emph{@t{F}} on the command line, ESC/Java looks
for the exact file @emph{@t{F}} (with relative path names evaluated
from the current working directory). If ESC/Java can't find file @emph{@t{F}},
it issues an error message and goes on to look for the next file, if any.
If ESC/Java finds file @emph{@t{F}}, then it reads file @emph{@t{F}}
in full mode (as a Java source file, regardless of the filename extension),
storing the type declarations it reads in an internal cache.

Once ESC/Java has read and cached the type declarations from files named
on the command line, it may then need the declarations of additional types
used (directly or indirectly) by the types already read.  When ESC/Java
needs the declaration of a type @t{@emph{P}.@emph{T}}, it can find
it in any of the following places:
<blockquote>(0)  already in ESC/Java's internal cache.

(1)  in a file named @t{@emph{C}/@emph{P'}/@emph{T}.spec},
where @emph{@t{P'}} is the relative path name whose directory-path
components are the simple-name components of @emph{@t{P}} taken in
order (e.g., on Unix, @emph{@t{P'}} would be the result of replacing
dots in @emph{@t{P}} with slashes), and @emph{@t{C}} is the first
directory on the class path (see <a href="#5.1.1  The ESC/Java class path (-classpath, CLASSPATH, -bootcla">section
5.1.1</a>) such that file @t{@emph{C}/@emph{P'}/@emph{T}.spec} exists.

(2)  in a file named @t{@emph{C}/@emph{P'}/@emph{T}.java},
where @emph{@t{P'}} is as in (1) above and @emph{@t{C}} is the
first directory on the class path such that file @t{@emph{C}/@emph{P'}/@emph{T}.java}
exists.

(3)  in a file named @t{@emph{C}/@emph{P'}/@emph{T}.class},
where @emph{@t{P'}} is as in (1) above and @emph{@t{C}} is the
first directory on the class path such that file @t{@emph{C}/@emph{P'}/@emph{T}.class}
exists.

(4)  in a @t{.java} file found by finding a file @t{@emph{C}/@emph{P'}/@emph{T}.class}
as in (3) above and reading the internal field that names the source file
from which it was compiled.</blockquote>
(If names of @t{.jar} or @t{.zip} files occur as class path components,
ESC/Java acts is if the class path included directories holding the expanded
contents of those files.)

ESC/Java's ranking of these alternatives is, from most favored to least
favored: 0, 1, 2, 4, 3.  Note that this means that, for example
@t{@emph{C1}/@emph{P'}/@emph{T}.spec}
is favored over @t{@emph{C2}/@emph{P'}/@emph{T}.java} even if @emph{@t{C2}}
precedes @emph{@t{C1}} in the class path.  If ESC/Java doesn't
have the declaration already in its cache and needs to read it from a file,
it will read the file in spec-only mode.

Whenever ESC/Java reads a @t{.java} file in order to get the declaration
of a type @emph{@t{T}}, it will also read and cache any other type
declarations in that file.
<blockquote>@b{Remark:}  In accordance  with
[@emph{JLS}, 7.6], implementations may forbid a file @t{@emph{T}.java}
from declaring a type @emph{@t{U}} other than @emph{@t{T}}, when
(1) the type @emph{@t{U}} is referred to by code in other compilation
units of the package in which the type @emph{@t{U}} is declared, or
(2) the type @emph{@t{U}} is declared @t{public}.  ESC/Java
does not enforce this restriction.  Note, however, that when the restriction
is obeyed,  alternative (4) above will never arise.</blockquote>
During the process just described, various errors may occur.  For
example, a file may not contain a declaration of the class suggested by
the file name.  We do not attempt here a complete enumeration of these
conditions.  Also, it is beyond the scope of this manual to describe
exactly which type declarations ESC/Java looks for in order to check a
given type.

@node -depend,  , How ESC/Java decides which files to read and in which modes, Specification (.spec) files and the ESC/Java's class path
@subsubsection @t{-depend}

[Note:  If you are not an ESC/Java wizard, and don't aspire to be,
you should probably skip this section and never use @t{-depend}.]

The @t{-depend} command-line option causes ESC/Java to change its
behavior from that described above in the following ways:
@itemize
@item
ESC/Java will prefer to read @t{.java} files rather than @t{.spec}
files.  That is, the ranking given in <a href="#5.1.3  How ESC/Java decides which files to read and in which mo">section
5.1.3</a> switches from 0, 1, 2, 4, 3 to 0, 2, 4, 1, 3.

@item
When reading a @t{.java} file (alternative 2 or 4), then ESC/Java
will read the file in full mode, rather than spec-only mode.  This
is in contrast to the normal behavior, where only @t{.java} files
named on the command line are read in full mode.

@item
Instead of checking only classes declared in files named on the command
line, ESC/Java will also check the classes that those classes depend on
(including indirectly) provided that finds their declarations in @t{.java}
files.
@end itemize
@b{Caveat:}  As currently implemented the @t{-depend} option
is likely to give unsatisfactory results in cases where both a @t{.spec}
file and a @t{.java} file declaring the same class can be found on
the class path.  When run with @t{-depend} ESC/Java will prefer
to read the class declaration from the @t{.java} file so that it can
read in full mode and check the class's routine bodies.  On the other
hand, successful checking of clients of the class will likely require use
of pragmas found only in the (ignored) @t{.spec} file and not in the
@t{.java}
file.

@c =============================================================================
@node Java Language Support and Limitations, Appendix A: Overview of how ESC/Java Works, Command-line Options and Environment Variables, Top
@section Java Language Support and Limitations

The @ref{[JLS1], Java Language Specification, version 1}, defines
the Java 1.0 language.  The ``@ref{[ICS], Inner Classes Specification}''
specifies the additional language features supported in Java 1.1 and
Java 1.2.  

The original ESC/Java1 supported all Java language features described in
@ref{[JLS1]} and @ref{[ICS]} with the following two exceptions:
@enumerate
@item
When ESC/Java1 reads a class @code{C} from file @file{C.class}, and one
of @code{C}'s members is a class @code{C.D}, ESC/Java1 will look for the
file @code{C$D.class} only in the directory where it found
@file{C.class}.
@c todo kiniry Check to see is still true; I don't think so.
@item
ESC/Java1 will not check any routine body that mentions an anonymous
class.
@c todo kiniry Check to see is still true; I don't think so.
@end enumerate

Java 1.2 includes the same language features as Java 1.1, but differs
from 1.0 and 1.1 in the versions of the standard libraries that it
includes.  The last release of ESC/Java1 includes specification files
for a small subset of the standard libraries.  This subset is far from
complete, but the @file{.spec} files that are included in the release
are intended to correspond to classes and interfaces that are standard
for Java 1.2.

The current version of ESC/Java2 accepts all Java language features
described in @ref{[JLS2]}, including inner and anonymous classes, the
assert statement, and Java 1.4 classfiles.  The specification files
included with the current version of ESC/Java2 corresponds to the final
release of Java 1.4. (version 1.4.2).

We intend to support all of the language features of Java 1.5 (aka
J2SE5) described in @ref{[JLS3]} in a future version of ESC/Java, likely
what is now known as ESC/Java3.

@b{Fine point}

While ESC/Java2 accepts all of the language constructs described in
@ref{[JLS2]}, the semantics ESC/Java2 ascribes to those constructs
differs in numerous small details---including, but not limited to, those
mentioned in Appendix C (@pxref{Appendix C: Sources of unsoundness and
incompleteness}) and other parts of this manual---from the semantics
specified in @ref{[JLS2]}.

Likewise, the annotations in the @file{.spec} files available in the
ESC/Java2 release may fail for various reasons to capture the semantics
of the actual JDK libraries (@pxref{Class paths and .spec files}).
@c todo kiniry Add discussion of our JDK unit testing.

@c =============================================================================
@node Appendix A: Overview of how ESC/Java Works, Appendix B: Installing and Using ESC/Java2 at your Site, Java Language Support and Limitations, Top
@section Appendix A: Overview of how ESC/Java Works

This appendix gives a very rough sketch of ESC/Java's internal operation.

The operation of ESC/Java consists of the following steps:

First, ESC/Java loads, parses, and type checks the files named on the
command line, as well as any other files needed because their contents
are directly or indirectly used by files name on the command line. 
(<a href="#5.1  Specification (.spec) files and the ESC/Java's class path">Section
5.1</a> describes where ESC/Java looks for files not named on the command
line.)

Next, for each class whose routine bodies are to be checked, ESC/Java
generates a type-specific @emph{background predicate} encoding such information
as subtype relations, types of fields, etc. in the class to be checked
and the classes and interfaces it uses.

Next, ESC/Java translates each routine to be checked into a logical
formula called a @emph{verification condition} (@emph{VC}).  As an
intermediate step in this translation, ESC/Java produces a command in an
intermediate language based on Dijkstra's
guarded commands (@pxref{[LSS99]}).  The intermediate language includes commands of
the form
@t{assert
@emph{E}}, where @emph{@t{E}} is a boolean
expression of the language.  An execution of a command is said to
``go wrong'' if control reaches subcommand of the form @t{assert @emph{E}}
when
@emph{@t{E}} is false.  Ideally, when a routine @emph{@t{R}}
is translated into a command
@emph{@t{C}} and thence to a verification
condition @emph{@t{V}}, the following three conditions should be equivalent:
<blockquote>(1) There is no way that @emph{@t{R}} can be invoked from
a state satisfying its specified preconditions and then behave erroneously
by, for example, dereferencing @t{null}, violating an
@t{assert}
pragma, terminating in a state that violates its specified postconditions,
etc.</blockquote>

<blockquote>(2) There is no execution of @emph{@t{C}} that starts
in a state satisfying the background predicate of @emph{@t{R}}'s class
and then goes wrong.

(3) @emph{@t{V}} is a logical consequence of the background predicate.</blockquote>
In practice, the translation is incomplete and unsound, so there may be
semantic discrepancies between @emph{@t{R}}, @emph{@t{C}}, and
@emph{@t{V.}}

Finally, ESC/Java invokes the Simplify (@t{Simplify(1)}) theorem
prover, asking it to prove each body's verification given the appropriate
background predicate.  If an attempted proof succeeds (or if Simplify
exceeds specified resource limits in attempting the proof, or if ESC/Java
exceeds specified resource limits generating the verification condition),
then ESC/Java reports no warnings for the body.  If the proof fails
(other than by exceeding resource limits), Simplify produces a potential
@emph{counterexample
context}, from which ESC/Java derives a warning message.

@b{Fine points}

The command-line option @t{-counterexample} makes ESC/Java print
selected parts of each counterexample, sugared into a somewhat Java-like
syntax.  For example, in section 3.2.17, we gave an example file @t{D.java}
and said of ESC/Java's output: ``There is no way to tell from this message
whether ESC/Java is warning about the case where
@t{a} has nonnegative
@t{x}
and @t{y} fields and @t{b} has negative
@t{x} and @t{y}
fields, or about the case where
@t{a}'s fields are negative and @t{b}'s
are nonnegative.''  If we ran ESC/Java on
@t{D.java} with @t{-counterexample}
option, the output would include something like:
<blockquote>@t{Counterexample context:}

...

@t{    ((y:7.11).(a@@pre:3.6) < 0)}

@t{    (0 <= (x:7.6).(b:3.9))}

@t{    ((y:7.11).(b:3.9) < 0)}

@t{    (0 <= (x:7.6).(a:3.6<1>))}

...</blockquote>
from which one can infer that ESC/Java happens to be reporting the former
case.  As you may also infer from the excerpt above, the @t{-counterexample}
option is intended mainly for expert users; to give further details about
deciphering counterexample contexts (for example, the meanings of the inflections
@t{@@pre:3.6}
and @t{:3.6<1>} on the field name @t{a}) is beyond the scope
of this manual.

@c =============================================================================
@node Appendix B: Installing and Using ESC/Java2 at your Site, Appendix C: Sources of Unsoundness and Incompleteness ESC/Java, Appendix A: Overview of how ESC/Java Works, Top
@section Appendix B: Installing and Using ESC/Java2 at your Site

The Compaq SRC ESC/Java group maintains a web site at 
@uref{http://research.compaq.com/SRC/esc/}.
The tool may be downloaded from this site for educational and research
use.

After you download the ESC/Java release according to the instructions
on the web site, all files in the release will be in a single directory
(chosen by you) at your site.  We will write ``@emph{escjavaRoot''
}to
denote this directory.

Among the contents of @file{<ESCJava2Root>} are the following files and
subdirectories:
@itemize
@item
@file{<ESCJava2Root>/bin/escjava} (on Unix) or @file{<ESCJava2Root>\bin\escjava.bat}
(on Windows) contains the execution script for ESC/Java.  The web
site includes instructions for setting things up so that a command of the
form ``@t{escjava} [@emph{options}] @emph{sourcefiles}'' will run
this script.

@item
@file{<ESCJava2Root>/doc/man1/escjava.1} contains the Unix @t{man(1)}
page for ESC/Java.

@item
@file{<ESCJava2Root>/doc/escjava.html} contains the man page for
ESC/Java in HTML format.

@item
@file{<ESCJava2Root>/examples/} contains some examples of source
code on which to run ESC/Java, including the @t{Bag} example from
<a href="#0  An illustrative example of using ESC/Java">section
0</a>.  Subdirectories named after sections of this manual contain
examples taken from or pertinent to those sections.

@item
@file{<ESCJava2Root>/lib/specs/} contains @t{.spec} files corresponding
to selected JDK library files.  (@b{Note:}  The specifications
in these @t{.spec} files may not always match the actual semantics
of the corresponding library files;  see <a href="#C.0.10  Class paths and .spec files">section
C.0.10.</a>)
@end itemize
If you have a question, comment, or bug report concerning ESC/Java or this
manual, you should start by checking the FAQ on the ESC/Java web site. 
If the FAQ does not address the issue adequately, you can email the ESC/Java
group at @t{<escjava@@research.compaq.com>}.  You can also
use this address to let us know if you have produced @t{.spec} files
for additional JDK library files and would like to share them.  (@b{Note:
}Restrictions
may apply in distributing annotated or modified versions of Sun's JDK files. 
See the @uref{http://www.sun.com/software/java2/license.html, Sun Community Source License} agreement.

@c =============================================================================
@node Appendix C: Sources of Unsoundness and Incompleteness ESC/Java, References, Appendix B: Installing and Using ESC/Java2 at your Site, Top
@section Appendix C: Sources of Unsoundness and Incompleteness ESC/Java

@menu
* Known sources of unsoundness::  
* Some sources of incompleteness::  
@end menu

@node Known sources of unsoundness, Some sources of incompleteness, Appendix C: Sources of Unsoundness and Incompleteness ESC/Java, Appendix C: Sources of Unsoundness and Incompleteness ESC/Java
@subsection Known sources of unsoundness

An unsoundness is a circumstance that causes ESC/Java to miss an error
that is actually present in the program it is analyzing.  Because
ESC/Java is an extended static checker rather than a program verifier,
some unsoundnesses are incorporated into the checker by design, based on
intentional trade-offs of unsoundness with other properties of the checker,
such as frequency of false alarms (incompleteness), efficiency, etc. 
Continuing experience, and new ideas, may lead to reevaluation of these
trade-offs, with some sources of unsoundness possibly being eliminated
and others possibly being added in future versions of ESC/Java.

In this section, we have attempted to describe, or at least allude to,
all known causes of unsoundness in the current ESC/Java.  If you become
aware of any that we have missed, please bring them to our attention (see
<a href="#Appendix B:  Installing and using ESC/Java at your site">appendix
B</a>).

@menu
* Trusting pragmas::            
* Loops::                       
* Object invariants::           
* Modification targets::        
* The also_modifies and also_requires pragmas::  
* Multiple inheritance::        
* Arithmetic overflow::         
* Ignored exceptional conditions::  
* Constructor leaking::         
* Static initialization::       
* Class paths and .spec files::  
* Shared variables::            
* Initialization of fields declared non_null::  
* String literals::             
* Search limits in Simplify::   
* Integer arithmetic bug in Simplify::  
* Quantifiers and allocation::  
@end menu

@node Trusting pragmas, Loops, Known sources of unsoundness, Known sources of unsoundness
@subsubsection Trusting pragmas

The @t{assume}, @t{axiom}, and @t{nowarn} pragmas allow
the user to introduce assumptions into the checking process.  ESC/Java
trusts them. If the assumptions are invalid, the checking can miss errors. 
Besides the possibility of an @t{assume}, @t{axiom}, or @t{nowarn}
pragma being outright ``wrong,'' there are the following subtleties:
<blockquote>
@itemize
@item
As mentioned in the description of the @t{axiom} pragma (<a href="#2.4.2  axiom pragma">section
2.4.2</a>) and illustrated in an example in <a href="#2.7.2  Examples illustrating race and deadlock checking">section
2.7.2</a>, axioms can mention mutable state.  ESC/Java assumes that
all (heuristically relevant) axioms hold at the start of any routine body
being checked, but does not check that they still hold before each routine
call or at the end of the routine body being checked.

@item
Certain ESC/Java warnings (for example @t{Null} warnings) correspond
to conditions that would result in Java exceptions (for example @t{NullPointerException}). 
If a program is written intentionally to raise and then handle such an
exception, the user might put a @t{nowarn} pragma on the line where
the exception would be raised.  In such a case the current ESC/Java
will not check that there actually is a handler, nor will it check for
any errors that might occur in the handler, or dynamically after execution
of the handler.
</blockquote>

@end itemize

@node Loops, Object invariants, Trusting pragmas, Known sources of unsoundness
@subsubsection Loops

The current ESC/Java does not consider all possible execution paths through
a loop.  It considers only those that execute at most one complete
iteration (plus the test for being finished before the second iteration),
as explained in <a href="#2.4.3  loop_invariant pragma">section 2.4.3</a>. 
This is simple, and avoids the need for loop invariants, but it is unsound.

The user can modify ESC/Java's treatment of loops by using the @t{-loop}
command-line option.  The @t{-loop} option takes an argument
of the form @emph{@t{n}}, @t{@emph{n}.0}, or @t{@emph{n}.5},
where @emph{@t{n}} is a non-negative integer literal.  The argument
specifies the number of loop iterations ESC/Java should consider. 
Suppose, for example, that the program being checked includes the fragment
<blockquote>@t{//@ loop_invariant @emph{E};}

@t{while (@emph{B}) @{}

@t{  @emph{S}}

@t{@}}</blockquote>
If you run ESC/Java with the
@t{-loop
@emph{n}} (or, equivalently,
@t{-loop
@emph{n}.0})
on the command line, it will consider execution paths that include up to
@emph{@t{n}}
executions of
<blockquote>@t{//@ assert @emph{E};      // but
giving a LoopInv warning}

@t{if (!(@emph{B})) break;}

@t{S}</blockquote>
plus one additional execution of @t{assert @emph{E}}.  If you
run ESC/Java with @t{-loop
@emph{n}.5} on the command line, it will
consider execution paths that include up to @emph{@t{n}} executions
of
<blockquote>@t{//@ assert @emph{E};      // but
giving a LoopInv warning}

@t{if (!(@emph{B})) break;}

@t{S}</blockquote>
plus one additional execution of
<blockquote>@t{assert @emph{E};         
// but giving a LoopInv warning}

@t{if (!(B)) break;}</blockquote>
In either case, code following the loop is checked only for execution paths
in which the sequences described above terminate by a @t{break} out
of the loop (including the implicit @t{if (!(@emph{B})) break}), the
throwing of an exception, or the execution of a @t{return} statement. 
ESC/Java will not consider code following the loop for execution paths
that ``fall through'' to the end of the unrollings (for example, by executing
the final @t{if (!(@emph{B})) break} in the unrolling for @t{-loop
1.5} when @emph{@t{B}} evaluates to @t{true}).

The default behavior of ESC/Java is the same as that given by @t{-loop
1.5}.  Larger values of the parameter make ESC/Java's checking
more nearly sound, but not perfectly sound.  Larger values of the
parameter can result in significantly slower checking and increased memory
usage, especially when checking routines that include large loops bodies
and/or nested loops.  Loops that manifestly require many iterations
to terminate normally pose a particular difficulty.  Suppose, for
example, that the program being checked contains a fragment of the form
<blockquote>@t{for (int i = 0; i < 1000; i++) {@emph{S1}}}

@emph{@t{S2}}</blockquote>
where @emph{@t{S1}} never exits abruptly.  Then the ESC/Java
will never consider executions that reach @emph{@t{S2}} unless it
is run with a @t{-loop} option with an argument greater than 1000,
which would almost certainly result in impractically large verification
conditions or impractically slow checking.

@b{Fine point}

In the unrollings described above, execution of a @t{break} causes
normal completion of the entire loop, and execution of @t{continue}
causes normal completion of the current unrolled copy of @emph{@t{S}.}

@node Object invariants, Modification targets, Loops, Known sources of unsoundness
@subsubsection Object invariants

When checking the implementation of a method, ESC/Java assumes initially
that all allocated objects satisfy their invariants.  But when checking
a call to a method, ESC/Java imposes a weaker condition on the caller:
all actual parameters of the call and all static fields that are in
scope are shown to satisfy their invariants, but not every object in
existence.  Since more is assumed than is proved, this is unsound.  It
seems difficult to design a sound discipline that is not impractically
strict; the current rule is a compromise that seems useful.
@xref{[LS97], LS97} for a more detailed discussion of the interaction
of object invariants with scoping.

Another source of unsoundness in the checking of object invariants arises
because, as we mentioned in <a href="#2.4.1  invariant pragma">section
2.4.1</a>, when ESC/Java checks the body of any routine @emph{@t{R}},
it does not consider all invariants but only a heuristically chosen ``relevant''
subset.  If an invariant is deemed irrelevant during the checking
of a routine that calls @emph{@t{R}}, but deemed relevant during the
checking of @emph{@t{R}}, then the invariant will not be checked (even
for parameters) at the call site, but will nonetheless be assumed to hold
initially during the verification of @emph{@t{R}}.  (If ESC/Java
cautioned the user against unenforceable object invariants of the sort
mentioned in the fine points of <a href="#2.4.1  invariant pragma">section
2.4.1,</a> the situation would be partially, but not entirely, ameliorated.) 
Conversely, ESC/Java might consider some invariant to be irrelevant to
@emph{@t{R}},
but relevant to a caller.  In this case, ESC/Java will not check that
the body of @emph{@t{R}} preserves the invariant, but will nonetheless
assume, while checking the caller, that the invariant is preserved by the
call.

@node Modification targets, The also_modifies and also_requires pragmas, Object invariants, Known sources of unsoundness
@subsubsection Modification targets

When reasoning about a call to a routine, ESC/Java assumes that the routine
modifies only its specified modification targets (as given in @t{modifies}
and/or @t{also_modifies} pragmas modifying the routine and any routines
it overrides).  But when checking the implementation of a method,
the current ESC/Java doesn't check that the implementation modifies only
the specified targets.  Thus
@t{modifies} and @t{also_modifies}
pragmas are purely a way of describing the programmer's intent in the form
that the checker can use as an assumption.

@node The also_modifies and also_requires pragmas, Multiple inheritance, Modification targets, Known sources of unsoundness
@subsubsection The @t{also_modifies} and @t{also_requires} pragmas

The @t{also_modifies} and @t{also_requires} pragma are unsound
because they allow an overriding method to have a weaker specification
than the method it overrides.

Suppose that a method @t{U.m} overrides a method @t{T.m},
and suppose that some method @t{r} contains a call of the form @t{@emph{E}.m(}...@t{)}
where @emph{@t{E}} has static type @t{T} but might evaluate at
runtime to a value of type @t{U}.  While checking the code containing
the call ESC/Java will use the specification of @t{T.m}, but the actual
call (even in the absence of other sources of unsoundness) might only meet
the weaker semantics specified for @t{U.m}.  In particular:
@itemize
@item
If @t{U.m} is declared with an @t{also_modifies} pragma, the
call might modify parts of the state that are specified as modification
targets of @t{U.m} but not of@t{ T.m}, but ESC/Java will check
the implementation of @t{r} under the assumption that the call modifies
only the targets specified for @t{T.m}.  This would be a source
of unsoundness even if ESC/Java guaranteed that @t{U.m} modifies only
its specified modification targets (which it doesn't, as just mentioned
in
<a href="#C.0.3  Modification targets">section C.0.3</a>).  Rustan
Leino has designed a programming methodology
that would avoid this unsoundness, but in the current ESC/Java we have
decided to leave it to the programmer to use @t{also_modifies} with
care so as to avoid introducing the unsoundnesses described in Leino's
paper (@pxref{[Leino98]}).

@item
If @t{U.m} is declared with an @t{also_requires} pragma, then
ESC/Java will use the preconditions specified  in the @t{also_requires}
pragma when it checks the implementation of @t{U.m}, but will not
enforce those preconditions at the call @t{@emph{E}.m(}...@t{)}.
@end itemize


@node Multiple inheritance, Arithmetic overflow, The also_modifies and also_requires pragmas, Known sources of unsoundness
@subsubsection Multiple inheritance

ESC/Java treats multiple inheritance of preconditions and modification
targets unsoundly.

Suppose that a method @t{C.m} inherits from @t{A.m} and @t{B.m},
where
@t{C} is a class, and either @t{A} and @t{B} are both
be interfaces that @t{C} implements, or one is an interface that @t{C}
implements and the other is a class that @t{C} extends; and suppose
that some method @t{r} contains a call of the form @t{@emph{E}.m(}...@t{)},
where @emph{@t{E}} has static type @t{A} but might evaluate at
runtime to a value of type @t{C}.

When checking the body of @t{C.m}, ESC/Java will assume that all
preconditions for @t{m} declared in (or inherited by) either @t{A}
or @t{B}, hold initially.  On the other hand, when checking the
call @t{@emph{E}.m(}...@t{)} in the body of @t{r}, where
expression @emph{@t{E}} has static type@t{ A}, ESC/Java will
only check the preconditions of @t{A.m}, and not those of @t{B.m}.

Similarly, when ESC/Java checks code after the call, it will assume
that the call modifies at most the modification targets specified for @t{A.m}. 
This would be a source of unsoundness even if ESC/Java checked that the
body of @t{C.m} modified only its declared modification targets.

@node Arithmetic overflow, Ignored exceptional conditions, Multiple inheritance, Known sources of unsoundness
@subsubsection Arithmetic overflow

ESC/Java reasons about integer arithmetic as though machine integers were
of unlimited magnitude.  This is both an unsoundness and an incompleteness,
but it simplifies the checker and reduces the annotation burden for the
user, while still allowing ESC/Java to catch many common errors.

The Simplify theorem prover used by ESC/Java (see <a href="#Appendix A:  Overview of how ESC/Java works">appendix
A</a>) includes a decision procedure for linear rational arithmetic based
on the simplex algorithm.  If integer operations in Simplify's simplex
module result in overflows, they will silently be converted to incorrect
results.  This is a potential source both of unsoundness and of incompleteness
(see also <a href="#C.1.0  Incompleteness of the theorem-prover">section
C.1.0</a>).

@node Ignored exceptional conditions, Constructor leaking, Arithmetic overflow, Known sources of unsoundness
@subsubsection Ignored exceptional conditions

ESC/Java checks for specific conditions that could give rise to a @t{NullPointerException},@t{
IndexOutOfBoundsException}, @t{ClassCastException},@t{ ArrayStoreException},@t{ArithmeticException},
or @t{NegativeArraySizeException}, and warns of those conditions as
potential errors. It ignores the all other cases where instances of unchecked
exception classes (for example, @t{OutOfMemoryError},
@t{StackOverflowError},
@t{ThreadDeath},
@t{SecurityException})
[@emph{JLS}, 11.2, 20.22] might be thrown either synchronously or asynchronously,
except by explicit
@t{throw} statements in a routine body being checked
or in accordance with the throws clauses of routines called by a routine
being checked.

@node Constructor leaking, Static initialization, Ignored exceptional conditions, Known sources of unsoundness
@subsubsection Constructor leaking

There are a number of ways in which a constructor can make the new object
under construction available in contexts where its instance invariants
are assumed to hold, but without actually having established those instance
invariants.  For example:
@itemize
@item
A constructor may terminate abruptly by throwing @t{this} without
establishing object invariants for @t{this}.

@item
A supertype constructor may store @t{this} into a field of a global
variable, and then return to the subtype constructor, which subsequently
terminates abnormally.

@item
When a constructor of a class @emph{@t{T}} is called as a supertype
constructor from a constructor of a subtype @emph{@t{S}}, the supertype
constructor may establish the instance invariants of @emph{@t{T}}
for @t{this}@emph{, } then perform a method call @t{this.@emph{m}(}...@t{)}
that dynamically dispatches to @t{@emph{S}.m}.  However, the
correctness of the body of @t{@emph{S}.m} might depend on instance
invariants declared in @emph{@t{S}} and not established at the call
site.
@end itemize
For a more detailed examination of the constructor leaking problem,
@xref{[LS97], LS97}.

In addition to the problems with invariants described above, constructor
leaking can result in unsound checking of race conditions.  When checking
a constructor body ESC/Java does not require that any lock be held in order
to accesses a field of @t{this}, even if the field is declared with
at @t{monitored_by} or @t{monitored} (<a href="#2.7.1  monitored pragma">section
2.7.1</a>) pragma.  The reason is that ESC/Java assumes that no other
thread yet has access to @t{this} and thus that no actual race can
result.  If this assumption is false, for example if the constructor
stores @t{this} into a globally-accessible data structure from which
another thread can read it, unsound checking--in the form of undetected
race conditions--could result.)

@node Static initialization, Class paths and .spec files, Constructor leaking, Known sources of unsoundness
@subsubsection Static initialization

The current ESC/Java does not perform extended static checking of static
initializers [@emph{JLS}, 8.5] and initializers for @t{static} fields. 
It neither checks for the possibility that they do not give rise to errors
such as null dereferences, nor does it check that they establish or maintain
static or instance invariants.

@node Class paths and .spec files, Shared variables, Static initialization, Known sources of unsoundness
@subsubsection Class paths and @t{.spec files}

Java (@t{javac(5), java(5)}) and ESC/Java (@t{escjava(1)}), when
run with the same class path, make different choices between @t{.spec},
@t{.java},
and
@t{.class} files.  The current ESC/Java doesn't check that
the contents of the file it chooses are related to the contents of the
file
@t{javac(5)} would choose.  Consider, for example, a scenario
where a file @t{Foo.java} uses a class @t{Bar}, and where both
a @t{Bar.java} and a @t{Bar.spec} file can be found on the class
path.  In response to the command @t{escjava Foo.java}, ESC/Java
will check the routine bodies in @t{Foo.java} under the assumption
that calls to methods of @t{Bar} have the semantics specified in @t{Bar.spec}
(ignoring the file @t{Bar.java}).  In response to the command
@t{escjava
Bar.java}, ESC/Java will check the method bodies in @t{Bar.java}
against the specifications in @t{Bar.java} (ignoring the file @t{Bar.spec}).
In neither case is there any checking that either the specifications or
the bodies of routines in @t{Bar.java} have any connection to the
specifications of corresponding routines in
@t{Bar.spec}, or even
that @t{Bar.java} and @t{Bar.spec} declare routines with the
same names and signatures.

Note in particular that the specifications in the @t{.spec} files
available for download via the ESC/Java web site (see appendix B) may disagree
agree with the actual semantics of the corresponding JDK classes and interfaces,
for any of a variety of reasons, including but not limited to the following:
@itemize
@item
The annotations in the @t{.spec} files were added mostly in reaction
to specific situations encountered by members of the ESC/Java team in our
use of ESC/Java, rather than as part of any systematic effort to specify
any set of routines completely (or even as completely as practical given
the limitations of the ESC/Java annotation language).

@item
There may be ``version skew'' between the @t{.spec} files you download
and the JDK files in use at your site.

@item
The @t{.spec} files may have intentional semantic differences from
the corresponding JDK files for methodological reasons (see, for example,
the discussion of unchecked exceptions in <a href="#4.5  Exception warning">section
4.5</a>).

@item
The @t{.spec} files, the JDK files, or both may simply contain errors.
@end itemize
(See also the <a href="#Limitation of liability:">disclaimers</a> near
the beginning of this manual.)

@node Shared variables, Initialization of fields declared non_null, Class paths and .spec files, Known sources of unsoundness
@subsubsection Shared variables

ESC/Java depends on programmers to supply
@t{monitored} and @t{monitored_by}
pragmas telling which locks protect which shared variables.  In the
absence of such annotations, ESC/Java will not produce a warning when a
routine might access a variable without holding the appropriate lock. 
Even when the user does specify which locks protect which variables, there
is another potential source of unsoundness:  ESC/Java assumes that
the value of a shared variable stays unchanged if a routine releases and
then reacquires the lock that protects it, ignoring the possibility that
some other thread might have acquired the lock and modified the variable
in the interim.

@node Initialization of fields declared non_null, String literals, Shared variables, Known sources of unsoundness
@subsubsection Initialization of fields declared @t{non_null}

There is an unsoundness in ESC/Java's checking that constructors assign
non-null values to fields declared @t{non_null}.  Consider the
following program:
<blockquote>@t{ 1:  class C @{}

@t{ 2:   /*@ non_null */ Object
f;}

@t{ 3:}

@t{ 4:    C() @{}

@t{ 5:      
m();}

@t{ 6:    @}}

@t{ 7:}

@t{ 8:   //@ modifies this.f;}

@t{ 9:    void m() @{}

@t{       }...

@t{       @}}

@t{     @}}</blockquote>
When checking the implementation of the constructor for @t{C}, ESC/Java
will assume (based solely on the pragmas on lines 2 and 8) that the method
@t{m}
returns with @t{this.f} set to a non-null value.  While checking
the body of @t{m}, ESC/Java will check that any assignments to @t{f}
indeed assign non-null values.  However, if the body of @t{m}
can complete normally without assigning to @t{this.f}, then ESC/Java's
assumption that @t{this.f} is always non-null after line 6 will be
unsound.

@node String literals, Search limits in Simplify, Initialization of fields declared non_null, Known sources of unsoundness
@subsubsection String literals

Java's treatment of string concatenation (see [@emph{JLS}, 3.10.5]) is
not accurately modeled by ESC/Java.  This is a source both of unsoundness
and of incompleteness.

@node Search limits in Simplify, Integer arithmetic bug in Simplify, String literals, Known sources of unsoundness
@subsubsection Search limits in Simplify

If Simplify cannot find a proof or a (potential) counterexample for the
verification condition (see <a href="#Appendix A:  Overview of how ESC/Java works">appendix
A</a>) for a routine within a set time limit, then ESC/Java issues no warnings
for the method, even though it might have issued a warning if given a longer
time limit.  If Simplify reaches its time limit after reporting one
or more (potential) counterexamples, then ESC/Java will issue one or more
warnings, but perhaps not so many warnings as it would have issued if the
time limit were larger.  You can set the time limit to @emph{@t{n}}
seconds, where @emph{@t{n}} is a positive integer, by setting the
environment variable @t{PROVER_KILL_TIME} to @emph{@t{n}}. 
If @t{PROVER_KILL_TIME} is not set, ESC/Java sets it to 300 before
invoking Simplify.

There is also a bound on the number of counterexamples that Simplify
will report for any conjecture, and thus on the number of warnings that
ESC/Java will issue for any routine.  You can set the bound to a positive
integer
@emph{@t{n}} setting the environment variable @t{PROVER_CC_LIMIT}
to @emph{@t{n}}.  If @t{PROVER_CC_LIMIT} is not set, ESC/Java
sets it to 10 before invoking Simplify.

@node Integer arithmetic bug in Simplify, Quantifiers and allocation, Search limits in Simplify, Known sources of unsoundness
@subsubsection Integer arithmetic bug in Simplify

Simplify includes a complete decision procedure for linear rational arithmetic
and some heuristics for integer arithmetic.  We have recently learned
that one of the procedures implementing the integer arithmetic heuristics
is buggy in a way that leads to unsoundness.  This unsoundness in
not one that we intended to design into the checker, and we are investigating
the problem further.  (For an unrelated source of unsoundness the
discussion of arithmetic overflow in
<a href="#C.0.6  Arithmetic overflow">section
C.0.6</a>).

@node Quantifiers and allocation,  , Integer arithmetic bug in Simplify, Known sources of unsoundness
@subsubsection Quantifiers and allocation

When @emph{@t{T}} is a reference type, specification expressions of
the forms @t{(\forall @emph{T t}; }...@t{)} and @t{(\exists
@emph{T
t}; }...@t{)} (sections <a href="#3.2.10  \forall">3.2.10</a>,
<a href="#3.2.11  \exists">3.2.11</a>)
quantify over allocated instances of @emph{@t{T}}.  If a method
allocates new objects but is not annotated with a postcondition mentioning
containing an occurrence of @t{\fresh} (<a href="#3.2.13  \fresh">section
3.2.13</a>) or @t{\old} (<a href="#3.2.15  \old">section 3.2.15</a>),
ESC/Java may infer (unsoundly) that some property holds for all allocated
objects after completion of a call, when the property may in fact not hold
for objects allocated during the call.  This unsoundness results from
a performance optimization and seems rarely to result in problems (missing
warnings) in practice.

@node Some sources of incompleteness,  , Known sources of unsoundness, Appendix C: Sources of Unsoundness and Incompleteness ESC/Java
@subsection Some sources of incompleteness

An incompleteness is a circumstance that causes ESC/Java to warn of an
potential error, when it is in fact impossible for that error to occur
in any run of the program it is analyzing.  Because ESC/Java attempts
to check program properties that are, in general, undecidable, some degree
of incompleteness in inevitable.  In addition, ESC/Java's implementers
have been willing to accept some evitable incompleteness in order to improve
performance and keep the tool simple.  We list here some principal
sources of incompleteness in ESC/Java, but we do not attempt a complete
enumeration of sources of incompleteness.

@menu
* Incompleteness of the theorem-prover::  
* Incomplete modeling of Java semantics::  
* Modular checking::            
@end menu

@node Incompleteness of the theorem-prover, Incomplete modeling of Java semantics, Some sources of incompleteness, Some sources of incompleteness
@subsubsection Incompleteness of the theorem-prover

The verification conditions that ESC/Java give to the Simplify theorem
prover are in a language that includes first-order predicate calculus (with
equality and uninterpreted function symbols) along with some (interpreted)
function symbols of arithmetic.

Since the true theory of arithmetic is undecidable, Simplify is necessarily
incomplete.  In fact, the incompleteness of Simplify's treatment of
arithmetic goes well beyond that necessitated by G&ouml;del's Incompleteness
Theorem.  In particular:
@itemize
@item
Simplify has no built-in semantics for multiplication, except by constants.

@item
Simplify doesn't support mathematical induction.
@end itemize
Also, first-order predicate calculus (FOPC) is only semidecidable--that
is, all valid formulas of FOPC are provable, but any procedure that can
prove all valid formulas must loop forever on some invalid ones. 
But it is not useful for Simplify to loop forever, since ESC/Java issues
warnings only when Simplify reports (potential) counterexamples. 
Therefore Simplify will sometimes report a (potential) counterexample
@emph{@t{C}},
even when it is possible that more work could serve to refute @emph{@t{C}},
and even to prove the entire verification condition.  More particularly:
@itemize
@item
The way Simplify makes use of a universally quantified formula, say @t{(\forall
@emph{T
t}<sub>1</sub>@emph{, }}@emph{...@t{, t}}@t{<sub>n</sub>;
@emph{B})},
is by selectively instantiating the body @emph{@t{B}} with substitutions
for @t{@emph{t}<sub>1</sub>}@emph{,@t{ }...,@t{ t}}@t{<sub>n</sub>}
determined by matching certain ``triggering patterns'' against a set of
terms already under consideration.  In some cases, the triggering
may be overly restrictive, preventing Simplify from finding instances that
are actually needed for the proof.

@item
After Simplify instantiates the body of a universally-quantified formula,
the terms in the instantiated body may match the triggering patterns of
other universally quantified formulas, triggering instantiations of their
bodies, and so on.  To avoid infinite looping Simplify bounds the
depth to which such sequences of matching may cascade.  In some cases,
Simplify may report a potential counterexample that could in fact have
been refuted by deeper matching.
@end itemize


@node Incomplete modeling of Java semantics, Modular checking, Incompleteness of the theorem-prover, Some sources of incompleteness
@subsubsection Incomplete modeling of Java semantics

Incomplete modeling of Java semantics</h4>
Ideally, the verification condition for a routine @emph{@t{R}} would
be a formula that was valid if and only if @emph{@t{R}} were free
of the kinds of potential errors ESC/Java aims to detect.  In fact,
the verification conditions that ESC/Java generates fall short of modeling
the full semantics of Java in many ways.  For example:
@itemize
@item
ESC/Java's built-in semantics for floating-point operations are extremely
weak--not strong enough to  prove @t{1.0 + 1.0 == 2.0} or even
@t{1.0
!= 2.0}.

@item
ESC/Java's built-in semantics for strings are quite weak--strong enough
to prove @t{"Hello world" != null}, but not strong enough to prove
the assertion @t{s == 'l'} after the assignment @t{c = "Hello world".charAt(3)}.

@item
ESC/Java treats exceptions thrown by the runtime system as errors, even
in programs that include code to catch them.

@item
The ESC/Java release includes @t{.spec} files for only a few JDK libraries,
and even the @t{.spec} files supplied do not fully capture the informal
semantics of the specified routines (see also <a href="#C.0.10  Class paths and .spec files">section
C.0.10</a>).

@item
According to rules of the Java type system, if neither of two distinct
classes @emph{@t{S}} and @emph{@t{T}} is a subtype of the other,
then @emph{@t{S}} and @emph{@t{T}} have no non-null instances
in common.  ESC/Java's modeling of the Java type system is good enough
to enforce this disjointness for explicitly-named types, but not for all
types (such as the dynamic element types of array variables).

@item
As mentioned in <a href="#C.0.6  Arithmetic overflow">section C.0.6</a>,
the Simplify theorem prover may exhibit unsoundness due to integer overflow. 
In order to reduce the likelihood of overflow occurring in the prover,
ESC/Java treats all integer literals of absolute magnitude greater than
1000000 as symbolic values whose relative ordering is known but whose exact
values are unknown.  Thus, ESC/Java can prove the assertions @t{2+2
== 4} and @t{2000000 < 4000000} but not @t{2000000+2000000
= 4000000}.

@item
While ESC/Java recognizes the Java 1.2 expressions of the form
@t{@emph{T}.class}, where @emph{@t{T}} is a Java @emph{Type}
[@emph{JLS}, 19.4], ESC/Java's semantics for such expressions is
extremely limited.  For example, ESC/Java can determine that
@t{int.class} is a non-null instance of @t{java.lang.Class}, but not
that it is distinct from @t{short.class}, or even that it is equal to
@t{Integer.TYPE}.  The implementers of ESC/Java currently have no plans
to significantly strengthen its semantics for @t{java.lang.Class} in the
absence of clear need.  (In particular, we have no plans for creating
any connection between Java's Reflection API (@pxref{[Reflection]}) and
ESC/Java's specification type @t{\TYPE}.)
@end itemize

@node Modular checking,  , Incomplete modeling of Java semantics, Some sources of incompleteness
@subsubsection Modular checking

ESC/Java's use of modular checking modular checking causes it to miss some
inferences that might be possible through whole program analysis.
@itemize
@item
When translating a method call @t{@emph{E}.@emph{m}(}...@t{),}
ESC/Java uses the spec of @emph{@t{m}} for the static type of @emph{@t{E}},
even if it is provable that the dynamic type of @emph{@t{E}} at the
call site will always be a subtype that overrides @emph{@t{m}} with
a stronger spec.

@item
ESC/Java makes no attempt to infer method specifications.  (However,
see @ref{[FL00]} and @ref{[FJLxx]}.)
@end itemize

@c =============================================================================
@node References,  , Appendix C: Sources of Unsoundness and Incompleteness ESC/Java, Top
@section References

@node [DLNS98], Copying, Top, Top
[DLNS98] David L. Detlefs, K. Rustan M. Leino, Greg Nelson, and James
B. Saxe, ``Extended Static Checking'', Compaq SRC Research Report 159,
December 1998.  Available on the web at
@uref{http://gatekeeper.dec.com/pub/DEC/SRC/research-reports/abstracts/src-rr-159.html}
[Cited in the <a href="#Acknowledgments">acknowledgments</a>.]

@node [FJLxx], Copying, Top, Top
[FJLxx] Cormac Flanagan, Rajeev Joshi, and K. Rustan M. Leino,
``Annotation inference for modular checkers'', to appear in
@emph{Information Processing Letters}.  [Cited in sections <a href="#5.0
-suggest">5.0</a> and <a href="#C.1.2 Modular checking">C.1.2</a>.]

@node [FL00], Copying, Top, Top
[FL00] Cormac Flanagan and K. Rustan M. Leino, ``Houdini, an annotation
assistant for ESC/Java'', Compaq SRC Technical Note 2000-003, September
2000.  Available on the web at
http://gatekeeper.dec.com/pub/DEC/SRC/technical-notes/abstracts/src-tn-2000-003.html.
[Cited in sections <a href="#5.0 -suggest">5.0</a> and <a href="#C.1.2
Modular checking">C.1.2</a>.]

@node [ICS], Copying, Top, Top
[ICS] ``Inner Classes Specification'', Sun Microsystems, on the web at
@uref{http://java.sun.com/products/jdk/1.1/docs/guide/innerclasses/spec/innerclasses.doc.html}
[Cited in <a href="#6 Java language support and limitations">section
6</a>.]

@node [JLS1], Copying, Top, Top
[JLS1] James Gosling, Bill Joy, and Guy Steele, @emph{The Java Language
Specification}, Addison-Wesley, Reading, Massachusetts, 1996.  Also
available on the web at @uref{http://java.sun.com/docs/books/jls/}.
[Cited in places too numerous to mention.]

@node [JLS2]
[JLS2] James Gosling, Bill Joy, Guy Steele, and Gilad Bracha, @emph{The
Java Lanaguage Specification, second edition}, Addison-Wesley, Reading,
Massachusetts, 2000.  Also available on the web at
@uref{http://java.sun.com/docs/books/jls/}.  [Cited in places too
numerous to mention.]

@node [JLS3]
[JLS3] James Gosling, Bill Joy, Guy Steele, and Gilad Bracha, @emph{The
Java Lanaguage Specification, third edition}, Addison-Wesley, Reading,
Massachusetts, 2005.  Also available on the web at
@uref{http://java.sun.com/docs/books/jls/}.  [Cited in places too
numerous to mention.]

@node [LBR99], Copying, Top, Top
[LBR99] Gary T. Leavens, Albert L. Baker, and Clyde Ruby, ``JML: A
notation for detailed design'', in Haim Kilov, Bernhard Rumpe, and Ian
Simmonds, editors, @emph{Behavioral Specifications of Businesses and
Systems}, pages 175-188, Kluwer Academic Publishers, Boston, 1999.
[Cited in the <a href="#Preface">preface</a>.]

@node [LBR00], Copying, Top, Top
[LBR00] Gary T. Leavens, Albert L. Baker, and Clyde Ruby, ``Preliminary
design of JML: A behavioral interface specification language for Java'',
Technical Report 98-06j, Iowa State University, Department of Computer
Science, May 2000.  Available on the web at
@uref{http://www.jmlspecs.org/}.  [Cited in the <a
href="#Preface">preface</a>.]

@node [Leino98], Copying, Top, Top
[Leino98] Rustan M. Leino, ``Data groups: Specifying the modification of
extended state'', in @emph{Proceedings of the 1998 ACM SIGPLAN
Conference on Object-Oriented Programming, Systems, Languages, and
Applications} (OOPSLA '98), volume 33(10) of @emph{ACM SIGPLAN Notices},
pages 144-153, October 1998.  Available on the web
(@uref{http://www.research.digital.com/SRC/publications/copyright/acm98.html,
by permission of the ACM}) in PostScript at
@uref{ftp://ftp.digital.com/pub/DEC/SRC/publications/rustan/krml83-oopsla98.ps}
and in PDF at
@uref{ftp://ftp.digital.com/pub/DEC/SRC/publications/rustan/krml83-oopsla98.pdf}.
[Cited in sections <a href="#2.3.8 also_modifies pragma">2.3.8</a> and
<a href="#C.0.4 The also_modifies and also_requires pragmas">C.0.4</a>.]

@node [LLPRJ00], Copying, Top, Top
[LLPRJ00] Gary T. Leavens, K. Rustan M.  Leino, Erik Poll, Clyde Ruby,
and Bart Jacobs, ``JML: notations and tools supporting detailed design
in Java'', to appear in @emph{Proceedings of the 2000 ACM SIGPLAN
Conference on Object-Oriented Programming, Systems, Languages, and
Applications} (OOPSLA '00).  Also available as Department of Computer
Science, Iowa State University, TR #00-15, August 2000, on the web in
PDF at <a
href="ftp://ftp.cs.iastate.edu/pub/techreports/TR00-15/TR.pdf">ftp://ftp.cs.iastate.edu/pub/techreports/TR00-15/TR.pdf</a>
and in PostScript at <a
href="ftp://ftp.cs.iastate.edu/pub/techreports/TR00-15/TR.ps.gz">ftp://ftp.cs.iastate.edu/pub/techreports/TR00-15/TR.ps.gz</a>.
[Cited in the <a href="#Preface">preface</a>.]

@node [LSS99], Copying, Top, Top
[LSS99] K. Rustan M. Leino, James B. Saxe, and Raymie Stata, ``Checking
Java programs via guarded commands'', in @emph{Formal Techniques for
Java Programs}, workshop proceedings, Bart Jacobs, Gary T. Leavens,
Peter M&uuml;ller, and Arnd Poetzsch-Heffter, editors, Technical Report
251, Fernuniversit&auml;t Hagen, 1999. Also available as Compaq SRC
Technical Note 1999-002, on the web at
@uref{http://gatekeeper.dec.com/pub/DEC/SRC/technical-notes/abstracts/src-tn-1999-002.html}.
[Cited in <a href="#2.1.2 assume pragma">section 2.1.2</a>.]

@node [LS97], Copying, Top, Top
[LS97] K. Rustan M. Leino and Raymie Stata, ``Checking Object
Invariants'', Compaq SRC Technical Note 1997-007, January 1997.
Available on the web at
@uref{http://gatekeeper.dec.com/pub/DEC/SRC/technical-notes/abstracts/src-tn-1997-007.html}.
[Cited in sections <a href="#2.3.4 exsures pragma">2.3.4</a>, <a
href="#2.4.1 invariant pragma">2.4.1</a>, and <a href="#C.0.2 Object
invariants">C.0.2</a>.]

@node [LS99], Copying, Top, Top
[LS99] K. Rustan M. Leino and Raymie Stata, ``Virginity: A contribution
to the specification of object-oriented software", @emph{Information
Processing Letters}, 70 (1999), pages 99-105.  [Cited in (fine points
of) <a href="#3.2.17 owner">section 3.2.17</a>.]

@node [Reflection], Copying, Top, Top
[Reflection] ``Reflection'' (section of JDK documentation), Sun
Microsystems, on the web at
@uref{http://java.sun.com/products/jdk/1.1/docs/guide/reflection/}.
[Cited in <a href="#C.1.1 Incomplete modeling of Java semantics">section
C.1.1</a>.]

@node [SLS00], Copying, Top, Top
[SLS00] Silvija Seres, with K. Rustan M.  Leino and James B. Saxe,
``ESC/Java Quick Reference'', Compaq SRC Technical Note 2000-004,
October 2000.  Available on the web at
@uref{http://gatekeeper.dec.com/pub/DEC/SRC/technical-notes/abstracts/src-tn-2000-004.html}.
[Cited in the <a href="#Preface">preface</a> and <a
href="#Acknowledgments">acknowledgments</a>.]

@c =============================================================================
@node Copying, Index, Top, Top
@appendix Copying

@cindex Copying

@insertcopying

@c %**end of body
@c =============================================================================

@c =============================================================================
@c %**end of document

@node Index,  , Copying, Top
@unnumbered Index

@printindex cp

@bye
