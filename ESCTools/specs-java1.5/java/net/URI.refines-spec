// @(#)$Id: URI.refines-spec 1287 2005-03-01 02:58:57Z cok $

// Copyright (C) 2004 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.


// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

package java.net;

import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CoderResult;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.CharacterCodingException;
import java.lang.Character;
import java.lang.NullPointerException;

/** JML's specification of java.net.URI.
 *  [[[This specification is incomplete.]]]
 * @author Katie Becker
 * @author Gary T. Leavens
 */
public final class URI implements Comparable, Serializable {

    // CLASS SPECIFICATIONS

    /*@  public model String _scheme, _ssp, _fragment, _userInfo, _host, _path,
      @                      _query, _authority;
      @  public model int _port;  
      @*/
      
    // METHODS AND CONSTRUCTORS

    /*@
      @ 
      @*/
    //@ pure
    public URI(String str) throws URISyntaxException;

    /*@  public behavior
      @    ensures this._scheme.equals(scheme)
      @         && this._userInfo.equals(userInfo) 
      @         && this._host.equals(host) 
      @         && this._port==port
      @         && this._path.equals(path)
      @         && this._query.equals(query) 
      @         && this._fragment.equals(fragment);
      @    ensures this._authority==null
      @         && this._ssp==null;
      @    ensures (scheme==null) ==>    // FIXME - ensuring a condition on the parameters?
      @              (host.startsWith("/") || host.equals(""));
      @    signals (URISyntaxException);
      @*/
    //@ pure
    public URI(String scheme, String userInfo, String host, int port,
               String path, String query, String fragment)
        throws URISyntaxException;

    /*@  public behavior
      @    ensures this._scheme.equals(scheme)
      @         && this._authority.equals(authority) 
      @         && this._path.equals(path)
      @         && this._query.equals(query)
      @         && this._fragment.equals(fragment);
      @    ensures this._userInfo==null 
      @         && this._host==null 
      @         && _port==-1
      @         && this._ssp==null;
      @    ensures (scheme==null) ==>  // FIXME - ensuring a condition on the parameters?
      @              (path.startsWith("/") || path.equals(""));
      @    signals (URISyntaxException);
      @*/
    //@ pure
    public URI(String scheme, String authority, String path, String query,
               String fragment)
        throws URISyntaxException;

    /*@  public behavior
      @    ensures this._scheme.equals(scheme)
      @         && this._host.equals(host) 
      @         && this._path.equals(path)
      @         && this._fragment.equals(fragment);
      @    ensures this._userInfo==null
      @         && this._authority==null
      @         && _port==-1 
      @         && this._query==null
      @         && this._ssp==null;
      @    ensures (scheme==null) ==>   // FIXME???
      @               (path.startsWith("/") || path.equals(""));
      @    signals (URISyntaxException);
      @*/
    //@ pure
    public URI(String scheme, String host, String path, String fragment)
        throws URISyntaxException;

    /*@  public behavior
      @    ensures this._scheme.equals(scheme)
      @         && this._ssp.equals(ssp) 
      @         && this._fragment.equals(fragment);
      @    ensures this._userInfo==null
      @         && this._host==null
      @         && _port==-1 
      @         && this._authority==null
      @         && this._query==null
      @         && this._ssp==null;
      @    signals (URISyntaxException);
      @*/
    //@ pure
    public URI(String scheme, String ssp, String fragment)
        throws URISyntaxException;

    /*@
      @ 
      @*/
    //@ pure
    public static URI create(String str);

    /*@  public normal_behavior
      @    requires _authority==null;
      @    ensures \result.equals(this);
      @ also public behavior
      @    requires (_authority!=null);
      @     
      @    signals (URISyntaxException);
      @*/
    public /*@ pure @*/ URI parseServerAuthority() throws URISyntaxException;

    /*@
      @ 
      @*/
    public URI normalize();

    /*@
      @ 
      @*/
    public URI resolve(URI uri);

    /*@
      @ 
      @*/
    public URI resolve(String str);

    /*@
      @ 
      @*/
    public URI relativize(URI uri);

    /*@
      @ 
      @*/
    public URL toURL() throws MalformedURLException;

    /*@
      @ 
      @*/
    //@ pure
    public String getScheme();

    /*@
      @ 
      @*/
    //@ pure
    public boolean isAbsolute();

    /*@
      @ 
      @*/
    //@ pure
    public boolean isOpaque();

    /*@
      @ 
      @*/
    //@ pure
    public String getRawSchemeSpecificPart();

    /*@
      @ 
      @*/
    //@ pure
    public String getSchemeSpecificPart();

    /*@
      @ 
      @*/
    //@ pure
    public String getRawAuthority();

    /*@
      @ 
      @*/
    //@ pure
    public String getAuthority();

    /*@
      @ 
      @*/
    //@ pure
    public String getRawUserInfo();

    /*@
      @ 
      @*/
    //@ pure
    public String getUserInfo();

    /*@
      @ 
      @*/
    //@ pure
    public String getHost();

    /*@
      @ 
      @*/
    //@ pure
    public int getPort();

    /*@
      @ 
      @*/
    //@ pure
    public String getRawPath();

    /*@
      @ 
      @*/
    //@ pure
    public String getPath();

    /*@
      @ 
      @*/
    //@ pure
    public String getRawQuery();

    /*@
      @ 
      @*/
    //@ pure
    public String getQuery();

    /*@
      @ 
      @*/
    //@ pure
    public String getRawFragment();

    /*@
      @ 
      @*/
    //@ pure
    public String getFragment();

    /*@
      @ 
      @*/
    //@ pure
    public boolean equals(Object ob);

    /*@
      @ 
      @*/
    public int hashCode();

    /*@
      @ 
      @*/
    public int compareTo(Object ob);

    /*@
      @ 
      @*/
    public String toString();

    /*@
      @ 
      @*/
    public String toASCIIString();

    // INNER CLASSES

}

