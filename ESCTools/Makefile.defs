## This file is part of the 2003 Revision of EscJava
## author: David Cok - 1 May 2003
## author: Joe Kiniry
##
## This file contains variable definitions common to the Makefiles in
## various subdirectories of the ESC tools.  These should not need to
## be modified by the user (those variables are in Makefile.local).
## Many of these variables are initialized with ?= so that they can be
## preset by environment variables, if customization is needed.  The
## definitions here mostly reflect the directory organization of the
## ESC tools; changing them will likely break something.

## This include file contains any user-customized definitions.
export TOP ?= .
include ${TOP}/Makefile.local

## Variables that define the release.  They will be used to build
## archives for distribution.  They should corrolate with the
## version flag in escjava.Main.

## @todo kiniry 15 May 2003 - Make escjava.Main load the definition of
## its "version" variable from these environment variable, and fall
## back to a reasonable default value if they are unavailable.

## These are likely to change slowly as releases are issued.
export ESC_PROJECT ?= ESCTools
export ESC_VERSION ?= May-2003

## The following definitions are used in various Makefiles and should
## be common for all users and environments.  (at least those environments
## that have '/' as the path separator.
## These are defined here rather than in the Makefiles for the individual
## packages because the tools are used by each other (e.g. all tools use
## Javafe).

export ESCTOOLS_JARS = ${ESCTOOLS_ROOT}/jars
export JAVADOC_GEN_DIR ?= ${ESCTOOLS_ROOT}/javadoc

export JAVAFE_ROOT = ${ESCTOOLS_ROOT}/Javafe
export JAVAFE_SOURCE_DIR = ${JAVAFE_ROOT}/java
export JAVAFE_CLASSFILES = ${JAVAFE_ROOT}/classfiles

## This is the path needed to build Javafe
export JAVAFE_BUILD_CLASSPATH = ${JAVAFE_CLASSFILES}

# This is the path needed to run Javafe (only used for testing)
export JAVAFE_CLASSPATH = ${JAVAFE_CLASSFILES}
 
export ESCJAVA_ROOT = ${ESCTOOLS_ROOT}/Escjava
export ESCJAVA_SOURCE_DIR = ${ESCJAVA_ROOT}/java
export ESCJAVA_CLASSFILES = ${ESCJAVA_ROOT}/classfiles

## Paths to Mocha components
export MOCHA_LIB ?= ${ESCTOOLS_ROOT}/jars/mochalib.jar

## This is the path needed to *build* Escjava.
export ESCJAVA_BUILD_CLASSPATH = ${JAVAFE_CLASSFILES}:${ESCJAVA_CLASSFILES}:${MOCHA_LIB}
## This is the path needed to *run* Escjava.
## FIXME - do we want to run using jar files instead??
## @todo kiniry - No, I believe that we should test only with the
## generated classfiles, not with the jar files.  The only place I
## have contradicted this is in the mocha stuff since we ship a
## pre-built jar files.  I think that the "binary" release should
## refer to the jar files.
export ESCJAVA_CLASSPATH = ${JAVAFE_CLASSFILES}:${ESCJAVA_CLASSFILES}:${MOCHA_LIB}

## Definitions of Java tools.
export JAVA ?= java
export JAVAC ?= javac 
export JAVAC_FLAGS ?= -g -source 1.4
export JAVADOC ?= javadoc -J-mx200m

## The front-end for Escjava that should be used for testing.
export ESCJAVA = ${ESCJAVA_ROOT}/escj

# This is the location of any specification files for the JDK.
# Makefile.local; here we set a default value as the location of spec
# files supplied with the ESC release.
export JDKSPEC_ROOT ?= ${ESCJAVA_ROOT}/release/master/specs
 
######################### locations #########################
 
 
##### This stuff with MOCHA needs to be cleaned up
### FIXME
 
## Escjava relies on the jMocha library from UC Berkeley.
## It uses (a) a jar file of java classes (mochalib.jar) that
## is supplied with the Escjava distribution.
## It also uses (b) a set of compiled shared object modules.

## FIXME: DO we supply these?  DO we supply the tools to build them?
## Do we leave it to the user to figure it out?  What are the license
## restrictions on jMocha?  What version do we have here?

## Joe: We do not supply these, nor is jMocha absolutely necessary for
## using ESC/Java.  The license on jMocha is BSDish so we can
## redistribute whatever bits of it that we like so long as we give
## proper attribution.  http://www.ucop.edu/ott/permissn.html
## See http://www.cs.sunysb.edu/~mocha/ for more information.

# To get predicate abstraction to work with ESC/Java, you need to
# download jMocha from UC Berkeley.  When you build jMocha, you'll get
# 3 shared objects: libjbdd.so, libglu.so, libcu.so.  These have to be
# put in an appropriate directory, and LD_LIBRARY_PATH must be set to
# the name of that directory.  For example, if you put the shared
# objects in a directory called ${MOCHA_ROOT}/platform/alpha, then you
# would include the following line here:
export MOCHA_ROOT = ${ESCJAVA_ROOT}/mochalib
export MOCHA_SOURCE_DIR = ${MOCHA_ROOT}/java
export MOCHA_TWO_ROOT = /usr/local/Java/j-mocha.2.0/mocha
export LD_LIBRARY_PATH = ${MOCHA_TWO_ROOT}/platform/linux
export MOCHA_CLASSES = ${MOCHA_SOURCE_DIR}:${ESCJAVA_ROOT}/jars/mochalib.jar
 
######################### classpaths #########################
 
## FIXME -- check which of these are actually needed - they come from
## the setup file so some are for execution.

#
# The classpath for compiling Escjava; no sources outside the
# repository should be on this list:
#
export JARS = ${ESCTOOLS_JARS}/mochalib.jar:${ESCTOOLS_JARS}/javafe.jar:${ESCTOOLS_JARS}/escjava.jar:
 
##export CLASSFILES = ${CLASSDIRECTORY}:${MOCHA_LIB}:${JAVAFE_CLASSFILES}
 
##export CLASSES = ${CLASSFILES}
 
##export CLASSPATH = ${CLASSES}
 
# A colon-separated list of directories that contain the source code
# for the whole of ESC/Java.
export SOURCEPATH = ${JAVAFE_SOURCE_DIR}:${ESCJAVA_SOURCE_DIR}:${MOCHA_SOURCE_DIR}:
 
#
# The appropriate -bootclasspath for Escjava:
#
# Need to sources here because we can't read binary inner classes;
# need the binaries because don't have source for sun.* classes...
#
export JDKSPEC = ${JDKSPEC_ROOT}
export BOOTCLASSPATH = ${JDKSPEC}:${JDK_BINARIES}
 
#
# The classpath for checking escjava itself (e.g., escjava's
# classpath), not counting -bootclasspath:
#
export ESCSPEC = ${SOURCEDIRECTORY}:${JAVAFE_ROOT}/java:${MOCHA_LIB}
 
 
######################### misc cmds #########################
 
export ESCJ_SIMPLIFY = ${ESCTOOLS_ROOT}/escjava/bin/Simplify
export ESCJ_SIMPLIFY = ${ESCJAVA_ROOT}/release/master/bin/Simplify-1.5.4.linux
#export ESCJ_SIMPLIFY = ${HOME}/apps/escjava1.2.4/escjava/bin/Simplify

#################################################################
# Everything from here down was added by Joe on 16 May 2003 to show
# how one might perform automatic setup of CLASSPATH, perform OS
# detection for file separators, etc.  These definitions are not
# currently used, but will be evaluated by the Concordia folks as they
# attempt to build on Cygwin.

# # Auto-library discovery of core JDK libs.
# 
# jdkdir =	/usr/local/Java/jdk-1.3
# jdklibs0 =	$(subst $(space),:,$(wildcard $(jdkdir)/jre/lib/*.jar))
# jdklibs1 =	$(subst $(space),:,$(wildcard $(jdkdir)/jre/lib/ext/*.jar))
# jdklibs2 =	$(subst $(space),:,$(wildcard /usr/local/Java/libs/*.jar))
# jdklibs =	$(jdklibs0):$(jdklibs1):$(jdklibs2)
# 
# # Auto-library discovery for UNIX and Windows.
# 
# empty:=
# space:=		$(empty) $(empty)
# unixlibpath =	$(subst $(space),:,$(wildcard $(libdir)/*.jar))
# doslibpath =	$(subst $(space),;,$(wildcard $(libdir)/*.jar))
# unixparents =	..:../..:../../..:../../../..:../../../../..
# dosparents =	..;../..;../../..;../../../..;../../../../..
# unixclasspath =	$(jdklibs):$(unixparents):$(unixlibpath):$(srcbasedir)
# dosclasspath =	$(jdklibs);$(dosparents);$(doslibpath);$(srcbasedir)
# 
# # Check to see if we are building on Windows.  If so, quote CLASSPATH
# # but not JIKESPATH.  That's just how it works - it doesn't match the
# # documentation.
# 
# ifdef COMSPEC
# 	export CLASSPATH = "$(dosclasspath)"
# else
# 	export CLASSPATH = $(unixclasspath)
# endif
# 
# ifdef COMSPEC
# 	export JIKESPATH = "$(CLASSPATH)"
# else
# 	export JIKESPATH = $(CLASSPATH)
# endif
# 
# # If the environmental variable QUIETJIKES is set to anything we'll tell
# # jikes to not be pedantic and complain about "rendundant" interface
# # information and the like that we actually like.
# 
# ifndef QUIETJIKES
# 	jikesflags =	$(corejikesflags) +P
# else
# 	jikesflags =	$(corejikesflags)
# endif
# 
# # If the environmental variable USEEMACS is set to anything we'll tell
# # jikes to output errors and warning in an emacs-compatible format.
# 
# ifdef USEEMACS
# 	jflags =	$(jikesflags) +E
# else
# 	jflags =	$(jikesflags)
# endif
# 
# # If the environmental variable JAVAC is set to anything, we'll try
# # to build with classic javac.  Otherwise, we'll use jikes.
# 
# ifdef JAVAC
# 	jc =		javac
# 	jflags =	$(javacflags)
# else
# 	jc =		jikes
# endif

 

