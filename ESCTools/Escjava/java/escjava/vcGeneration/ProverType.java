package escjava.vcGeneration;

/**
 * The interface to be implemented when adding a new prover to ESC/Java.
 * 
 * <p>With this interface, even Simplify is treated as just another prover.
 * 
 * <p>The following terminology is used consistently throughout the vcGenerator 
 * package:
 * <ul>
 * <li>by <i>prover</i> we shall mean a <i>logic</i> and 
 * an underlying proof <i>engine</i></li>
 * <li>by <i>proof</i> we shall mean  an ESC/Java 
 * VC term (targeted to some prover).</li>
 * </ul>
 */

public interface ProverType {

    /**
     * The visitor pattern is used to map an ESC/Java VC term to a prover term.
     * 
     * <p>vcGenerator uses this method to perform the mapping.
     * 
     * <p>A typical implementation of this method will also need to extend the 
     * TVisitor class.
     */
    public TVisitor visitor();

    /**
     * This method allows a VC term (generated by using the visitor pattern), for 
     * example, to:
     * <ul>
     * <li>be wrapped up as a prover assertion (eg. a lemma or theorem for the prover)</li>
     * <li>universally quantify all free variables in the VC term</li>
     * </ul>
     * 
     * @param name name to be given to the proof assertion (eg. lemma or theorem)
     * @param declns free variables of the VC term
     * @param vc VC term generated by the visitor pattern
     * @return 
     */
    public String getProof(String name, String declns, String vc);

    /**
     * FIXME
     * 
     * @param caller 
     * @return
     */
    public String getVariableInfo(VariableInfo caller);

    /**
     * FIXME
     * 
     * @param caller 
     * @return
     */
    public String getTypeInfo(TypeInfo caller);

    /**
     * Used to initialise the variable and type maps.
     */
    public void init();

    /**
     * This method allows an ESC/Java VC term to be simplified <i>before</i> 
     * it is translated to the target prover.
     * 
     * @param tree a VC term to be simplified
     */
    //FIXME To what extent is this really necessary?
    public void rewrite(TNode tree);

}
