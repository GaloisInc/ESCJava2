(PROMPT_OFF)
;----------------------------------------------------------------------
; "Universal", or class-independent part, of the background predicate

; === ESCJ 8: Section 0.4
    
(BG_PUSH (FORALL (m i x) (EQ (select (store m i x) i) x)))

(BG_PUSH (FORALL (m i j x) 
		 (IMPLIES (NEQ i j)
			  (EQ (select (store m i x) j)
			      (select m j)))))

(BG_PUSH (FORALL (m i j k x)
                 (IMPLIES (OR (< k i) (< j k))
                          (EQ (select (unset m i j) k) (select m k)))))

; === ESCJ 8: Section 1.1

(DEFPRED (<: t0 t1))

; <: reflexive
(BG_PUSH 
  (FORALL (t)
    (PATS (<: t t))
    (<: t t)))

; a special case, for which the above may not fire

(BG_PUSH (<: |T_java.lang.Object| |T_java.lang.Object|))

; <: transitive	
(BG_PUSH 
  (FORALL (t0 t1 t2)
    (PATS (MPAT (<: t0 t1) (<: t1 t2)))
    (IMPLIES (AND (<: t0 t1) (<: t1 t2))
      (<: t0 t2))))

;anti-symmetry
(BG_PUSH
 (FORALL
  (t0 t1)
  (PATS (MPAT (<: t0 t1) (<: t1 t0)))
  (IMPLIES (AND (<: t0 t1) (<: t1 t0)) (EQ t0 t1))))

; primitive types are final

(BG_PUSH (FORALL (t) (PATS (<: t |T_boolean|))
	(IMPLIES (<: t |T_boolean|) (EQ t |T_boolean|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_char|))
	(IMPLIES (<: t |T_char|) (EQ t |T_char|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_byte|))
	(IMPLIES (<: t |T_byte|) (EQ t |T_byte|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_short|))
	(IMPLIES (<: t |T_short|) (EQ t |T_short|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_int|))
	(IMPLIES (<: t |T_int|) (EQ t |T_int|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_long|))
	(IMPLIES (<: t |T_long|) (EQ t |T_long|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_float|))
	(IMPLIES (<: t |T_float|) (EQ t |T_float|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_double|))
	(IMPLIES (<: t |T_double|) (EQ t |T_double|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_bigint|))
	(IMPLIES (<: t |T_bigint|) (EQ t |T_bigint|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_real|))
	(IMPLIES (<: t |T_real|) (EQ t |T_real|))))
(BG_PUSH (FORALL (t) (PATS (<: t |T_void|))
	(IMPLIES (<: t |T_void|) (EQ t |T_void|))))

; (New as of 12 Dec 2000)
; primitive types have no proper supertypes

(BG_PUSH (FORALL (t) (PATS (<: |T_boolean| t))
	(IMPLIES (<: |T_boolean| t) (EQ t |T_boolean|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_char| t))
	(IMPLIES (<: |T_char| t) (EQ t |T_char|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_byte| t))
	(IMPLIES (<: |T_byte| t) (EQ t |T_byte|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_short| t))
	(IMPLIES (<: |T_short| t) (EQ t |T_short|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_int| t))
	(IMPLIES (<: |T_int| t) (EQ t |T_int|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_long| t))
	(IMPLIES (<: |T_long| t) (EQ t |T_long|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_float| t))
	(IMPLIES (<: |T_float| t) (EQ t |T_float|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_double| t))
	(IMPLIES (<: |T_double| t) (EQ t |T_double|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_bigint| t))
	(IMPLIES (<: |T_bigint| t) (EQ t |T_bigint|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_real| t))
	(IMPLIES (<: |T_real| t) (EQ t |T_real|))))
(BG_PUSH (FORALL (t) (PATS (<: |T_void| t))
	(IMPLIES (<: |T_void| t) (EQ t |T_void|))))
	
; === ESCJ 8: Section 1.2

(BG_PUSH
  (FORALL (t0 t1 t2)
    (PATS (<: t0 (asChild t1 t2)))
    (IMPLIES
      (<: t0 (asChild t1 t2))
      (EQ (classDown t2 t0) (asChild t1 t2)))))

; === ESCJ 8: Section 1.3
    
; new

(BG_PUSH 
  (<: |T_java.lang.Cloneable| |T_java.lang.Object|))

(BG_PUSH
  (FORALL (t)
    (PATS (|_array| t))
    (<: (|_array| t) |T_java.lang.Cloneable|)))
    
(BG_PUSH
  (FORALL (t)
    (PATS (elemtype (|_array| t)))
    (EQ (elemtype (|_array| t)) t)))

(BG_PUSH
  (FORALL (t0 t1) 
    (PATS (<: t0 (|_array| t1)))
    (IFF (<: t0 (|_array| t1))
      (AND
	(EQ t0 (|_array| (elemtype t0)))
	(<: (elemtype t0) t1)))))

; === ESCJ 8: Section 2.1

(DEFPRED (is x t))

(BG_PUSH
 (FORALL (x t)
	 (PATS (cast x t))
	 (is (cast x t) t)))
     
(BG_PUSH
 (FORALL (x t)
	 (PATS (cast x t))
	 (IMPLIES (is x t) (EQ (cast x t) x))))
     
; === ESCJ 8: Section 2.2

(BG_PUSH (DISTINCT |bool$false| |@true|))

; === ESCJ 8: Section 2.2.1

(BG_PUSH (FORALL (x) 
	   (PATS (is x |T_char|)) 
	   (IFF (is x |T_char|) (AND (<= 0 x) (<= x 65535)))))
(BG_PUSH (FORALL (x)
	   (PATS (is x |T_byte|))
	   (IFF (is x |T_byte|) (AND (<= -128 x) (<= x 127)))))
(BG_PUSH (FORALL (x) 
	   (PATS (is x |T_short|))
	   (IFF (is x |T_short|) (AND (<= -32768 x) (<= x 32767)))))
(BG_PUSH (FORALL (x) 
	   (PATS (is x |T_int|))
	   (IFF (is x |T_int|) (AND (<= intFirst x) (<= x intLast)))))
(BG_PUSH (FORALL (x) 
	   (PATS (is x |T_long|))
	   (IFF (is x |T_long|) (AND (<= longFirst x) (<= x longLast)))))

(BG_PUSH (< longFirst intFirst))
(BG_PUSH (< intFirst -1000000))
(BG_PUSH (< 1000000 intLast))
(BG_PUSH (< intLast longLast))

; == Defining bigint
(BG_PUSH (EQ |T_bigint| |T_long|))  ; FIXME - change this eventually

; === Define typeof for primitive types - DRCok
; Removed because numeric values can be more than one type -
; e.g. is(0,|T_byte|) and is(0,|T_int|) are both true
; Thus these axioms introduce an inconsistency.
; Pointed out by Michal Moskal 2/2006.

;(BG_PUSH (FORALL (x) 
;	   (PATS (typeof x))
;	   (IFF (is x |T_int|) (EQ (typeof x) |T_int|))
;    ))
;(BG_PUSH (FORALL (x) 
;	   (PATS (typeof x))
;	   ;(PATS (is x |T_short|))
;	   (IFF (is x |T_short|) (EQ (typeof x) |T_short|))
;    ))
;(BG_PUSH (FORALL (x) 
;	   (PATS (typeof x))
;	   ;(PATS (is x |T_long|))
;	   (IFF (is x |T_long|) (EQ (typeof x) |T_long|))
;     ))
;(BG_PUSH (FORALL (x) 
;	   (PATS (typeof x))
;	   ;(PATS (is x |T_byte|))
;	   (IFF (is x |T_byte|) (EQ (typeof x) |T_byte|))
;     ))
;(BG_PUSH (FORALL (x) 
;	   (PATS (typeof x))
;	   ;(PATS (is x |T_char|))
;	   (IFF (is x |T_char|) (EQ (typeof x) |T_char|))
;     ))
;(BG_PUSH (FORALL (x) 
;	   (PATS (typeof x))
;	   ;(PATS (is x |T_boolean|))
;	   (IFF (is x |T_boolean|) (EQ (typeof x) |T_boolean|))
;     ))
;(BG_PUSH (FORALL (x) 
;	   (PATS (typeof x))
;	   ;(PATS (is x |T_double|))
;	   (IFF (is x |T_double|) (EQ (typeof x) |T_double|))
;     ))
;(BG_PUSH (FORALL (x) 
;	   (PATS (typeof x))
;	   ;(PATS (is x |T_float|))
;	   (IFF (is x |T_float|) (EQ (typeof x) |T_float|))
;     ))
;(BG_PUSH (FORALL (x) 
;	   (PATS (typeof x))
;	   ;(PATS (is x |T_real|))
;	   (IFF (is x |T_real|) (EQ (typeof x) |T_real|))
;     ))
;(BG_PUSH (FORALL (x) 
;	   (PATS (typeof x))
;	   ;(PATS (is x |T_bigint|))
;	   (IFF (is x |T_bigint|) (EQ (typeof x) |T_bigint|))
;     ))

;; Not sure why (or if) this should be here
(BG_PUSH (FORALL (x) 
	   (PATS (typeof x))
	   ;(PATS (is x |T_void|))
	   (IFF (is x |T_void|) (EQ (typeof x) |T_void|))
     ))
     
; === ESCJ 8: Section 2.3
      
(BG_PUSH
 (FORALL (x t)
	 (PATS (MPAT (<: t |T_java.lang.Object|) (is x t)))
	 (IMPLIES (<: t |T_java.lang.Object|)
		  (IFF (is x t)
		       (OR (EQ x null) (<: (typeof x) t))))))

; === ESCJ 8: Section 2.4

(BG_PUSH
 (FORALL (f t x) (PATS (select (asField f t) x))
	 (is (select (asField f t) x) t)))

; === ESCJ 8: Section 2.5

(BG_PUSH
 (FORALL (e a i) (PATS (select (select (asElems e) a) i))
	 (is (select (select (asElems e) a) i)
	     (elemtype (typeof a)))))

; === ESCJ 8: Section 3.0

(DEFPRED (isAllocated x a0) (< (vAllocTime x) a0))

; === ESCJ 8: Section 3.1

(BG_PUSH
 (FORALL (x f a0) (PATS (isAllocated (select f x) a0))
	 (IMPLIES (AND (< (fClosedTime f) a0)
		       (isAllocated x a0))
		  (isAllocated (select f x) a0))))

; === ESCJ 8: Section 3.2

(BG_PUSH
 (FORALL (a e i a0) (PATS (isAllocated (select (select e a) i) a0))
	 (IMPLIES (AND (< (eClosedTime e) a0)
		       (isAllocated a a0))
		  (isAllocated (select (select e a) i) a0))))
 
; === ESCJ 8: Section 4 

; max(lockset) is in lockset

(BG_PUSH
 (FORALL (S)
  (PATS (select (asLockSet S) (max (asLockSet S))))
  (EQ
   (select (asLockSet S) (max (asLockSet S)))
   |@true|)))

; null is in lockset (not in ESCJ 8)

(BG_PUSH
 (FORALL (S)
  (PATS (asLockSet S))
  (EQ (select (asLockSet S) null) |@true|)))

(DEFPRED (lockLE x y) (<= x y))

(DEFPRED (lockLT x y) (< x y))

; all locks in lockset are below max(lockset) (not in ESCJ 8)

(BG_PUSH
 (FORALL (S mu)
  (IMPLIES
   (EQ (select (asLockSet S) mu) |@true|)
   (lockLE mu (max (asLockSet S))))))

; null precedes all objects in locking order (not in ESCJ 8)

(BG_PUSH
  (FORALL (x)
    (PATS (lockLE null x) (lockLT null x) (lockLE x null) (lockLT x null))
    (IMPLIES
      (<: (typeof x) |T_java.lang.Object|)
      (lockLE null x))))


; === ESCJ 8: Section 5.0

(BG_PUSH
 (FORALL (a) 
	 (PATS (arrayLength a))
	 (AND (<= 0 (arrayLength a))
	      (is (arrayLength a) |T_int|))))

(DEFPRED (arrayFresh a a0 b0 e s T v))

(BG_PUSH
  (FORALL (a a0 b0 e n s T v)
    (PATS (arrayFresh a a0 b0 e (arrayShapeMore n s) T v))
    (IFF
      (arrayFresh a a0 b0 e (arrayShapeMore n s) T v)
      (AND
	(<= a0 (vAllocTime a))
	(isAllocated a b0)
	(NEQ a null)
	(EQ (typeof a) T)
	(EQ (arrayLength a) n)
	(FORALL (i)
	  (PATS (select (select e a) i))
	  (AND
	    (arrayFresh (select (select e a) i) a0 b0 e s (elemtype T) v)
	    (EQ (arrayParent (select (select e a) i)) a)
	    (EQ (arrayPosition (select (select e a) i)) i)))))))

(BG_PUSH
  (FORALL (a a0 b0 e n T v)
    (PATS (arrayFresh a a0 b0 e (arrayShapeOne n) T v))
    (IFF
      (arrayFresh a a0 b0 e (arrayShapeOne n) T v)
      (AND
	(<= a0 (vAllocTime a))
	(isAllocated a b0)
	(NEQ a null)
	(EQ (typeof a) T)
	(EQ (arrayLength a) n)
	(FORALL (i)
	  (PATS (select (select e a) i))
	  (AND
	    (EQ (select (select e a) i) v)))))))

(BG_PUSH
  (FORALL (a0 b0 s T v e A)
    (PATS (arrayFresh A a0 b0 (asElems e) s T v))
    (IMPLIES
      (EQ A (arrayMake a0 b0 s T v))
      (arrayFresh A a0 b0 (asElems e) s T v)
    )
  )
)

(BG_PUSH
  (FORALL (a0 b0 a1 b1 s1 s2 T1 T2 v)
    (PATS (MPAT (arrayMake a0 b0 s1 T1 v) (arrayMake a1 b1 s2 T2 v) ))
    (IMPLIES
	(EQ (arrayMake a0 b0 s1 T1 v) (arrayMake a1 b1 s2 T2 v))
	(AND (EQ b0 b1) (EQ T1 T2) (EQ s1 s2))
)))

; === code to ensure that (isNewArray x) ==> x has no invariants


; arrayType is distinct from all types with invariants (due to the
; generated type-distinctness axiom)

(BG_PUSH
  (EQ arrayType (asChild arrayType |T_java.lang.Object|)))

(BG_PUSH
   (FORALL (t)
      (PATS (|_array| t))
      (<: (|_array| t) arrayType)))

(BG_PUSH
  (FORALL (s)
	  (PATS (isNewArray s))
	  (IMPLIES (EQ |@true| (isNewArray s))
		   (<: (typeof s) arrayType))))

; === ESCJ 8: Section 5.1
; integralMod is the computer mod - the sign of the result is the sign of the
; first operand; it is not the mathematical mod, whose result is always positive

; j != 0 ==> ((i/j)*j + (i%j) == i
(BG_PUSH
 (FORALL (i j) (PATS (integralDiv i j) )
 ;(FORALL (i j) (PATS (integralMod i j) (integralDiv i j))
	 (IMPLIES (NOT ( EQ j 0))
	 (EQ (+ (* (integralDiv i j) j) (integralMod i j))
	     i))))

;; FIXME? - If the above has a trigger of (integralMod i j) and the axiom
;; below is also included, then we get some inconsistency and a failure of
;; test 72

; (i>=0 && j>0) ==> (i%j >= 0 && i%j < j)
(BG_PUSH
 (FORALL (i j) (PATS (integralMod i j))
	 (IMPLIES (AND (< 0 j) (<= 0 i))
		  (AND (<= 0 (integralMod i j))
		       (< (integralMod i j) j)))))

; (j != 0) ==> (0%j == 0)
(BG_PUSH
 (FORALL (i j) (PATS (integralMod i j))
	 (IMPLIES (AND (NOT (EQ j 0)) (EQ i 0))
	  (EQ 0 (integralMod i j)))))

; (j != 0) ==> ((i>=0) ==> (i%j)>=0 ))
(BG_PUSH
 (FORALL (i j) (PATS (integralMod i j))
	 (IMPLIES (NOT (EQ j 0)) 
	   (IMPLIES (<= 0 i) (<= 0 (integralMod i j))))))

; (j != 0) ==> ((i<=0) ==> (i%j)<=0 ))
(BG_PUSH
 (FORALL (i j) (PATS (integralMod i j))
  (IMPLIES (NOT (EQ j 0)) 
		(IMPLIES (<= i 0) (<= (integralMod i j) 0)))))


; Only true for mathMod
;(BG_PUSH
; (FORALL (i j) 
;	 (PATS (integralMod (+ i j) j))
;	 (EQ (integralMod (+ i j) j) 
;	     (integralMod i j))))
;
;(BG_PUSH
; (FORALL (i j)
;	 (PATS (integralMod (+ j i) j))
;	 (EQ (integralMod (+ j i) j) 
;	     (integralMod i j))))

; to prevent a matching loop
(BG_PUSH
 (FORALL (x y)
  (PATS (* (integralDiv (* x y) y) y))
  (EQ (* (integralDiv (* x y) y) y) (* x y))))


; === ESCJ 8: Section 5.2

(DEFPRED (boolAnd a b)
  (AND
    (EQ a |@true|) 
    (EQ b |@true|)))

(DEFPRED (boolEq a b)
  (IFF
    (EQ a |@true|)
    (EQ b |@true|)))

(DEFPRED (boolImplies a b)
  (IMPLIES
    (EQ a |@true|)
    (EQ b |@true|)))
    
(DEFPRED (boolNE a b)
  (NOT (IFF
	 (EQ a |@true|)
	 (EQ b |@true|))))

(DEFPRED (boolNot a)
  (NOT (EQ a |@true|)))

(DEFPRED (boolOr a b)
  (OR
    (EQ a |@true|)
    (EQ b |@true|)))

; Axioms related to Strings - DRCok

(DEFPRED (|interned:| s))

(BG_PUSH
  (FORALL (i k)
    (PATS (|intern:| i k))
    (AND (NEQ (|intern:| i k) null)
         (EQ (typeof (|intern:| i k)) |T_java.lang.String|)
         (isAllocated (|intern:| i k) alloc))))

(BG_PUSH
  (FORALL (s)
    (PATS (|interned:| s))
    (is (|interned:| s) |T_boolean|)
  ))

(BG_PUSH
  (FORALL (i ii k kk)
    (PATS (MPAT (|intern:| i k) (|intern:| ii kk)))
    (IFF (EQ (|intern:| i k) (|intern:| ii kk))  (EQ i ii)) ))

(BG_PUSH
  (FORALL (i k)
    (PATS (|intern:| i k))
    (|interned:| (|intern:| i k))
  ))
        
(BG_PUSH
  (FORALL (x y a)
    (PATS (stringCat x y a))
    (AND (NEQ (stringCat x y a) null)
    	 (NOT (isAllocated (stringCat x y a) a))
         (EQ (typeof (stringCat x y a)) |T_java.lang.String|))))

(BG_PUSH
  (FORALL (x y a b)
    (PATS (MPAT (stringCat x y a) (stringCat x y b)))
    (IFF (EQ (stringCat x y a) (stringCat x y b)) (EQ a b))))

(BG_PUSH
  (FORALL (a b i j)
    (PATS (MPAT (next a i) (next b j)))
	(IFF (EQ (next a i)(next b j))
		 (AND (EQ a b)(EQ i j)))))
	
(BG_PUSH
  (FORALL (a i) 
    (PATS (next a i))
    (< a (next a i))))
    	 
(BG_PUSH
  (FORALL (x y xx yy a b)
     (PATS (MPAT (stringCat x y a) (stringCat xx yy b)))
     (IMPLIES
     	  (EQ (stringCat x y a) (stringCat xx yy b))
     	  (EQ a b))))
     	  
(DEFPRED (stringCatP r x y a0 a1))

(BG_PUSH
  (FORALL (r x y a0 a1)
    (PATS (stringCatP r x y a0 a1))
    (IMPLIES (stringCatP r x y a0 a1)
    		(AND (NEQ r null)
    	 		(isAllocated r a1)
    	 		(NOT (isAllocated r a0))
    	 		(< a0 a1)
         		(EQ (typeof r) |T_java.lang.String|)))))

; Not in ESCJ8, but should be

(BG_PUSH
  (FORALL (x y)
    (PATS (integralEQ x y))
    (IFF
      (EQ (integralEQ x y) |@true|)
      (EQ x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (integralGE x y))
    (IFF
      (EQ (integralGE x y) |@true|)
      (>= x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (integralGT x y))
    (IFF
      (EQ (integralGT x y) |@true|)
      (> x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (integralLE x y))
    (IFF
      (EQ (integralLE x y) |@true|)
      (<= x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (integralLT x y))
    (IFF
      (EQ (integralLT x y) |@true|)
      (< x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (integralNE x y))
    (IFF
      (EQ (integralNE x y) |@true|)
      (NEQ x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (refEQ x y))
    (IFF
      (EQ (refEQ x y) |@true|)
      (EQ x y))))

(BG_PUSH
  (FORALL (x y)
    (PATS (refNE x y))
    (IFF
      (EQ (refNE x y) |@true|)
      (NEQ x y))))

; === ESCJ 8: Section 5.3

(BG_PUSH
 (FORALL (x y)
	 (PATS (termConditional |@true| x y))
	 (EQ (termConditional |@true| x y) x)))

(BG_PUSH
 (FORALL (b x y)
	 (PATS (termConditional b x y))
	 (IMPLIES (NEQ b |@true|)
		  (EQ (termConditional b x y) y))))

; === Implementation of nonnullelements; not in ESCJ 8 (yet?):

(DEFPRED (nonnullelements x e)
   (AND (NEQ x null)
	(FORALL (i)
	   (IMPLIES (AND (<= 0 i)
			 (< i (arrayLength x)))
		    (NEQ (select (select e x) i) null)))))


; === Axioms about classLiteral; not in ESCJ 8 (yet?):

(BG_PUSH
 (FORALL (t)
	 (PATS (classLiteral t))
	 (AND (NEQ (classLiteral t) null)
	      (is (classLiteral t) |T_java.lang.Class|)
              (isAllocated (classLiteral t) alloc))))

(BG_PUSH
 (FORALL (t)
	 (PATS (classLiteral t))
	 (EQ (classLiteral t) t)
))

; === Axioms about properties of integral &, |, and /

(BG_PUSH
 (FORALL (x y)
  (PATS (integralAnd x y))
  (IMPLIES
   (OR (<= 0 x) (<= 0 y))
   (<= 0 (integralAnd x y)))))

(BG_PUSH
 (FORALL (x y)
  (PATS (integralAnd x y))
  (IMPLIES
   (<= 0 x)
   (<= (integralAnd x y) x))))

(BG_PUSH
 (FORALL (x y)
  (PATS (integralAnd x y))
  (IMPLIES
   (<= 0 y)
   (<= (integralAnd x y) y))))

(BG_PUSH
 (FORALL (x y)
  (PATS (integralOr x y))
  (IMPLIES
   (AND (<= 0 x) (<= 0 y))
   (AND (<= x (integralOr x y)) (<= y (integralOr x y))))))

; ((x >= 0) & (y > 0)) ==> (x/y >= 0 & x >= (x/y) )
(BG_PUSH
 (FORALL (x y)
  (PATS (integralDiv x y))
  (IMPLIES
   (AND (<= 0 x) (< 0 y))
   (AND (<= 0 (integralDiv x y)) (<= (integralDiv x y) x)))))

; ((x <= 0) & (y > 0)) ==> (x/y <= 0 & x <= x/y))
(BG_PUSH
 (FORALL (x y)
  (PATS (integralDiv x y))
  (IMPLIES
   (AND (<= x 0) (< 0 y))
   (AND (<= (integralDiv x y) 0) (<= x (integralDiv x y))))))

; ((x <= z) & (y > 0)) ==> (x/y <= z/y))
(BG_PUSH
 (FORALL (x y z)
  (PATS (MPAT (integralDiv z y) (LE x z)))
  (IMPLIES
   (AND (<= x z) (< 0 y))
   (<= (integralDiv x y) (integralDiv z y)))))

; ( x >= 0 & y < 0) ==> (x/y)<=0
(BG_PUSH
 (FORALL (x y)
  (PATS (integralDiv x y))
  (IMPLIES
   (AND (<= 0 x) (< y 0))
   (<= (integralDiv x y) 0))))

; ( x <= 0 & y < 0 ) ==> (x/y) >= 0
(BG_PUSH
 (FORALL (x y)
  (PATS (integralDiv x y))
  (IMPLIES
   (AND (<= x 0) (< y 0))
   (<= 0 (integralDiv x y)))))

; (x <= 0 & y > 0) ==> (x/y) <= 0
(BG_PUSH
 (FORALL (x y)
  (PATS (integralDiv x y))
  (IMPLIES
   (AND (<= x 0) (< 0 y))
   (<= (integralDiv x y) 0))))

; (x == 0 & y != 0) ==> (x/y)==0
(BG_PUSH
 (FORALL (x y)
  (PATS (integralDiv x y))
  (IMPLIES
   (AND (EQ 0 x) (NOT (EQ 0 y)))
   (EQ 0 (integralDiv x y)))))


(BG_PUSH
 (FORALL (x y)
  (PATS (integralXor x y))
  (IMPLIES
   (AND (<= 0 x) (<= 0 y))
   (<= 0 (integralXor x y)))))

(BG_PUSH
 (FORALL (n)
  (PATS (intShiftL 1 n))
  (IMPLIES
   (AND (<= 0 n) (< n 31))
   (<= 1 (intShiftL 1 n)))))

(BG_PUSH
 (FORALL (n)
  (PATS (longShiftL 1 n))
  (IMPLIES
   (AND (<= 0 n) (< n 63))
   (<= 1 (longShiftL 1 n)))))

; === A few floating point axioms - DRCok
;; FIXME - floatingLT etc are predicates here, but are functions in ESC/java - is that a problem?
;; FIXME - have to include NaN and infinity

;; Order axioms
(BG_PUSH
 (FORALL (d dd)
  (AND
     (OR
	(EQ |@true| (floatingLT d dd))
	(EQ |@true| (floatingEQ d dd))
	(EQ |@true| (floatingGT d dd))
     )
     (IFF (EQ |@true| (floatingLE d dd)) (OR (EQ |@true| (floatingEQ d dd)) (EQ |@true| (floatingLT d dd))))
     (IFF (EQ |@true| (floatingGE d dd)) (OR (EQ |@true| (floatingEQ d dd)) (EQ |@true| (floatingGT d dd))))
     (IFF (EQ |@true| (floatingLT d dd)) (EQ |@true| (floatingGT dd d)))
     (IFF (EQ |@true| (floatingLE d dd)) (EQ |@true| (floatingGE dd d)))
     (NOT (IFF (EQ |@true| (floatingLT d dd)) (EQ |@true| (floatingGE d dd))))
     (NOT (IFF (EQ |@true| (floatingGT d dd)) (EQ |@true| (floatingLE d dd))))
  )))


;; floatingNE
(BG_PUSH (FORALL (d dd) (IFF (EQ |@true| (floatingEQ d dd)) (NOT (EQ |@true| (floatingNE d dd)))) ))

;; floatADD
(BG_PUSH (FORALL (d dd)
  (IMPLIES (EQ |@true| (floatingGT d (floatingNEG dd))) (EQ |@true| (floatingGT (floatingADD d dd) |F_0.0|)))
))

;; floatMUL
;;(BG_PUSH (FORALL (d dd) (AND
  ;;(IFF (OR (floatingEQ d |F_0.0|) (floatingEQ dd |F_0.0|)) (floatingEQ (floatingMUL d dd) |F_0.0|))
  ;;(IMPLIES (AND (floatingGT d |F_0.0|) (floatingGT dd |F_0.0|)) (floatingGT (floatingMUL d dd) |F_0.0|))
  ;;(IMPLIES (AND (floatingLT d |F_0.0|) (floatingLT dd |F_0.0|)) (floatingGT (floatingMUL d dd) |F_0.0|))
  ;;(IMPLIES (AND (floatingLT d |F_0.0|) (floatingGT dd |F_0.0|)) (floatingLT (floatingMUL d dd) |F_0.0|))
  ;;(IMPLIES (AND (floatingGT d |F_0.0|) (floatingLT dd |F_0.0|)) (floatingLT (floatingMUL d dd) |F_0.0|))
;;)))

;; floatingMOD
(BG_PUSH
 (FORALL (d dd)
  (IMPLIES (EQ |@true| (floatingNE dd |F_0.0|)) (AND
    (IMPLIES (EQ |@true| (floatingGE d |F_0.0|)) (EQ |@true| (floatingGE (floatingMOD d dd) |F_0.0|)))
    (IMPLIES (EQ |@true| (floatingLE d |F_0.0|)) (EQ |@true| (floatingLE (floatingMOD d dd) |F_0.0|)))
))))
(BG_PUSH (FORALL (d dd) 
    (IMPLIES (EQ |@true| (floatingGT dd |F_0.0|)) (AND
        (EQ |@true| (floatingGT (floatingMOD d dd) (floatingNEG dd))) 
        (EQ |@true| (floatingLT (floatingMOD d dd) dd)) ))
))
(BG_PUSH (FORALL (d dd) 
    (IMPLIES (EQ |@true| (floatingLT dd |F_0.0|)) (EQ |@true| (floatingLT (floatingMOD d dd) (floatingNEG dd)))) ))
(BG_PUSH (FORALL (d dd) 
    (IMPLIES (EQ |@true| (floatingLT dd |F_0.0|)) (EQ |@true| (floatingGT (floatingMOD d dd) dd))) ))

; === Temporary kludge to speed up distinguishing small integers:

(BG_PUSH
 (DISTINCT -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9
	   10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
	   30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
	   50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
	   70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89
	   90 91 92 93 94 95 96 97 98 99
	   100 101 102 103 104 105 106 107 108 109
	   110 111 112 113 114 115 116 117 118 119
	   120 121 122 123 124 125 126 127 128 129
	   130 131 132 133 134 135 136 137 138 139
	   140 141 142 143 144 145 146 147 148 149
	   150 151 152 153 154 155 156 157 158 159
	   160 161 162 163 164 165 166 167 168 169
	   170 171 172 173 174 175 176 177 178 179
	   180 181 182 183 184 185 186 187 188 189
	   190 191 192 193 194 195 196 197 198 199
	   200 201 202 203 204 205 206 207 208 209
	   210 211 212 213 214 215 216 217 218 219
	   220 221 222 223 224 225 226 227 228 229
	   230 231 232 233 234 235 236 237 238 239
	   240 241 242 243 244 245 246 247 248 249
	   250 251 252 253 254 255 256 257 258 259
	   260 261 262 263 264 265 266 267 268 269
	   270 271 272 273 274 275 276 277 278 279
	   280 281 282 283 284 285 286 287 288 289
	   290 291 292 293 294 295 296 297 298 299
	   300 301 302 303 304 305 306 307 308 309
	   310 311 312 313 314 315 316 317 318 319
	   320 321 322 323 324 325 326 327 328 329
	   330 331 332 333 334 335 336 337 338 339
	   340 341 342 343 344 345 346 347 348 349
	   350 351 352 353 354 355 356 357 358 359
	   360 361 362 363 364 365 366 367 368 369
	   370 371 372 373 374 375 376 377 378 379
	   380 381 382 383 384 385 386 387 388 389
	   390 391 392 393 394 395 396 397 398 399))

;----------------------------------------------------------------------
; End of Universal background predicate
;----------------------------------------------------------------------
(PROMPT_ON)
